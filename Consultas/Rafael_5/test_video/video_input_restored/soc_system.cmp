-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, the Altera Quartus II License Agreement,
-- the Altera MegaCore Function License Agreement, or other 
-- applicable license agreement, including, without limitation, 
-- that your use is for the sole purpose of programming logic 
-- devices manufactured by Altera and sold by Altera or its 
-- authorized distributors.  Please refer to the applicable 
-- agreement for further details.


-- Generated by Quartus II 64-Bit Version 15.0 (Build Build 145 04/22/2015)
-- Created on Wed Aug 31 09:25:59 2016

COMPONENT soc_system
	PORT
	(
		button_pio_external_connection_export		:	 IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		clk_clk		:	 IN STD_LOGIC;
		clk_125mhz_clk		:	 IN STD_LOGIC;
		dipsw_pio_external_connection_export		:	 IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		div_freq_export		:	 OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		hps_0_h2f_reset_reset_n		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_TX_CLK		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_TXD0		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_TXD1		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_TXD2		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_TXD3		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_RXD0		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_MDIO		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_MDC		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_RX_CTL		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_TX_CTL		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_RX_CLK		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_RXD1		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_RXD2		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_emac1_inst_RXD3		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_sdio_inst_CMD		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_sdio_inst_D0		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_sdio_inst_D1		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_sdio_inst_CLK		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_sdio_inst_D2		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_sdio_inst_D3		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_D0		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_D1		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_D2		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_D3		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_D4		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_D5		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_D6		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_D7		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_CLK		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_STP		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_DIR		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_usb1_inst_NXT		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_spim1_inst_CLK		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_spim1_inst_MOSI		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_spim1_inst_MISO		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_spim1_inst_SS0		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_uart0_inst_RX		:	 IN STD_LOGIC;
		hps_0_hps_io_hps_io_uart0_inst_TX		:	 OUT STD_LOGIC;
		hps_0_hps_io_hps_io_i2c0_inst_SDA		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_i2c0_inst_SCL		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_i2c1_inst_SDA		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_i2c1_inst_SCL		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_gpio_inst_GPIO09		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_gpio_inst_GPIO35		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_gpio_inst_GPIO40		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_gpio_inst_GPIO53		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_gpio_inst_GPIO54		:	 INOUT STD_LOGIC;
		hps_0_hps_io_hps_io_gpio_inst_GPIO61		:	 INOUT STD_LOGIC;
		led_pio_external_connection_export		:	 OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		memory_mem_a		:	 OUT STD_LOGIC_VECTOR(14 DOWNTO 0);
		memory_mem_ba		:	 OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
		memory_mem_ck		:	 OUT STD_LOGIC;
		memory_mem_ck_n		:	 OUT STD_LOGIC;
		memory_mem_cke		:	 OUT STD_LOGIC;
		memory_mem_cs_n		:	 OUT STD_LOGIC;
		memory_mem_ras_n		:	 OUT STD_LOGIC;
		memory_mem_cas_n		:	 OUT STD_LOGIC;
		memory_mem_we_n		:	 OUT STD_LOGIC;
		memory_mem_reset_n		:	 OUT STD_LOGIC;
		memory_mem_dq		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		memory_mem_dqs		:	 INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		memory_mem_dqs_n		:	 INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		memory_mem_odt		:	 OUT STD_LOGIC;
		memory_mem_dm		:	 OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		memory_oct_rzqin		:	 IN STD_LOGIC;
		reset_reset_n		:	 IN STD_LOGIC;
		reset_0_reset_n		:	 IN STD_LOGIC;
		video_input_0_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_0_in_write		:	 IN STD_LOGIC;
		video_input_0_in_waitrequest		:	 OUT STD_LOGIC;
		video_input_1_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_1_in_write		:	 IN STD_LOGIC;
		video_input_1_in_waitrequest		:	 OUT STD_LOGIC;
		video_input_2_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_2_in_write		:	 IN STD_LOGIC;
		video_input_2_in_waitrequest		:	 OUT STD_LOGIC;
		video_input_3_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_3_in_write		:	 IN STD_LOGIC;
		video_input_3_in_waitrequest		:	 OUT STD_LOGIC;
		video_input_4_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_4_in_write		:	 IN STD_LOGIC;
		video_input_4_in_waitrequest		:	 OUT STD_LOGIC;
		video_input_5_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_5_in_write		:	 IN STD_LOGIC;
		video_input_5_in_waitrequest		:	 OUT STD_LOGIC;
		video_input_6_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_6_in_write		:	 IN STD_LOGIC;
		video_input_6_in_waitrequest		:	 OUT STD_LOGIC;
		video_input_7_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_7_in_write		:	 IN STD_LOGIC;
		video_input_7_in_waitrequest		:	 OUT STD_LOGIC;
		video_input_8_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_8_in_write		:	 IN STD_LOGIC;
		video_input_8_in_waitrequest		:	 OUT STD_LOGIC;
		video_input_9_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_9_in_write		:	 IN STD_LOGIC;
		video_input_9_in_waitrequest		:	 OUT STD_LOGIC;
		video_input_in_writedata		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		video_input_in_write		:	 IN STD_LOGIC;
		video_input_in_waitrequest		:	 OUT STD_LOGIC
	);
END COMPONENT;