// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0] hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire        hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire        hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0] hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [63:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [7:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire        hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire        hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire        hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0] hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]  hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire        hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire        hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0] hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0] hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire        hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire        hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0] hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [63:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]  hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire        hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire        hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire        hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire        clk_0_clk_clk,                                                    //                                                  clk_0_clk.clk
		input  wire        clk_1_clk_clk,                                                    //                                                  clk_1_clk.clk
		input  wire        hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        video_input_reset_out_reset_bridge_in_reset_reset,                //                video_input_reset_out_reset_bridge_in_reset.reset
		output wire        video_input_out_read,                                             //                                            video_input_out.read
		input  wire [31:0] video_input_out_readdata,                                         //                                                           .readdata
		input  wire        video_input_out_waitrequest,                                      //                                                           .waitrequest
		output wire [2:0]  video_input_out_csr_address,                                      //                                        video_input_out_csr.address
		output wire        video_input_out_csr_write,                                        //                                                           .write
		output wire        video_input_out_csr_read,                                         //                                                           .read
		input  wire [31:0] video_input_out_csr_readdata,                                     //                                                           .readdata
		output wire [31:0] video_input_out_csr_writedata,                                    //                                                           .writedata
		output wire        video_input_0_out_read,                                           //                                          video_input_0_out.read
		input  wire [31:0] video_input_0_out_readdata,                                       //                                                           .readdata
		input  wire        video_input_0_out_waitrequest,                                    //                                                           .waitrequest
		output wire [2:0]  video_input_0_out_csr_address,                                    //                                      video_input_0_out_csr.address
		output wire        video_input_0_out_csr_write,                                      //                                                           .write
		output wire        video_input_0_out_csr_read,                                       //                                                           .read
		input  wire [31:0] video_input_0_out_csr_readdata,                                   //                                                           .readdata
		output wire [31:0] video_input_0_out_csr_writedata,                                  //                                                           .writedata
		output wire        video_input_1_out_read,                                           //                                          video_input_1_out.read
		input  wire [31:0] video_input_1_out_readdata,                                       //                                                           .readdata
		input  wire        video_input_1_out_waitrequest,                                    //                                                           .waitrequest
		output wire [2:0]  video_input_1_out_csr_address,                                    //                                      video_input_1_out_csr.address
		output wire        video_input_1_out_csr_write,                                      //                                                           .write
		output wire        video_input_1_out_csr_read,                                       //                                                           .read
		input  wire [31:0] video_input_1_out_csr_readdata,                                   //                                                           .readdata
		output wire [31:0] video_input_1_out_csr_writedata,                                  //                                                           .writedata
		output wire        video_input_2_out_read,                                           //                                          video_input_2_out.read
		input  wire [31:0] video_input_2_out_readdata,                                       //                                                           .readdata
		input  wire        video_input_2_out_waitrequest,                                    //                                                           .waitrequest
		output wire [2:0]  video_input_2_out_csr_address,                                    //                                      video_input_2_out_csr.address
		output wire        video_input_2_out_csr_write,                                      //                                                           .write
		output wire        video_input_2_out_csr_read,                                       //                                                           .read
		input  wire [31:0] video_input_2_out_csr_readdata,                                   //                                                           .readdata
		output wire [31:0] video_input_2_out_csr_writedata,                                  //                                                           .writedata
		output wire        video_input_3_out_read,                                           //                                          video_input_3_out.read
		input  wire [31:0] video_input_3_out_readdata,                                       //                                                           .readdata
		input  wire        video_input_3_out_waitrequest,                                    //                                                           .waitrequest
		output wire [2:0]  video_input_3_out_csr_address,                                    //                                      video_input_3_out_csr.address
		output wire        video_input_3_out_csr_write,                                      //                                                           .write
		output wire        video_input_3_out_csr_read,                                       //                                                           .read
		input  wire [31:0] video_input_3_out_csr_readdata,                                   //                                                           .readdata
		output wire [31:0] video_input_3_out_csr_writedata,                                  //                                                           .writedata
		output wire        video_input_4_out_read,                                           //                                          video_input_4_out.read
		input  wire [31:0] video_input_4_out_readdata,                                       //                                                           .readdata
		input  wire        video_input_4_out_waitrequest,                                    //                                                           .waitrequest
		output wire [2:0]  video_input_4_out_csr_address,                                    //                                      video_input_4_out_csr.address
		output wire        video_input_4_out_csr_write,                                      //                                                           .write
		output wire        video_input_4_out_csr_read,                                       //                                                           .read
		input  wire [31:0] video_input_4_out_csr_readdata,                                   //                                                           .readdata
		output wire [31:0] video_input_4_out_csr_writedata,                                  //                                                           .writedata
		output wire        video_input_5_out_read,                                           //                                          video_input_5_out.read
		input  wire [31:0] video_input_5_out_readdata,                                       //                                                           .readdata
		input  wire        video_input_5_out_waitrequest,                                    //                                                           .waitrequest
		output wire [2:0]  video_input_5_out_csr_address,                                    //                                      video_input_5_out_csr.address
		output wire        video_input_5_out_csr_write,                                      //                                                           .write
		output wire        video_input_5_out_csr_read,                                       //                                                           .read
		input  wire [31:0] video_input_5_out_csr_readdata,                                   //                                                           .readdata
		output wire [31:0] video_input_5_out_csr_writedata,                                  //                                                           .writedata
		output wire        video_input_6_out_read,                                           //                                          video_input_6_out.read
		input  wire [31:0] video_input_6_out_readdata,                                       //                                                           .readdata
		input  wire        video_input_6_out_waitrequest,                                    //                                                           .waitrequest
		output wire [2:0]  video_input_6_out_csr_address,                                    //                                      video_input_6_out_csr.address
		output wire        video_input_6_out_csr_write,                                      //                                                           .write
		output wire        video_input_6_out_csr_read,                                       //                                                           .read
		input  wire [31:0] video_input_6_out_csr_readdata,                                   //                                                           .readdata
		output wire [31:0] video_input_6_out_csr_writedata,                                  //                                                           .writedata
		output wire        video_input_7_out_read,                                           //                                          video_input_7_out.read
		input  wire [31:0] video_input_7_out_readdata,                                       //                                                           .readdata
		input  wire        video_input_7_out_waitrequest,                                    //                                                           .waitrequest
		output wire [2:0]  video_input_7_out_csr_address,                                    //                                      video_input_7_out_csr.address
		output wire        video_input_7_out_csr_write,                                      //                                                           .write
		output wire        video_input_7_out_csr_read,                                       //                                                           .read
		input  wire [31:0] video_input_7_out_csr_readdata,                                   //                                                           .readdata
		output wire [31:0] video_input_7_out_csr_writedata,                                  //                                                           .writedata
		output wire        video_input_8_out_read,                                           //                                          video_input_8_out.read
		input  wire [31:0] video_input_8_out_readdata,                                       //                                                           .readdata
		input  wire        video_input_8_out_waitrequest,                                    //                                                           .waitrequest
		output wire [2:0]  video_input_8_out_csr_address,                                    //                                      video_input_8_out_csr.address
		output wire        video_input_8_out_csr_write,                                      //                                                           .write
		output wire        video_input_8_out_csr_read,                                       //                                                           .read
		input  wire [31:0] video_input_8_out_csr_readdata,                                   //                                                           .readdata
		output wire [31:0] video_input_8_out_csr_writedata,                                  //                                                           .writedata
		output wire        video_input_9_out_read,                                           //                                          video_input_9_out.read
		input  wire [31:0] video_input_9_out_readdata,                                       //                                                           .readdata
		input  wire        video_input_9_out_waitrequest,                                    //                                                           .waitrequest
		output wire [2:0]  video_input_9_out_csr_address,                                    //                                      video_input_9_out_csr.address
		output wire        video_input_9_out_csr_write,                                      //                                                           .write
		output wire        video_input_9_out_csr_read,                                       //                                                           .read
		input  wire [31:0] video_input_9_out_csr_readdata,                                   //                                                           .readdata
		output wire [31:0] video_input_9_out_csr_writedata                                   //                                                           .writedata
	);

	wire   [31:0] video_input_out_agent_m0_readdata;                         // video_input_out_translator:uav_readdata -> video_input_out_agent:m0_readdata
	wire          video_input_out_agent_m0_waitrequest;                      // video_input_out_translator:uav_waitrequest -> video_input_out_agent:m0_waitrequest
	wire          video_input_out_agent_m0_debugaccess;                      // video_input_out_agent:m0_debugaccess -> video_input_out_translator:uav_debugaccess
	wire   [29:0] video_input_out_agent_m0_address;                          // video_input_out_agent:m0_address -> video_input_out_translator:uav_address
	wire    [3:0] video_input_out_agent_m0_byteenable;                       // video_input_out_agent:m0_byteenable -> video_input_out_translator:uav_byteenable
	wire          video_input_out_agent_m0_read;                             // video_input_out_agent:m0_read -> video_input_out_translator:uav_read
	wire          video_input_out_agent_m0_readdatavalid;                    // video_input_out_translator:uav_readdatavalid -> video_input_out_agent:m0_readdatavalid
	wire          video_input_out_agent_m0_lock;                             // video_input_out_agent:m0_lock -> video_input_out_translator:uav_lock
	wire   [31:0] video_input_out_agent_m0_writedata;                        // video_input_out_agent:m0_writedata -> video_input_out_translator:uav_writedata
	wire          video_input_out_agent_m0_write;                            // video_input_out_agent:m0_write -> video_input_out_translator:uav_write
	wire    [2:0] video_input_out_agent_m0_burstcount;                       // video_input_out_agent:m0_burstcount -> video_input_out_translator:uav_burstcount
	wire          video_input_out_agent_rf_source_valid;                     // video_input_out_agent:rf_source_valid -> video_input_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_out_agent_rf_source_data;                      // video_input_out_agent:rf_source_data -> video_input_out_agent_rsp_fifo:in_data
	wire          video_input_out_agent_rf_source_ready;                     // video_input_out_agent_rsp_fifo:in_ready -> video_input_out_agent:rf_source_ready
	wire          video_input_out_agent_rf_source_startofpacket;             // video_input_out_agent:rf_source_startofpacket -> video_input_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_out_agent_rf_source_endofpacket;               // video_input_out_agent:rf_source_endofpacket -> video_input_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_out_agent_rsp_fifo_out_valid;                  // video_input_out_agent_rsp_fifo:out_valid -> video_input_out_agent:rf_sink_valid
	wire  [131:0] video_input_out_agent_rsp_fifo_out_data;                   // video_input_out_agent_rsp_fifo:out_data -> video_input_out_agent:rf_sink_data
	wire          video_input_out_agent_rsp_fifo_out_ready;                  // video_input_out_agent:rf_sink_ready -> video_input_out_agent_rsp_fifo:out_ready
	wire          video_input_out_agent_rsp_fifo_out_startofpacket;          // video_input_out_agent_rsp_fifo:out_startofpacket -> video_input_out_agent:rf_sink_startofpacket
	wire          video_input_out_agent_rsp_fifo_out_endofpacket;            // video_input_out_agent_rsp_fifo:out_endofpacket -> video_input_out_agent:rf_sink_endofpacket
	wire          video_input_out_agent_rdata_fifo_src_valid;                // video_input_out_agent:rdata_fifo_src_valid -> video_input_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_out_agent_rdata_fifo_src_data;                 // video_input_out_agent:rdata_fifo_src_data -> video_input_out_agent_rdata_fifo:in_data
	wire          video_input_out_agent_rdata_fifo_src_ready;                // video_input_out_agent_rdata_fifo:in_ready -> video_input_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_0_out_agent_m0_readdata;                       // video_input_0_out_translator:uav_readdata -> video_input_0_out_agent:m0_readdata
	wire          video_input_0_out_agent_m0_waitrequest;                    // video_input_0_out_translator:uav_waitrequest -> video_input_0_out_agent:m0_waitrequest
	wire          video_input_0_out_agent_m0_debugaccess;                    // video_input_0_out_agent:m0_debugaccess -> video_input_0_out_translator:uav_debugaccess
	wire   [29:0] video_input_0_out_agent_m0_address;                        // video_input_0_out_agent:m0_address -> video_input_0_out_translator:uav_address
	wire    [3:0] video_input_0_out_agent_m0_byteenable;                     // video_input_0_out_agent:m0_byteenable -> video_input_0_out_translator:uav_byteenable
	wire          video_input_0_out_agent_m0_read;                           // video_input_0_out_agent:m0_read -> video_input_0_out_translator:uav_read
	wire          video_input_0_out_agent_m0_readdatavalid;                  // video_input_0_out_translator:uav_readdatavalid -> video_input_0_out_agent:m0_readdatavalid
	wire          video_input_0_out_agent_m0_lock;                           // video_input_0_out_agent:m0_lock -> video_input_0_out_translator:uav_lock
	wire   [31:0] video_input_0_out_agent_m0_writedata;                      // video_input_0_out_agent:m0_writedata -> video_input_0_out_translator:uav_writedata
	wire          video_input_0_out_agent_m0_write;                          // video_input_0_out_agent:m0_write -> video_input_0_out_translator:uav_write
	wire    [2:0] video_input_0_out_agent_m0_burstcount;                     // video_input_0_out_agent:m0_burstcount -> video_input_0_out_translator:uav_burstcount
	wire          video_input_0_out_agent_rf_source_valid;                   // video_input_0_out_agent:rf_source_valid -> video_input_0_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_0_out_agent_rf_source_data;                    // video_input_0_out_agent:rf_source_data -> video_input_0_out_agent_rsp_fifo:in_data
	wire          video_input_0_out_agent_rf_source_ready;                   // video_input_0_out_agent_rsp_fifo:in_ready -> video_input_0_out_agent:rf_source_ready
	wire          video_input_0_out_agent_rf_source_startofpacket;           // video_input_0_out_agent:rf_source_startofpacket -> video_input_0_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_0_out_agent_rf_source_endofpacket;             // video_input_0_out_agent:rf_source_endofpacket -> video_input_0_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_0_out_agent_rsp_fifo_out_valid;                // video_input_0_out_agent_rsp_fifo:out_valid -> video_input_0_out_agent:rf_sink_valid
	wire  [131:0] video_input_0_out_agent_rsp_fifo_out_data;                 // video_input_0_out_agent_rsp_fifo:out_data -> video_input_0_out_agent:rf_sink_data
	wire          video_input_0_out_agent_rsp_fifo_out_ready;                // video_input_0_out_agent:rf_sink_ready -> video_input_0_out_agent_rsp_fifo:out_ready
	wire          video_input_0_out_agent_rsp_fifo_out_startofpacket;        // video_input_0_out_agent_rsp_fifo:out_startofpacket -> video_input_0_out_agent:rf_sink_startofpacket
	wire          video_input_0_out_agent_rsp_fifo_out_endofpacket;          // video_input_0_out_agent_rsp_fifo:out_endofpacket -> video_input_0_out_agent:rf_sink_endofpacket
	wire          video_input_0_out_agent_rdata_fifo_src_valid;              // video_input_0_out_agent:rdata_fifo_src_valid -> video_input_0_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_0_out_agent_rdata_fifo_src_data;               // video_input_0_out_agent:rdata_fifo_src_data -> video_input_0_out_agent_rdata_fifo:in_data
	wire          video_input_0_out_agent_rdata_fifo_src_ready;              // video_input_0_out_agent_rdata_fifo:in_ready -> video_input_0_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_1_out_agent_m0_readdata;                       // video_input_1_out_translator:uav_readdata -> video_input_1_out_agent:m0_readdata
	wire          video_input_1_out_agent_m0_waitrequest;                    // video_input_1_out_translator:uav_waitrequest -> video_input_1_out_agent:m0_waitrequest
	wire          video_input_1_out_agent_m0_debugaccess;                    // video_input_1_out_agent:m0_debugaccess -> video_input_1_out_translator:uav_debugaccess
	wire   [29:0] video_input_1_out_agent_m0_address;                        // video_input_1_out_agent:m0_address -> video_input_1_out_translator:uav_address
	wire    [3:0] video_input_1_out_agent_m0_byteenable;                     // video_input_1_out_agent:m0_byteenable -> video_input_1_out_translator:uav_byteenable
	wire          video_input_1_out_agent_m0_read;                           // video_input_1_out_agent:m0_read -> video_input_1_out_translator:uav_read
	wire          video_input_1_out_agent_m0_readdatavalid;                  // video_input_1_out_translator:uav_readdatavalid -> video_input_1_out_agent:m0_readdatavalid
	wire          video_input_1_out_agent_m0_lock;                           // video_input_1_out_agent:m0_lock -> video_input_1_out_translator:uav_lock
	wire   [31:0] video_input_1_out_agent_m0_writedata;                      // video_input_1_out_agent:m0_writedata -> video_input_1_out_translator:uav_writedata
	wire          video_input_1_out_agent_m0_write;                          // video_input_1_out_agent:m0_write -> video_input_1_out_translator:uav_write
	wire    [2:0] video_input_1_out_agent_m0_burstcount;                     // video_input_1_out_agent:m0_burstcount -> video_input_1_out_translator:uav_burstcount
	wire          video_input_1_out_agent_rf_source_valid;                   // video_input_1_out_agent:rf_source_valid -> video_input_1_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_1_out_agent_rf_source_data;                    // video_input_1_out_agent:rf_source_data -> video_input_1_out_agent_rsp_fifo:in_data
	wire          video_input_1_out_agent_rf_source_ready;                   // video_input_1_out_agent_rsp_fifo:in_ready -> video_input_1_out_agent:rf_source_ready
	wire          video_input_1_out_agent_rf_source_startofpacket;           // video_input_1_out_agent:rf_source_startofpacket -> video_input_1_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_1_out_agent_rf_source_endofpacket;             // video_input_1_out_agent:rf_source_endofpacket -> video_input_1_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_1_out_agent_rsp_fifo_out_valid;                // video_input_1_out_agent_rsp_fifo:out_valid -> video_input_1_out_agent:rf_sink_valid
	wire  [131:0] video_input_1_out_agent_rsp_fifo_out_data;                 // video_input_1_out_agent_rsp_fifo:out_data -> video_input_1_out_agent:rf_sink_data
	wire          video_input_1_out_agent_rsp_fifo_out_ready;                // video_input_1_out_agent:rf_sink_ready -> video_input_1_out_agent_rsp_fifo:out_ready
	wire          video_input_1_out_agent_rsp_fifo_out_startofpacket;        // video_input_1_out_agent_rsp_fifo:out_startofpacket -> video_input_1_out_agent:rf_sink_startofpacket
	wire          video_input_1_out_agent_rsp_fifo_out_endofpacket;          // video_input_1_out_agent_rsp_fifo:out_endofpacket -> video_input_1_out_agent:rf_sink_endofpacket
	wire          video_input_1_out_agent_rdata_fifo_src_valid;              // video_input_1_out_agent:rdata_fifo_src_valid -> video_input_1_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_1_out_agent_rdata_fifo_src_data;               // video_input_1_out_agent:rdata_fifo_src_data -> video_input_1_out_agent_rdata_fifo:in_data
	wire          video_input_1_out_agent_rdata_fifo_src_ready;              // video_input_1_out_agent_rdata_fifo:in_ready -> video_input_1_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_2_out_agent_m0_readdata;                       // video_input_2_out_translator:uav_readdata -> video_input_2_out_agent:m0_readdata
	wire          video_input_2_out_agent_m0_waitrequest;                    // video_input_2_out_translator:uav_waitrequest -> video_input_2_out_agent:m0_waitrequest
	wire          video_input_2_out_agent_m0_debugaccess;                    // video_input_2_out_agent:m0_debugaccess -> video_input_2_out_translator:uav_debugaccess
	wire   [29:0] video_input_2_out_agent_m0_address;                        // video_input_2_out_agent:m0_address -> video_input_2_out_translator:uav_address
	wire    [3:0] video_input_2_out_agent_m0_byteenable;                     // video_input_2_out_agent:m0_byteenable -> video_input_2_out_translator:uav_byteenable
	wire          video_input_2_out_agent_m0_read;                           // video_input_2_out_agent:m0_read -> video_input_2_out_translator:uav_read
	wire          video_input_2_out_agent_m0_readdatavalid;                  // video_input_2_out_translator:uav_readdatavalid -> video_input_2_out_agent:m0_readdatavalid
	wire          video_input_2_out_agent_m0_lock;                           // video_input_2_out_agent:m0_lock -> video_input_2_out_translator:uav_lock
	wire   [31:0] video_input_2_out_agent_m0_writedata;                      // video_input_2_out_agent:m0_writedata -> video_input_2_out_translator:uav_writedata
	wire          video_input_2_out_agent_m0_write;                          // video_input_2_out_agent:m0_write -> video_input_2_out_translator:uav_write
	wire    [2:0] video_input_2_out_agent_m0_burstcount;                     // video_input_2_out_agent:m0_burstcount -> video_input_2_out_translator:uav_burstcount
	wire          video_input_2_out_agent_rf_source_valid;                   // video_input_2_out_agent:rf_source_valid -> video_input_2_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_2_out_agent_rf_source_data;                    // video_input_2_out_agent:rf_source_data -> video_input_2_out_agent_rsp_fifo:in_data
	wire          video_input_2_out_agent_rf_source_ready;                   // video_input_2_out_agent_rsp_fifo:in_ready -> video_input_2_out_agent:rf_source_ready
	wire          video_input_2_out_agent_rf_source_startofpacket;           // video_input_2_out_agent:rf_source_startofpacket -> video_input_2_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_2_out_agent_rf_source_endofpacket;             // video_input_2_out_agent:rf_source_endofpacket -> video_input_2_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_2_out_agent_rsp_fifo_out_valid;                // video_input_2_out_agent_rsp_fifo:out_valid -> video_input_2_out_agent:rf_sink_valid
	wire  [131:0] video_input_2_out_agent_rsp_fifo_out_data;                 // video_input_2_out_agent_rsp_fifo:out_data -> video_input_2_out_agent:rf_sink_data
	wire          video_input_2_out_agent_rsp_fifo_out_ready;                // video_input_2_out_agent:rf_sink_ready -> video_input_2_out_agent_rsp_fifo:out_ready
	wire          video_input_2_out_agent_rsp_fifo_out_startofpacket;        // video_input_2_out_agent_rsp_fifo:out_startofpacket -> video_input_2_out_agent:rf_sink_startofpacket
	wire          video_input_2_out_agent_rsp_fifo_out_endofpacket;          // video_input_2_out_agent_rsp_fifo:out_endofpacket -> video_input_2_out_agent:rf_sink_endofpacket
	wire          video_input_2_out_agent_rdata_fifo_src_valid;              // video_input_2_out_agent:rdata_fifo_src_valid -> video_input_2_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_2_out_agent_rdata_fifo_src_data;               // video_input_2_out_agent:rdata_fifo_src_data -> video_input_2_out_agent_rdata_fifo:in_data
	wire          video_input_2_out_agent_rdata_fifo_src_ready;              // video_input_2_out_agent_rdata_fifo:in_ready -> video_input_2_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_3_out_agent_m0_readdata;                       // video_input_3_out_translator:uav_readdata -> video_input_3_out_agent:m0_readdata
	wire          video_input_3_out_agent_m0_waitrequest;                    // video_input_3_out_translator:uav_waitrequest -> video_input_3_out_agent:m0_waitrequest
	wire          video_input_3_out_agent_m0_debugaccess;                    // video_input_3_out_agent:m0_debugaccess -> video_input_3_out_translator:uav_debugaccess
	wire   [29:0] video_input_3_out_agent_m0_address;                        // video_input_3_out_agent:m0_address -> video_input_3_out_translator:uav_address
	wire    [3:0] video_input_3_out_agent_m0_byteenable;                     // video_input_3_out_agent:m0_byteenable -> video_input_3_out_translator:uav_byteenable
	wire          video_input_3_out_agent_m0_read;                           // video_input_3_out_agent:m0_read -> video_input_3_out_translator:uav_read
	wire          video_input_3_out_agent_m0_readdatavalid;                  // video_input_3_out_translator:uav_readdatavalid -> video_input_3_out_agent:m0_readdatavalid
	wire          video_input_3_out_agent_m0_lock;                           // video_input_3_out_agent:m0_lock -> video_input_3_out_translator:uav_lock
	wire   [31:0] video_input_3_out_agent_m0_writedata;                      // video_input_3_out_agent:m0_writedata -> video_input_3_out_translator:uav_writedata
	wire          video_input_3_out_agent_m0_write;                          // video_input_3_out_agent:m0_write -> video_input_3_out_translator:uav_write
	wire    [2:0] video_input_3_out_agent_m0_burstcount;                     // video_input_3_out_agent:m0_burstcount -> video_input_3_out_translator:uav_burstcount
	wire          video_input_3_out_agent_rf_source_valid;                   // video_input_3_out_agent:rf_source_valid -> video_input_3_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_3_out_agent_rf_source_data;                    // video_input_3_out_agent:rf_source_data -> video_input_3_out_agent_rsp_fifo:in_data
	wire          video_input_3_out_agent_rf_source_ready;                   // video_input_3_out_agent_rsp_fifo:in_ready -> video_input_3_out_agent:rf_source_ready
	wire          video_input_3_out_agent_rf_source_startofpacket;           // video_input_3_out_agent:rf_source_startofpacket -> video_input_3_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_3_out_agent_rf_source_endofpacket;             // video_input_3_out_agent:rf_source_endofpacket -> video_input_3_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_3_out_agent_rsp_fifo_out_valid;                // video_input_3_out_agent_rsp_fifo:out_valid -> video_input_3_out_agent:rf_sink_valid
	wire  [131:0] video_input_3_out_agent_rsp_fifo_out_data;                 // video_input_3_out_agent_rsp_fifo:out_data -> video_input_3_out_agent:rf_sink_data
	wire          video_input_3_out_agent_rsp_fifo_out_ready;                // video_input_3_out_agent:rf_sink_ready -> video_input_3_out_agent_rsp_fifo:out_ready
	wire          video_input_3_out_agent_rsp_fifo_out_startofpacket;        // video_input_3_out_agent_rsp_fifo:out_startofpacket -> video_input_3_out_agent:rf_sink_startofpacket
	wire          video_input_3_out_agent_rsp_fifo_out_endofpacket;          // video_input_3_out_agent_rsp_fifo:out_endofpacket -> video_input_3_out_agent:rf_sink_endofpacket
	wire          video_input_3_out_agent_rdata_fifo_src_valid;              // video_input_3_out_agent:rdata_fifo_src_valid -> video_input_3_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_3_out_agent_rdata_fifo_src_data;               // video_input_3_out_agent:rdata_fifo_src_data -> video_input_3_out_agent_rdata_fifo:in_data
	wire          video_input_3_out_agent_rdata_fifo_src_ready;              // video_input_3_out_agent_rdata_fifo:in_ready -> video_input_3_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_4_out_agent_m0_readdata;                       // video_input_4_out_translator:uav_readdata -> video_input_4_out_agent:m0_readdata
	wire          video_input_4_out_agent_m0_waitrequest;                    // video_input_4_out_translator:uav_waitrequest -> video_input_4_out_agent:m0_waitrequest
	wire          video_input_4_out_agent_m0_debugaccess;                    // video_input_4_out_agent:m0_debugaccess -> video_input_4_out_translator:uav_debugaccess
	wire   [29:0] video_input_4_out_agent_m0_address;                        // video_input_4_out_agent:m0_address -> video_input_4_out_translator:uav_address
	wire    [3:0] video_input_4_out_agent_m0_byteenable;                     // video_input_4_out_agent:m0_byteenable -> video_input_4_out_translator:uav_byteenable
	wire          video_input_4_out_agent_m0_read;                           // video_input_4_out_agent:m0_read -> video_input_4_out_translator:uav_read
	wire          video_input_4_out_agent_m0_readdatavalid;                  // video_input_4_out_translator:uav_readdatavalid -> video_input_4_out_agent:m0_readdatavalid
	wire          video_input_4_out_agent_m0_lock;                           // video_input_4_out_agent:m0_lock -> video_input_4_out_translator:uav_lock
	wire   [31:0] video_input_4_out_agent_m0_writedata;                      // video_input_4_out_agent:m0_writedata -> video_input_4_out_translator:uav_writedata
	wire          video_input_4_out_agent_m0_write;                          // video_input_4_out_agent:m0_write -> video_input_4_out_translator:uav_write
	wire    [2:0] video_input_4_out_agent_m0_burstcount;                     // video_input_4_out_agent:m0_burstcount -> video_input_4_out_translator:uav_burstcount
	wire          video_input_4_out_agent_rf_source_valid;                   // video_input_4_out_agent:rf_source_valid -> video_input_4_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_4_out_agent_rf_source_data;                    // video_input_4_out_agent:rf_source_data -> video_input_4_out_agent_rsp_fifo:in_data
	wire          video_input_4_out_agent_rf_source_ready;                   // video_input_4_out_agent_rsp_fifo:in_ready -> video_input_4_out_agent:rf_source_ready
	wire          video_input_4_out_agent_rf_source_startofpacket;           // video_input_4_out_agent:rf_source_startofpacket -> video_input_4_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_4_out_agent_rf_source_endofpacket;             // video_input_4_out_agent:rf_source_endofpacket -> video_input_4_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_4_out_agent_rsp_fifo_out_valid;                // video_input_4_out_agent_rsp_fifo:out_valid -> video_input_4_out_agent:rf_sink_valid
	wire  [131:0] video_input_4_out_agent_rsp_fifo_out_data;                 // video_input_4_out_agent_rsp_fifo:out_data -> video_input_4_out_agent:rf_sink_data
	wire          video_input_4_out_agent_rsp_fifo_out_ready;                // video_input_4_out_agent:rf_sink_ready -> video_input_4_out_agent_rsp_fifo:out_ready
	wire          video_input_4_out_agent_rsp_fifo_out_startofpacket;        // video_input_4_out_agent_rsp_fifo:out_startofpacket -> video_input_4_out_agent:rf_sink_startofpacket
	wire          video_input_4_out_agent_rsp_fifo_out_endofpacket;          // video_input_4_out_agent_rsp_fifo:out_endofpacket -> video_input_4_out_agent:rf_sink_endofpacket
	wire          video_input_4_out_agent_rdata_fifo_src_valid;              // video_input_4_out_agent:rdata_fifo_src_valid -> video_input_4_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_4_out_agent_rdata_fifo_src_data;               // video_input_4_out_agent:rdata_fifo_src_data -> video_input_4_out_agent_rdata_fifo:in_data
	wire          video_input_4_out_agent_rdata_fifo_src_ready;              // video_input_4_out_agent_rdata_fifo:in_ready -> video_input_4_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_5_out_agent_m0_readdata;                       // video_input_5_out_translator:uav_readdata -> video_input_5_out_agent:m0_readdata
	wire          video_input_5_out_agent_m0_waitrequest;                    // video_input_5_out_translator:uav_waitrequest -> video_input_5_out_agent:m0_waitrequest
	wire          video_input_5_out_agent_m0_debugaccess;                    // video_input_5_out_agent:m0_debugaccess -> video_input_5_out_translator:uav_debugaccess
	wire   [29:0] video_input_5_out_agent_m0_address;                        // video_input_5_out_agent:m0_address -> video_input_5_out_translator:uav_address
	wire    [3:0] video_input_5_out_agent_m0_byteenable;                     // video_input_5_out_agent:m0_byteenable -> video_input_5_out_translator:uav_byteenable
	wire          video_input_5_out_agent_m0_read;                           // video_input_5_out_agent:m0_read -> video_input_5_out_translator:uav_read
	wire          video_input_5_out_agent_m0_readdatavalid;                  // video_input_5_out_translator:uav_readdatavalid -> video_input_5_out_agent:m0_readdatavalid
	wire          video_input_5_out_agent_m0_lock;                           // video_input_5_out_agent:m0_lock -> video_input_5_out_translator:uav_lock
	wire   [31:0] video_input_5_out_agent_m0_writedata;                      // video_input_5_out_agent:m0_writedata -> video_input_5_out_translator:uav_writedata
	wire          video_input_5_out_agent_m0_write;                          // video_input_5_out_agent:m0_write -> video_input_5_out_translator:uav_write
	wire    [2:0] video_input_5_out_agent_m0_burstcount;                     // video_input_5_out_agent:m0_burstcount -> video_input_5_out_translator:uav_burstcount
	wire          video_input_5_out_agent_rf_source_valid;                   // video_input_5_out_agent:rf_source_valid -> video_input_5_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_5_out_agent_rf_source_data;                    // video_input_5_out_agent:rf_source_data -> video_input_5_out_agent_rsp_fifo:in_data
	wire          video_input_5_out_agent_rf_source_ready;                   // video_input_5_out_agent_rsp_fifo:in_ready -> video_input_5_out_agent:rf_source_ready
	wire          video_input_5_out_agent_rf_source_startofpacket;           // video_input_5_out_agent:rf_source_startofpacket -> video_input_5_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_5_out_agent_rf_source_endofpacket;             // video_input_5_out_agent:rf_source_endofpacket -> video_input_5_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_5_out_agent_rsp_fifo_out_valid;                // video_input_5_out_agent_rsp_fifo:out_valid -> video_input_5_out_agent:rf_sink_valid
	wire  [131:0] video_input_5_out_agent_rsp_fifo_out_data;                 // video_input_5_out_agent_rsp_fifo:out_data -> video_input_5_out_agent:rf_sink_data
	wire          video_input_5_out_agent_rsp_fifo_out_ready;                // video_input_5_out_agent:rf_sink_ready -> video_input_5_out_agent_rsp_fifo:out_ready
	wire          video_input_5_out_agent_rsp_fifo_out_startofpacket;        // video_input_5_out_agent_rsp_fifo:out_startofpacket -> video_input_5_out_agent:rf_sink_startofpacket
	wire          video_input_5_out_agent_rsp_fifo_out_endofpacket;          // video_input_5_out_agent_rsp_fifo:out_endofpacket -> video_input_5_out_agent:rf_sink_endofpacket
	wire          video_input_5_out_agent_rdata_fifo_src_valid;              // video_input_5_out_agent:rdata_fifo_src_valid -> video_input_5_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_5_out_agent_rdata_fifo_src_data;               // video_input_5_out_agent:rdata_fifo_src_data -> video_input_5_out_agent_rdata_fifo:in_data
	wire          video_input_5_out_agent_rdata_fifo_src_ready;              // video_input_5_out_agent_rdata_fifo:in_ready -> video_input_5_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_6_out_agent_m0_readdata;                       // video_input_6_out_translator:uav_readdata -> video_input_6_out_agent:m0_readdata
	wire          video_input_6_out_agent_m0_waitrequest;                    // video_input_6_out_translator:uav_waitrequest -> video_input_6_out_agent:m0_waitrequest
	wire          video_input_6_out_agent_m0_debugaccess;                    // video_input_6_out_agent:m0_debugaccess -> video_input_6_out_translator:uav_debugaccess
	wire   [29:0] video_input_6_out_agent_m0_address;                        // video_input_6_out_agent:m0_address -> video_input_6_out_translator:uav_address
	wire    [3:0] video_input_6_out_agent_m0_byteenable;                     // video_input_6_out_agent:m0_byteenable -> video_input_6_out_translator:uav_byteenable
	wire          video_input_6_out_agent_m0_read;                           // video_input_6_out_agent:m0_read -> video_input_6_out_translator:uav_read
	wire          video_input_6_out_agent_m0_readdatavalid;                  // video_input_6_out_translator:uav_readdatavalid -> video_input_6_out_agent:m0_readdatavalid
	wire          video_input_6_out_agent_m0_lock;                           // video_input_6_out_agent:m0_lock -> video_input_6_out_translator:uav_lock
	wire   [31:0] video_input_6_out_agent_m0_writedata;                      // video_input_6_out_agent:m0_writedata -> video_input_6_out_translator:uav_writedata
	wire          video_input_6_out_agent_m0_write;                          // video_input_6_out_agent:m0_write -> video_input_6_out_translator:uav_write
	wire    [2:0] video_input_6_out_agent_m0_burstcount;                     // video_input_6_out_agent:m0_burstcount -> video_input_6_out_translator:uav_burstcount
	wire          video_input_6_out_agent_rf_source_valid;                   // video_input_6_out_agent:rf_source_valid -> video_input_6_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_6_out_agent_rf_source_data;                    // video_input_6_out_agent:rf_source_data -> video_input_6_out_agent_rsp_fifo:in_data
	wire          video_input_6_out_agent_rf_source_ready;                   // video_input_6_out_agent_rsp_fifo:in_ready -> video_input_6_out_agent:rf_source_ready
	wire          video_input_6_out_agent_rf_source_startofpacket;           // video_input_6_out_agent:rf_source_startofpacket -> video_input_6_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_6_out_agent_rf_source_endofpacket;             // video_input_6_out_agent:rf_source_endofpacket -> video_input_6_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_6_out_agent_rsp_fifo_out_valid;                // video_input_6_out_agent_rsp_fifo:out_valid -> video_input_6_out_agent:rf_sink_valid
	wire  [131:0] video_input_6_out_agent_rsp_fifo_out_data;                 // video_input_6_out_agent_rsp_fifo:out_data -> video_input_6_out_agent:rf_sink_data
	wire          video_input_6_out_agent_rsp_fifo_out_ready;                // video_input_6_out_agent:rf_sink_ready -> video_input_6_out_agent_rsp_fifo:out_ready
	wire          video_input_6_out_agent_rsp_fifo_out_startofpacket;        // video_input_6_out_agent_rsp_fifo:out_startofpacket -> video_input_6_out_agent:rf_sink_startofpacket
	wire          video_input_6_out_agent_rsp_fifo_out_endofpacket;          // video_input_6_out_agent_rsp_fifo:out_endofpacket -> video_input_6_out_agent:rf_sink_endofpacket
	wire          video_input_6_out_agent_rdata_fifo_src_valid;              // video_input_6_out_agent:rdata_fifo_src_valid -> video_input_6_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_6_out_agent_rdata_fifo_src_data;               // video_input_6_out_agent:rdata_fifo_src_data -> video_input_6_out_agent_rdata_fifo:in_data
	wire          video_input_6_out_agent_rdata_fifo_src_ready;              // video_input_6_out_agent_rdata_fifo:in_ready -> video_input_6_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_7_out_agent_m0_readdata;                       // video_input_7_out_translator:uav_readdata -> video_input_7_out_agent:m0_readdata
	wire          video_input_7_out_agent_m0_waitrequest;                    // video_input_7_out_translator:uav_waitrequest -> video_input_7_out_agent:m0_waitrequest
	wire          video_input_7_out_agent_m0_debugaccess;                    // video_input_7_out_agent:m0_debugaccess -> video_input_7_out_translator:uav_debugaccess
	wire   [29:0] video_input_7_out_agent_m0_address;                        // video_input_7_out_agent:m0_address -> video_input_7_out_translator:uav_address
	wire    [3:0] video_input_7_out_agent_m0_byteenable;                     // video_input_7_out_agent:m0_byteenable -> video_input_7_out_translator:uav_byteenable
	wire          video_input_7_out_agent_m0_read;                           // video_input_7_out_agent:m0_read -> video_input_7_out_translator:uav_read
	wire          video_input_7_out_agent_m0_readdatavalid;                  // video_input_7_out_translator:uav_readdatavalid -> video_input_7_out_agent:m0_readdatavalid
	wire          video_input_7_out_agent_m0_lock;                           // video_input_7_out_agent:m0_lock -> video_input_7_out_translator:uav_lock
	wire   [31:0] video_input_7_out_agent_m0_writedata;                      // video_input_7_out_agent:m0_writedata -> video_input_7_out_translator:uav_writedata
	wire          video_input_7_out_agent_m0_write;                          // video_input_7_out_agent:m0_write -> video_input_7_out_translator:uav_write
	wire    [2:0] video_input_7_out_agent_m0_burstcount;                     // video_input_7_out_agent:m0_burstcount -> video_input_7_out_translator:uav_burstcount
	wire          video_input_7_out_agent_rf_source_valid;                   // video_input_7_out_agent:rf_source_valid -> video_input_7_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_7_out_agent_rf_source_data;                    // video_input_7_out_agent:rf_source_data -> video_input_7_out_agent_rsp_fifo:in_data
	wire          video_input_7_out_agent_rf_source_ready;                   // video_input_7_out_agent_rsp_fifo:in_ready -> video_input_7_out_agent:rf_source_ready
	wire          video_input_7_out_agent_rf_source_startofpacket;           // video_input_7_out_agent:rf_source_startofpacket -> video_input_7_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_7_out_agent_rf_source_endofpacket;             // video_input_7_out_agent:rf_source_endofpacket -> video_input_7_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_7_out_agent_rsp_fifo_out_valid;                // video_input_7_out_agent_rsp_fifo:out_valid -> video_input_7_out_agent:rf_sink_valid
	wire  [131:0] video_input_7_out_agent_rsp_fifo_out_data;                 // video_input_7_out_agent_rsp_fifo:out_data -> video_input_7_out_agent:rf_sink_data
	wire          video_input_7_out_agent_rsp_fifo_out_ready;                // video_input_7_out_agent:rf_sink_ready -> video_input_7_out_agent_rsp_fifo:out_ready
	wire          video_input_7_out_agent_rsp_fifo_out_startofpacket;        // video_input_7_out_agent_rsp_fifo:out_startofpacket -> video_input_7_out_agent:rf_sink_startofpacket
	wire          video_input_7_out_agent_rsp_fifo_out_endofpacket;          // video_input_7_out_agent_rsp_fifo:out_endofpacket -> video_input_7_out_agent:rf_sink_endofpacket
	wire          video_input_7_out_agent_rdata_fifo_src_valid;              // video_input_7_out_agent:rdata_fifo_src_valid -> video_input_7_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_7_out_agent_rdata_fifo_src_data;               // video_input_7_out_agent:rdata_fifo_src_data -> video_input_7_out_agent_rdata_fifo:in_data
	wire          video_input_7_out_agent_rdata_fifo_src_ready;              // video_input_7_out_agent_rdata_fifo:in_ready -> video_input_7_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_8_out_agent_m0_readdata;                       // video_input_8_out_translator:uav_readdata -> video_input_8_out_agent:m0_readdata
	wire          video_input_8_out_agent_m0_waitrequest;                    // video_input_8_out_translator:uav_waitrequest -> video_input_8_out_agent:m0_waitrequest
	wire          video_input_8_out_agent_m0_debugaccess;                    // video_input_8_out_agent:m0_debugaccess -> video_input_8_out_translator:uav_debugaccess
	wire   [29:0] video_input_8_out_agent_m0_address;                        // video_input_8_out_agent:m0_address -> video_input_8_out_translator:uav_address
	wire    [3:0] video_input_8_out_agent_m0_byteenable;                     // video_input_8_out_agent:m0_byteenable -> video_input_8_out_translator:uav_byteenable
	wire          video_input_8_out_agent_m0_read;                           // video_input_8_out_agent:m0_read -> video_input_8_out_translator:uav_read
	wire          video_input_8_out_agent_m0_readdatavalid;                  // video_input_8_out_translator:uav_readdatavalid -> video_input_8_out_agent:m0_readdatavalid
	wire          video_input_8_out_agent_m0_lock;                           // video_input_8_out_agent:m0_lock -> video_input_8_out_translator:uav_lock
	wire   [31:0] video_input_8_out_agent_m0_writedata;                      // video_input_8_out_agent:m0_writedata -> video_input_8_out_translator:uav_writedata
	wire          video_input_8_out_agent_m0_write;                          // video_input_8_out_agent:m0_write -> video_input_8_out_translator:uav_write
	wire    [2:0] video_input_8_out_agent_m0_burstcount;                     // video_input_8_out_agent:m0_burstcount -> video_input_8_out_translator:uav_burstcount
	wire          video_input_8_out_agent_rf_source_valid;                   // video_input_8_out_agent:rf_source_valid -> video_input_8_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_8_out_agent_rf_source_data;                    // video_input_8_out_agent:rf_source_data -> video_input_8_out_agent_rsp_fifo:in_data
	wire          video_input_8_out_agent_rf_source_ready;                   // video_input_8_out_agent_rsp_fifo:in_ready -> video_input_8_out_agent:rf_source_ready
	wire          video_input_8_out_agent_rf_source_startofpacket;           // video_input_8_out_agent:rf_source_startofpacket -> video_input_8_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_8_out_agent_rf_source_endofpacket;             // video_input_8_out_agent:rf_source_endofpacket -> video_input_8_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_8_out_agent_rsp_fifo_out_valid;                // video_input_8_out_agent_rsp_fifo:out_valid -> video_input_8_out_agent:rf_sink_valid
	wire  [131:0] video_input_8_out_agent_rsp_fifo_out_data;                 // video_input_8_out_agent_rsp_fifo:out_data -> video_input_8_out_agent:rf_sink_data
	wire          video_input_8_out_agent_rsp_fifo_out_ready;                // video_input_8_out_agent:rf_sink_ready -> video_input_8_out_agent_rsp_fifo:out_ready
	wire          video_input_8_out_agent_rsp_fifo_out_startofpacket;        // video_input_8_out_agent_rsp_fifo:out_startofpacket -> video_input_8_out_agent:rf_sink_startofpacket
	wire          video_input_8_out_agent_rsp_fifo_out_endofpacket;          // video_input_8_out_agent_rsp_fifo:out_endofpacket -> video_input_8_out_agent:rf_sink_endofpacket
	wire          video_input_8_out_agent_rdata_fifo_src_valid;              // video_input_8_out_agent:rdata_fifo_src_valid -> video_input_8_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_8_out_agent_rdata_fifo_src_data;               // video_input_8_out_agent:rdata_fifo_src_data -> video_input_8_out_agent_rdata_fifo:in_data
	wire          video_input_8_out_agent_rdata_fifo_src_ready;              // video_input_8_out_agent_rdata_fifo:in_ready -> video_input_8_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_9_out_agent_m0_readdata;                       // video_input_9_out_translator:uav_readdata -> video_input_9_out_agent:m0_readdata
	wire          video_input_9_out_agent_m0_waitrequest;                    // video_input_9_out_translator:uav_waitrequest -> video_input_9_out_agent:m0_waitrequest
	wire          video_input_9_out_agent_m0_debugaccess;                    // video_input_9_out_agent:m0_debugaccess -> video_input_9_out_translator:uav_debugaccess
	wire   [29:0] video_input_9_out_agent_m0_address;                        // video_input_9_out_agent:m0_address -> video_input_9_out_translator:uav_address
	wire    [3:0] video_input_9_out_agent_m0_byteenable;                     // video_input_9_out_agent:m0_byteenable -> video_input_9_out_translator:uav_byteenable
	wire          video_input_9_out_agent_m0_read;                           // video_input_9_out_agent:m0_read -> video_input_9_out_translator:uav_read
	wire          video_input_9_out_agent_m0_readdatavalid;                  // video_input_9_out_translator:uav_readdatavalid -> video_input_9_out_agent:m0_readdatavalid
	wire          video_input_9_out_agent_m0_lock;                           // video_input_9_out_agent:m0_lock -> video_input_9_out_translator:uav_lock
	wire   [31:0] video_input_9_out_agent_m0_writedata;                      // video_input_9_out_agent:m0_writedata -> video_input_9_out_translator:uav_writedata
	wire          video_input_9_out_agent_m0_write;                          // video_input_9_out_agent:m0_write -> video_input_9_out_translator:uav_write
	wire    [2:0] video_input_9_out_agent_m0_burstcount;                     // video_input_9_out_agent:m0_burstcount -> video_input_9_out_translator:uav_burstcount
	wire          video_input_9_out_agent_rf_source_valid;                   // video_input_9_out_agent:rf_source_valid -> video_input_9_out_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_9_out_agent_rf_source_data;                    // video_input_9_out_agent:rf_source_data -> video_input_9_out_agent_rsp_fifo:in_data
	wire          video_input_9_out_agent_rf_source_ready;                   // video_input_9_out_agent_rsp_fifo:in_ready -> video_input_9_out_agent:rf_source_ready
	wire          video_input_9_out_agent_rf_source_startofpacket;           // video_input_9_out_agent:rf_source_startofpacket -> video_input_9_out_agent_rsp_fifo:in_startofpacket
	wire          video_input_9_out_agent_rf_source_endofpacket;             // video_input_9_out_agent:rf_source_endofpacket -> video_input_9_out_agent_rsp_fifo:in_endofpacket
	wire          video_input_9_out_agent_rsp_fifo_out_valid;                // video_input_9_out_agent_rsp_fifo:out_valid -> video_input_9_out_agent:rf_sink_valid
	wire  [131:0] video_input_9_out_agent_rsp_fifo_out_data;                 // video_input_9_out_agent_rsp_fifo:out_data -> video_input_9_out_agent:rf_sink_data
	wire          video_input_9_out_agent_rsp_fifo_out_ready;                // video_input_9_out_agent:rf_sink_ready -> video_input_9_out_agent_rsp_fifo:out_ready
	wire          video_input_9_out_agent_rsp_fifo_out_startofpacket;        // video_input_9_out_agent_rsp_fifo:out_startofpacket -> video_input_9_out_agent:rf_sink_startofpacket
	wire          video_input_9_out_agent_rsp_fifo_out_endofpacket;          // video_input_9_out_agent_rsp_fifo:out_endofpacket -> video_input_9_out_agent:rf_sink_endofpacket
	wire          video_input_9_out_agent_rdata_fifo_src_valid;              // video_input_9_out_agent:rdata_fifo_src_valid -> video_input_9_out_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_9_out_agent_rdata_fifo_src_data;               // video_input_9_out_agent:rdata_fifo_src_data -> video_input_9_out_agent_rdata_fifo:in_data
	wire          video_input_9_out_agent_rdata_fifo_src_ready;              // video_input_9_out_agent_rdata_fifo:in_ready -> video_input_9_out_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_out_csr_agent_m0_readdata;                     // video_input_out_csr_translator:uav_readdata -> video_input_out_csr_agent:m0_readdata
	wire          video_input_out_csr_agent_m0_waitrequest;                  // video_input_out_csr_translator:uav_waitrequest -> video_input_out_csr_agent:m0_waitrequest
	wire          video_input_out_csr_agent_m0_debugaccess;                  // video_input_out_csr_agent:m0_debugaccess -> video_input_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_out_csr_agent_m0_address;                      // video_input_out_csr_agent:m0_address -> video_input_out_csr_translator:uav_address
	wire    [3:0] video_input_out_csr_agent_m0_byteenable;                   // video_input_out_csr_agent:m0_byteenable -> video_input_out_csr_translator:uav_byteenable
	wire          video_input_out_csr_agent_m0_read;                         // video_input_out_csr_agent:m0_read -> video_input_out_csr_translator:uav_read
	wire          video_input_out_csr_agent_m0_readdatavalid;                // video_input_out_csr_translator:uav_readdatavalid -> video_input_out_csr_agent:m0_readdatavalid
	wire          video_input_out_csr_agent_m0_lock;                         // video_input_out_csr_agent:m0_lock -> video_input_out_csr_translator:uav_lock
	wire   [31:0] video_input_out_csr_agent_m0_writedata;                    // video_input_out_csr_agent:m0_writedata -> video_input_out_csr_translator:uav_writedata
	wire          video_input_out_csr_agent_m0_write;                        // video_input_out_csr_agent:m0_write -> video_input_out_csr_translator:uav_write
	wire    [2:0] video_input_out_csr_agent_m0_burstcount;                   // video_input_out_csr_agent:m0_burstcount -> video_input_out_csr_translator:uav_burstcount
	wire          video_input_out_csr_agent_rf_source_valid;                 // video_input_out_csr_agent:rf_source_valid -> video_input_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_out_csr_agent_rf_source_data;                  // video_input_out_csr_agent:rf_source_data -> video_input_out_csr_agent_rsp_fifo:in_data
	wire          video_input_out_csr_agent_rf_source_ready;                 // video_input_out_csr_agent_rsp_fifo:in_ready -> video_input_out_csr_agent:rf_source_ready
	wire          video_input_out_csr_agent_rf_source_startofpacket;         // video_input_out_csr_agent:rf_source_startofpacket -> video_input_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_out_csr_agent_rf_source_endofpacket;           // video_input_out_csr_agent:rf_source_endofpacket -> video_input_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_out_csr_agent_rsp_fifo_out_valid;              // video_input_out_csr_agent_rsp_fifo:out_valid -> video_input_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_out_csr_agent_rsp_fifo_out_data;               // video_input_out_csr_agent_rsp_fifo:out_data -> video_input_out_csr_agent:rf_sink_data
	wire          video_input_out_csr_agent_rsp_fifo_out_ready;              // video_input_out_csr_agent:rf_sink_ready -> video_input_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_out_csr_agent_rsp_fifo_out_startofpacket;      // video_input_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_out_csr_agent:rf_sink_startofpacket
	wire          video_input_out_csr_agent_rsp_fifo_out_endofpacket;        // video_input_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_out_csr_agent:rf_sink_endofpacket
	wire          video_input_out_csr_agent_rdata_fifo_src_valid;            // video_input_out_csr_agent:rdata_fifo_src_valid -> video_input_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_out_csr_agent_rdata_fifo_src_data;             // video_input_out_csr_agent:rdata_fifo_src_data -> video_input_out_csr_agent_rdata_fifo:in_data
	wire          video_input_out_csr_agent_rdata_fifo_src_ready;            // video_input_out_csr_agent_rdata_fifo:in_ready -> video_input_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_0_out_csr_agent_m0_readdata;                   // video_input_0_out_csr_translator:uav_readdata -> video_input_0_out_csr_agent:m0_readdata
	wire          video_input_0_out_csr_agent_m0_waitrequest;                // video_input_0_out_csr_translator:uav_waitrequest -> video_input_0_out_csr_agent:m0_waitrequest
	wire          video_input_0_out_csr_agent_m0_debugaccess;                // video_input_0_out_csr_agent:m0_debugaccess -> video_input_0_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_0_out_csr_agent_m0_address;                    // video_input_0_out_csr_agent:m0_address -> video_input_0_out_csr_translator:uav_address
	wire    [3:0] video_input_0_out_csr_agent_m0_byteenable;                 // video_input_0_out_csr_agent:m0_byteenable -> video_input_0_out_csr_translator:uav_byteenable
	wire          video_input_0_out_csr_agent_m0_read;                       // video_input_0_out_csr_agent:m0_read -> video_input_0_out_csr_translator:uav_read
	wire          video_input_0_out_csr_agent_m0_readdatavalid;              // video_input_0_out_csr_translator:uav_readdatavalid -> video_input_0_out_csr_agent:m0_readdatavalid
	wire          video_input_0_out_csr_agent_m0_lock;                       // video_input_0_out_csr_agent:m0_lock -> video_input_0_out_csr_translator:uav_lock
	wire   [31:0] video_input_0_out_csr_agent_m0_writedata;                  // video_input_0_out_csr_agent:m0_writedata -> video_input_0_out_csr_translator:uav_writedata
	wire          video_input_0_out_csr_agent_m0_write;                      // video_input_0_out_csr_agent:m0_write -> video_input_0_out_csr_translator:uav_write
	wire    [2:0] video_input_0_out_csr_agent_m0_burstcount;                 // video_input_0_out_csr_agent:m0_burstcount -> video_input_0_out_csr_translator:uav_burstcount
	wire          video_input_0_out_csr_agent_rf_source_valid;               // video_input_0_out_csr_agent:rf_source_valid -> video_input_0_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_0_out_csr_agent_rf_source_data;                // video_input_0_out_csr_agent:rf_source_data -> video_input_0_out_csr_agent_rsp_fifo:in_data
	wire          video_input_0_out_csr_agent_rf_source_ready;               // video_input_0_out_csr_agent_rsp_fifo:in_ready -> video_input_0_out_csr_agent:rf_source_ready
	wire          video_input_0_out_csr_agent_rf_source_startofpacket;       // video_input_0_out_csr_agent:rf_source_startofpacket -> video_input_0_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_0_out_csr_agent_rf_source_endofpacket;         // video_input_0_out_csr_agent:rf_source_endofpacket -> video_input_0_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_0_out_csr_agent_rsp_fifo_out_valid;            // video_input_0_out_csr_agent_rsp_fifo:out_valid -> video_input_0_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_0_out_csr_agent_rsp_fifo_out_data;             // video_input_0_out_csr_agent_rsp_fifo:out_data -> video_input_0_out_csr_agent:rf_sink_data
	wire          video_input_0_out_csr_agent_rsp_fifo_out_ready;            // video_input_0_out_csr_agent:rf_sink_ready -> video_input_0_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_0_out_csr_agent_rsp_fifo_out_startofpacket;    // video_input_0_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_0_out_csr_agent:rf_sink_startofpacket
	wire          video_input_0_out_csr_agent_rsp_fifo_out_endofpacket;      // video_input_0_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_0_out_csr_agent:rf_sink_endofpacket
	wire          video_input_0_out_csr_agent_rdata_fifo_src_valid;          // video_input_0_out_csr_agent:rdata_fifo_src_valid -> video_input_0_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_0_out_csr_agent_rdata_fifo_src_data;           // video_input_0_out_csr_agent:rdata_fifo_src_data -> video_input_0_out_csr_agent_rdata_fifo:in_data
	wire          video_input_0_out_csr_agent_rdata_fifo_src_ready;          // video_input_0_out_csr_agent_rdata_fifo:in_ready -> video_input_0_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_1_out_csr_agent_m0_readdata;                   // video_input_1_out_csr_translator:uav_readdata -> video_input_1_out_csr_agent:m0_readdata
	wire          video_input_1_out_csr_agent_m0_waitrequest;                // video_input_1_out_csr_translator:uav_waitrequest -> video_input_1_out_csr_agent:m0_waitrequest
	wire          video_input_1_out_csr_agent_m0_debugaccess;                // video_input_1_out_csr_agent:m0_debugaccess -> video_input_1_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_1_out_csr_agent_m0_address;                    // video_input_1_out_csr_agent:m0_address -> video_input_1_out_csr_translator:uav_address
	wire    [3:0] video_input_1_out_csr_agent_m0_byteenable;                 // video_input_1_out_csr_agent:m0_byteenable -> video_input_1_out_csr_translator:uav_byteenable
	wire          video_input_1_out_csr_agent_m0_read;                       // video_input_1_out_csr_agent:m0_read -> video_input_1_out_csr_translator:uav_read
	wire          video_input_1_out_csr_agent_m0_readdatavalid;              // video_input_1_out_csr_translator:uav_readdatavalid -> video_input_1_out_csr_agent:m0_readdatavalid
	wire          video_input_1_out_csr_agent_m0_lock;                       // video_input_1_out_csr_agent:m0_lock -> video_input_1_out_csr_translator:uav_lock
	wire   [31:0] video_input_1_out_csr_agent_m0_writedata;                  // video_input_1_out_csr_agent:m0_writedata -> video_input_1_out_csr_translator:uav_writedata
	wire          video_input_1_out_csr_agent_m0_write;                      // video_input_1_out_csr_agent:m0_write -> video_input_1_out_csr_translator:uav_write
	wire    [2:0] video_input_1_out_csr_agent_m0_burstcount;                 // video_input_1_out_csr_agent:m0_burstcount -> video_input_1_out_csr_translator:uav_burstcount
	wire          video_input_1_out_csr_agent_rf_source_valid;               // video_input_1_out_csr_agent:rf_source_valid -> video_input_1_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_1_out_csr_agent_rf_source_data;                // video_input_1_out_csr_agent:rf_source_data -> video_input_1_out_csr_agent_rsp_fifo:in_data
	wire          video_input_1_out_csr_agent_rf_source_ready;               // video_input_1_out_csr_agent_rsp_fifo:in_ready -> video_input_1_out_csr_agent:rf_source_ready
	wire          video_input_1_out_csr_agent_rf_source_startofpacket;       // video_input_1_out_csr_agent:rf_source_startofpacket -> video_input_1_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_1_out_csr_agent_rf_source_endofpacket;         // video_input_1_out_csr_agent:rf_source_endofpacket -> video_input_1_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_1_out_csr_agent_rsp_fifo_out_valid;            // video_input_1_out_csr_agent_rsp_fifo:out_valid -> video_input_1_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_1_out_csr_agent_rsp_fifo_out_data;             // video_input_1_out_csr_agent_rsp_fifo:out_data -> video_input_1_out_csr_agent:rf_sink_data
	wire          video_input_1_out_csr_agent_rsp_fifo_out_ready;            // video_input_1_out_csr_agent:rf_sink_ready -> video_input_1_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_1_out_csr_agent_rsp_fifo_out_startofpacket;    // video_input_1_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_1_out_csr_agent:rf_sink_startofpacket
	wire          video_input_1_out_csr_agent_rsp_fifo_out_endofpacket;      // video_input_1_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_1_out_csr_agent:rf_sink_endofpacket
	wire          video_input_1_out_csr_agent_rdata_fifo_src_valid;          // video_input_1_out_csr_agent:rdata_fifo_src_valid -> video_input_1_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_1_out_csr_agent_rdata_fifo_src_data;           // video_input_1_out_csr_agent:rdata_fifo_src_data -> video_input_1_out_csr_agent_rdata_fifo:in_data
	wire          video_input_1_out_csr_agent_rdata_fifo_src_ready;          // video_input_1_out_csr_agent_rdata_fifo:in_ready -> video_input_1_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_2_out_csr_agent_m0_readdata;                   // video_input_2_out_csr_translator:uav_readdata -> video_input_2_out_csr_agent:m0_readdata
	wire          video_input_2_out_csr_agent_m0_waitrequest;                // video_input_2_out_csr_translator:uav_waitrequest -> video_input_2_out_csr_agent:m0_waitrequest
	wire          video_input_2_out_csr_agent_m0_debugaccess;                // video_input_2_out_csr_agent:m0_debugaccess -> video_input_2_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_2_out_csr_agent_m0_address;                    // video_input_2_out_csr_agent:m0_address -> video_input_2_out_csr_translator:uav_address
	wire    [3:0] video_input_2_out_csr_agent_m0_byteenable;                 // video_input_2_out_csr_agent:m0_byteenable -> video_input_2_out_csr_translator:uav_byteenable
	wire          video_input_2_out_csr_agent_m0_read;                       // video_input_2_out_csr_agent:m0_read -> video_input_2_out_csr_translator:uav_read
	wire          video_input_2_out_csr_agent_m0_readdatavalid;              // video_input_2_out_csr_translator:uav_readdatavalid -> video_input_2_out_csr_agent:m0_readdatavalid
	wire          video_input_2_out_csr_agent_m0_lock;                       // video_input_2_out_csr_agent:m0_lock -> video_input_2_out_csr_translator:uav_lock
	wire   [31:0] video_input_2_out_csr_agent_m0_writedata;                  // video_input_2_out_csr_agent:m0_writedata -> video_input_2_out_csr_translator:uav_writedata
	wire          video_input_2_out_csr_agent_m0_write;                      // video_input_2_out_csr_agent:m0_write -> video_input_2_out_csr_translator:uav_write
	wire    [2:0] video_input_2_out_csr_agent_m0_burstcount;                 // video_input_2_out_csr_agent:m0_burstcount -> video_input_2_out_csr_translator:uav_burstcount
	wire          video_input_2_out_csr_agent_rf_source_valid;               // video_input_2_out_csr_agent:rf_source_valid -> video_input_2_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_2_out_csr_agent_rf_source_data;                // video_input_2_out_csr_agent:rf_source_data -> video_input_2_out_csr_agent_rsp_fifo:in_data
	wire          video_input_2_out_csr_agent_rf_source_ready;               // video_input_2_out_csr_agent_rsp_fifo:in_ready -> video_input_2_out_csr_agent:rf_source_ready
	wire          video_input_2_out_csr_agent_rf_source_startofpacket;       // video_input_2_out_csr_agent:rf_source_startofpacket -> video_input_2_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_2_out_csr_agent_rf_source_endofpacket;         // video_input_2_out_csr_agent:rf_source_endofpacket -> video_input_2_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_2_out_csr_agent_rsp_fifo_out_valid;            // video_input_2_out_csr_agent_rsp_fifo:out_valid -> video_input_2_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_2_out_csr_agent_rsp_fifo_out_data;             // video_input_2_out_csr_agent_rsp_fifo:out_data -> video_input_2_out_csr_agent:rf_sink_data
	wire          video_input_2_out_csr_agent_rsp_fifo_out_ready;            // video_input_2_out_csr_agent:rf_sink_ready -> video_input_2_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_2_out_csr_agent_rsp_fifo_out_startofpacket;    // video_input_2_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_2_out_csr_agent:rf_sink_startofpacket
	wire          video_input_2_out_csr_agent_rsp_fifo_out_endofpacket;      // video_input_2_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_2_out_csr_agent:rf_sink_endofpacket
	wire          video_input_2_out_csr_agent_rdata_fifo_src_valid;          // video_input_2_out_csr_agent:rdata_fifo_src_valid -> video_input_2_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_2_out_csr_agent_rdata_fifo_src_data;           // video_input_2_out_csr_agent:rdata_fifo_src_data -> video_input_2_out_csr_agent_rdata_fifo:in_data
	wire          video_input_2_out_csr_agent_rdata_fifo_src_ready;          // video_input_2_out_csr_agent_rdata_fifo:in_ready -> video_input_2_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_3_out_csr_agent_m0_readdata;                   // video_input_3_out_csr_translator:uav_readdata -> video_input_3_out_csr_agent:m0_readdata
	wire          video_input_3_out_csr_agent_m0_waitrequest;                // video_input_3_out_csr_translator:uav_waitrequest -> video_input_3_out_csr_agent:m0_waitrequest
	wire          video_input_3_out_csr_agent_m0_debugaccess;                // video_input_3_out_csr_agent:m0_debugaccess -> video_input_3_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_3_out_csr_agent_m0_address;                    // video_input_3_out_csr_agent:m0_address -> video_input_3_out_csr_translator:uav_address
	wire    [3:0] video_input_3_out_csr_agent_m0_byteenable;                 // video_input_3_out_csr_agent:m0_byteenable -> video_input_3_out_csr_translator:uav_byteenable
	wire          video_input_3_out_csr_agent_m0_read;                       // video_input_3_out_csr_agent:m0_read -> video_input_3_out_csr_translator:uav_read
	wire          video_input_3_out_csr_agent_m0_readdatavalid;              // video_input_3_out_csr_translator:uav_readdatavalid -> video_input_3_out_csr_agent:m0_readdatavalid
	wire          video_input_3_out_csr_agent_m0_lock;                       // video_input_3_out_csr_agent:m0_lock -> video_input_3_out_csr_translator:uav_lock
	wire   [31:0] video_input_3_out_csr_agent_m0_writedata;                  // video_input_3_out_csr_agent:m0_writedata -> video_input_3_out_csr_translator:uav_writedata
	wire          video_input_3_out_csr_agent_m0_write;                      // video_input_3_out_csr_agent:m0_write -> video_input_3_out_csr_translator:uav_write
	wire    [2:0] video_input_3_out_csr_agent_m0_burstcount;                 // video_input_3_out_csr_agent:m0_burstcount -> video_input_3_out_csr_translator:uav_burstcount
	wire          video_input_3_out_csr_agent_rf_source_valid;               // video_input_3_out_csr_agent:rf_source_valid -> video_input_3_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_3_out_csr_agent_rf_source_data;                // video_input_3_out_csr_agent:rf_source_data -> video_input_3_out_csr_agent_rsp_fifo:in_data
	wire          video_input_3_out_csr_agent_rf_source_ready;               // video_input_3_out_csr_agent_rsp_fifo:in_ready -> video_input_3_out_csr_agent:rf_source_ready
	wire          video_input_3_out_csr_agent_rf_source_startofpacket;       // video_input_3_out_csr_agent:rf_source_startofpacket -> video_input_3_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_3_out_csr_agent_rf_source_endofpacket;         // video_input_3_out_csr_agent:rf_source_endofpacket -> video_input_3_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_3_out_csr_agent_rsp_fifo_out_valid;            // video_input_3_out_csr_agent_rsp_fifo:out_valid -> video_input_3_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_3_out_csr_agent_rsp_fifo_out_data;             // video_input_3_out_csr_agent_rsp_fifo:out_data -> video_input_3_out_csr_agent:rf_sink_data
	wire          video_input_3_out_csr_agent_rsp_fifo_out_ready;            // video_input_3_out_csr_agent:rf_sink_ready -> video_input_3_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_3_out_csr_agent_rsp_fifo_out_startofpacket;    // video_input_3_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_3_out_csr_agent:rf_sink_startofpacket
	wire          video_input_3_out_csr_agent_rsp_fifo_out_endofpacket;      // video_input_3_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_3_out_csr_agent:rf_sink_endofpacket
	wire          video_input_3_out_csr_agent_rdata_fifo_src_valid;          // video_input_3_out_csr_agent:rdata_fifo_src_valid -> video_input_3_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_3_out_csr_agent_rdata_fifo_src_data;           // video_input_3_out_csr_agent:rdata_fifo_src_data -> video_input_3_out_csr_agent_rdata_fifo:in_data
	wire          video_input_3_out_csr_agent_rdata_fifo_src_ready;          // video_input_3_out_csr_agent_rdata_fifo:in_ready -> video_input_3_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_4_out_csr_agent_m0_readdata;                   // video_input_4_out_csr_translator:uav_readdata -> video_input_4_out_csr_agent:m0_readdata
	wire          video_input_4_out_csr_agent_m0_waitrequest;                // video_input_4_out_csr_translator:uav_waitrequest -> video_input_4_out_csr_agent:m0_waitrequest
	wire          video_input_4_out_csr_agent_m0_debugaccess;                // video_input_4_out_csr_agent:m0_debugaccess -> video_input_4_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_4_out_csr_agent_m0_address;                    // video_input_4_out_csr_agent:m0_address -> video_input_4_out_csr_translator:uav_address
	wire    [3:0] video_input_4_out_csr_agent_m0_byteenable;                 // video_input_4_out_csr_agent:m0_byteenable -> video_input_4_out_csr_translator:uav_byteenable
	wire          video_input_4_out_csr_agent_m0_read;                       // video_input_4_out_csr_agent:m0_read -> video_input_4_out_csr_translator:uav_read
	wire          video_input_4_out_csr_agent_m0_readdatavalid;              // video_input_4_out_csr_translator:uav_readdatavalid -> video_input_4_out_csr_agent:m0_readdatavalid
	wire          video_input_4_out_csr_agent_m0_lock;                       // video_input_4_out_csr_agent:m0_lock -> video_input_4_out_csr_translator:uav_lock
	wire   [31:0] video_input_4_out_csr_agent_m0_writedata;                  // video_input_4_out_csr_agent:m0_writedata -> video_input_4_out_csr_translator:uav_writedata
	wire          video_input_4_out_csr_agent_m0_write;                      // video_input_4_out_csr_agent:m0_write -> video_input_4_out_csr_translator:uav_write
	wire    [2:0] video_input_4_out_csr_agent_m0_burstcount;                 // video_input_4_out_csr_agent:m0_burstcount -> video_input_4_out_csr_translator:uav_burstcount
	wire          video_input_4_out_csr_agent_rf_source_valid;               // video_input_4_out_csr_agent:rf_source_valid -> video_input_4_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_4_out_csr_agent_rf_source_data;                // video_input_4_out_csr_agent:rf_source_data -> video_input_4_out_csr_agent_rsp_fifo:in_data
	wire          video_input_4_out_csr_agent_rf_source_ready;               // video_input_4_out_csr_agent_rsp_fifo:in_ready -> video_input_4_out_csr_agent:rf_source_ready
	wire          video_input_4_out_csr_agent_rf_source_startofpacket;       // video_input_4_out_csr_agent:rf_source_startofpacket -> video_input_4_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_4_out_csr_agent_rf_source_endofpacket;         // video_input_4_out_csr_agent:rf_source_endofpacket -> video_input_4_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_4_out_csr_agent_rsp_fifo_out_valid;            // video_input_4_out_csr_agent_rsp_fifo:out_valid -> video_input_4_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_4_out_csr_agent_rsp_fifo_out_data;             // video_input_4_out_csr_agent_rsp_fifo:out_data -> video_input_4_out_csr_agent:rf_sink_data
	wire          video_input_4_out_csr_agent_rsp_fifo_out_ready;            // video_input_4_out_csr_agent:rf_sink_ready -> video_input_4_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_4_out_csr_agent_rsp_fifo_out_startofpacket;    // video_input_4_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_4_out_csr_agent:rf_sink_startofpacket
	wire          video_input_4_out_csr_agent_rsp_fifo_out_endofpacket;      // video_input_4_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_4_out_csr_agent:rf_sink_endofpacket
	wire          video_input_4_out_csr_agent_rdata_fifo_src_valid;          // video_input_4_out_csr_agent:rdata_fifo_src_valid -> video_input_4_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_4_out_csr_agent_rdata_fifo_src_data;           // video_input_4_out_csr_agent:rdata_fifo_src_data -> video_input_4_out_csr_agent_rdata_fifo:in_data
	wire          video_input_4_out_csr_agent_rdata_fifo_src_ready;          // video_input_4_out_csr_agent_rdata_fifo:in_ready -> video_input_4_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_5_out_csr_agent_m0_readdata;                   // video_input_5_out_csr_translator:uav_readdata -> video_input_5_out_csr_agent:m0_readdata
	wire          video_input_5_out_csr_agent_m0_waitrequest;                // video_input_5_out_csr_translator:uav_waitrequest -> video_input_5_out_csr_agent:m0_waitrequest
	wire          video_input_5_out_csr_agent_m0_debugaccess;                // video_input_5_out_csr_agent:m0_debugaccess -> video_input_5_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_5_out_csr_agent_m0_address;                    // video_input_5_out_csr_agent:m0_address -> video_input_5_out_csr_translator:uav_address
	wire    [3:0] video_input_5_out_csr_agent_m0_byteenable;                 // video_input_5_out_csr_agent:m0_byteenable -> video_input_5_out_csr_translator:uav_byteenable
	wire          video_input_5_out_csr_agent_m0_read;                       // video_input_5_out_csr_agent:m0_read -> video_input_5_out_csr_translator:uav_read
	wire          video_input_5_out_csr_agent_m0_readdatavalid;              // video_input_5_out_csr_translator:uav_readdatavalid -> video_input_5_out_csr_agent:m0_readdatavalid
	wire          video_input_5_out_csr_agent_m0_lock;                       // video_input_5_out_csr_agent:m0_lock -> video_input_5_out_csr_translator:uav_lock
	wire   [31:0] video_input_5_out_csr_agent_m0_writedata;                  // video_input_5_out_csr_agent:m0_writedata -> video_input_5_out_csr_translator:uav_writedata
	wire          video_input_5_out_csr_agent_m0_write;                      // video_input_5_out_csr_agent:m0_write -> video_input_5_out_csr_translator:uav_write
	wire    [2:0] video_input_5_out_csr_agent_m0_burstcount;                 // video_input_5_out_csr_agent:m0_burstcount -> video_input_5_out_csr_translator:uav_burstcount
	wire          video_input_5_out_csr_agent_rf_source_valid;               // video_input_5_out_csr_agent:rf_source_valid -> video_input_5_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_5_out_csr_agent_rf_source_data;                // video_input_5_out_csr_agent:rf_source_data -> video_input_5_out_csr_agent_rsp_fifo:in_data
	wire          video_input_5_out_csr_agent_rf_source_ready;               // video_input_5_out_csr_agent_rsp_fifo:in_ready -> video_input_5_out_csr_agent:rf_source_ready
	wire          video_input_5_out_csr_agent_rf_source_startofpacket;       // video_input_5_out_csr_agent:rf_source_startofpacket -> video_input_5_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_5_out_csr_agent_rf_source_endofpacket;         // video_input_5_out_csr_agent:rf_source_endofpacket -> video_input_5_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_5_out_csr_agent_rsp_fifo_out_valid;            // video_input_5_out_csr_agent_rsp_fifo:out_valid -> video_input_5_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_5_out_csr_agent_rsp_fifo_out_data;             // video_input_5_out_csr_agent_rsp_fifo:out_data -> video_input_5_out_csr_agent:rf_sink_data
	wire          video_input_5_out_csr_agent_rsp_fifo_out_ready;            // video_input_5_out_csr_agent:rf_sink_ready -> video_input_5_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_5_out_csr_agent_rsp_fifo_out_startofpacket;    // video_input_5_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_5_out_csr_agent:rf_sink_startofpacket
	wire          video_input_5_out_csr_agent_rsp_fifo_out_endofpacket;      // video_input_5_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_5_out_csr_agent:rf_sink_endofpacket
	wire          video_input_5_out_csr_agent_rdata_fifo_src_valid;          // video_input_5_out_csr_agent:rdata_fifo_src_valid -> video_input_5_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_5_out_csr_agent_rdata_fifo_src_data;           // video_input_5_out_csr_agent:rdata_fifo_src_data -> video_input_5_out_csr_agent_rdata_fifo:in_data
	wire          video_input_5_out_csr_agent_rdata_fifo_src_ready;          // video_input_5_out_csr_agent_rdata_fifo:in_ready -> video_input_5_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_6_out_csr_agent_m0_readdata;                   // video_input_6_out_csr_translator:uav_readdata -> video_input_6_out_csr_agent:m0_readdata
	wire          video_input_6_out_csr_agent_m0_waitrequest;                // video_input_6_out_csr_translator:uav_waitrequest -> video_input_6_out_csr_agent:m0_waitrequest
	wire          video_input_6_out_csr_agent_m0_debugaccess;                // video_input_6_out_csr_agent:m0_debugaccess -> video_input_6_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_6_out_csr_agent_m0_address;                    // video_input_6_out_csr_agent:m0_address -> video_input_6_out_csr_translator:uav_address
	wire    [3:0] video_input_6_out_csr_agent_m0_byteenable;                 // video_input_6_out_csr_agent:m0_byteenable -> video_input_6_out_csr_translator:uav_byteenable
	wire          video_input_6_out_csr_agent_m0_read;                       // video_input_6_out_csr_agent:m0_read -> video_input_6_out_csr_translator:uav_read
	wire          video_input_6_out_csr_agent_m0_readdatavalid;              // video_input_6_out_csr_translator:uav_readdatavalid -> video_input_6_out_csr_agent:m0_readdatavalid
	wire          video_input_6_out_csr_agent_m0_lock;                       // video_input_6_out_csr_agent:m0_lock -> video_input_6_out_csr_translator:uav_lock
	wire   [31:0] video_input_6_out_csr_agent_m0_writedata;                  // video_input_6_out_csr_agent:m0_writedata -> video_input_6_out_csr_translator:uav_writedata
	wire          video_input_6_out_csr_agent_m0_write;                      // video_input_6_out_csr_agent:m0_write -> video_input_6_out_csr_translator:uav_write
	wire    [2:0] video_input_6_out_csr_agent_m0_burstcount;                 // video_input_6_out_csr_agent:m0_burstcount -> video_input_6_out_csr_translator:uav_burstcount
	wire          video_input_6_out_csr_agent_rf_source_valid;               // video_input_6_out_csr_agent:rf_source_valid -> video_input_6_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_6_out_csr_agent_rf_source_data;                // video_input_6_out_csr_agent:rf_source_data -> video_input_6_out_csr_agent_rsp_fifo:in_data
	wire          video_input_6_out_csr_agent_rf_source_ready;               // video_input_6_out_csr_agent_rsp_fifo:in_ready -> video_input_6_out_csr_agent:rf_source_ready
	wire          video_input_6_out_csr_agent_rf_source_startofpacket;       // video_input_6_out_csr_agent:rf_source_startofpacket -> video_input_6_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_6_out_csr_agent_rf_source_endofpacket;         // video_input_6_out_csr_agent:rf_source_endofpacket -> video_input_6_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_6_out_csr_agent_rsp_fifo_out_valid;            // video_input_6_out_csr_agent_rsp_fifo:out_valid -> video_input_6_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_6_out_csr_agent_rsp_fifo_out_data;             // video_input_6_out_csr_agent_rsp_fifo:out_data -> video_input_6_out_csr_agent:rf_sink_data
	wire          video_input_6_out_csr_agent_rsp_fifo_out_ready;            // video_input_6_out_csr_agent:rf_sink_ready -> video_input_6_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_6_out_csr_agent_rsp_fifo_out_startofpacket;    // video_input_6_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_6_out_csr_agent:rf_sink_startofpacket
	wire          video_input_6_out_csr_agent_rsp_fifo_out_endofpacket;      // video_input_6_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_6_out_csr_agent:rf_sink_endofpacket
	wire          video_input_6_out_csr_agent_rdata_fifo_src_valid;          // video_input_6_out_csr_agent:rdata_fifo_src_valid -> video_input_6_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_6_out_csr_agent_rdata_fifo_src_data;           // video_input_6_out_csr_agent:rdata_fifo_src_data -> video_input_6_out_csr_agent_rdata_fifo:in_data
	wire          video_input_6_out_csr_agent_rdata_fifo_src_ready;          // video_input_6_out_csr_agent_rdata_fifo:in_ready -> video_input_6_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_7_out_csr_agent_m0_readdata;                   // video_input_7_out_csr_translator:uav_readdata -> video_input_7_out_csr_agent:m0_readdata
	wire          video_input_7_out_csr_agent_m0_waitrequest;                // video_input_7_out_csr_translator:uav_waitrequest -> video_input_7_out_csr_agent:m0_waitrequest
	wire          video_input_7_out_csr_agent_m0_debugaccess;                // video_input_7_out_csr_agent:m0_debugaccess -> video_input_7_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_7_out_csr_agent_m0_address;                    // video_input_7_out_csr_agent:m0_address -> video_input_7_out_csr_translator:uav_address
	wire    [3:0] video_input_7_out_csr_agent_m0_byteenable;                 // video_input_7_out_csr_agent:m0_byteenable -> video_input_7_out_csr_translator:uav_byteenable
	wire          video_input_7_out_csr_agent_m0_read;                       // video_input_7_out_csr_agent:m0_read -> video_input_7_out_csr_translator:uav_read
	wire          video_input_7_out_csr_agent_m0_readdatavalid;              // video_input_7_out_csr_translator:uav_readdatavalid -> video_input_7_out_csr_agent:m0_readdatavalid
	wire          video_input_7_out_csr_agent_m0_lock;                       // video_input_7_out_csr_agent:m0_lock -> video_input_7_out_csr_translator:uav_lock
	wire   [31:0] video_input_7_out_csr_agent_m0_writedata;                  // video_input_7_out_csr_agent:m0_writedata -> video_input_7_out_csr_translator:uav_writedata
	wire          video_input_7_out_csr_agent_m0_write;                      // video_input_7_out_csr_agent:m0_write -> video_input_7_out_csr_translator:uav_write
	wire    [2:0] video_input_7_out_csr_agent_m0_burstcount;                 // video_input_7_out_csr_agent:m0_burstcount -> video_input_7_out_csr_translator:uav_burstcount
	wire          video_input_7_out_csr_agent_rf_source_valid;               // video_input_7_out_csr_agent:rf_source_valid -> video_input_7_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_7_out_csr_agent_rf_source_data;                // video_input_7_out_csr_agent:rf_source_data -> video_input_7_out_csr_agent_rsp_fifo:in_data
	wire          video_input_7_out_csr_agent_rf_source_ready;               // video_input_7_out_csr_agent_rsp_fifo:in_ready -> video_input_7_out_csr_agent:rf_source_ready
	wire          video_input_7_out_csr_agent_rf_source_startofpacket;       // video_input_7_out_csr_agent:rf_source_startofpacket -> video_input_7_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_7_out_csr_agent_rf_source_endofpacket;         // video_input_7_out_csr_agent:rf_source_endofpacket -> video_input_7_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_7_out_csr_agent_rsp_fifo_out_valid;            // video_input_7_out_csr_agent_rsp_fifo:out_valid -> video_input_7_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_7_out_csr_agent_rsp_fifo_out_data;             // video_input_7_out_csr_agent_rsp_fifo:out_data -> video_input_7_out_csr_agent:rf_sink_data
	wire          video_input_7_out_csr_agent_rsp_fifo_out_ready;            // video_input_7_out_csr_agent:rf_sink_ready -> video_input_7_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_7_out_csr_agent_rsp_fifo_out_startofpacket;    // video_input_7_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_7_out_csr_agent:rf_sink_startofpacket
	wire          video_input_7_out_csr_agent_rsp_fifo_out_endofpacket;      // video_input_7_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_7_out_csr_agent:rf_sink_endofpacket
	wire          video_input_7_out_csr_agent_rdata_fifo_src_valid;          // video_input_7_out_csr_agent:rdata_fifo_src_valid -> video_input_7_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_7_out_csr_agent_rdata_fifo_src_data;           // video_input_7_out_csr_agent:rdata_fifo_src_data -> video_input_7_out_csr_agent_rdata_fifo:in_data
	wire          video_input_7_out_csr_agent_rdata_fifo_src_ready;          // video_input_7_out_csr_agent_rdata_fifo:in_ready -> video_input_7_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_8_out_csr_agent_m0_readdata;                   // video_input_8_out_csr_translator:uav_readdata -> video_input_8_out_csr_agent:m0_readdata
	wire          video_input_8_out_csr_agent_m0_waitrequest;                // video_input_8_out_csr_translator:uav_waitrequest -> video_input_8_out_csr_agent:m0_waitrequest
	wire          video_input_8_out_csr_agent_m0_debugaccess;                // video_input_8_out_csr_agent:m0_debugaccess -> video_input_8_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_8_out_csr_agent_m0_address;                    // video_input_8_out_csr_agent:m0_address -> video_input_8_out_csr_translator:uav_address
	wire    [3:0] video_input_8_out_csr_agent_m0_byteenable;                 // video_input_8_out_csr_agent:m0_byteenable -> video_input_8_out_csr_translator:uav_byteenable
	wire          video_input_8_out_csr_agent_m0_read;                       // video_input_8_out_csr_agent:m0_read -> video_input_8_out_csr_translator:uav_read
	wire          video_input_8_out_csr_agent_m0_readdatavalid;              // video_input_8_out_csr_translator:uav_readdatavalid -> video_input_8_out_csr_agent:m0_readdatavalid
	wire          video_input_8_out_csr_agent_m0_lock;                       // video_input_8_out_csr_agent:m0_lock -> video_input_8_out_csr_translator:uav_lock
	wire   [31:0] video_input_8_out_csr_agent_m0_writedata;                  // video_input_8_out_csr_agent:m0_writedata -> video_input_8_out_csr_translator:uav_writedata
	wire          video_input_8_out_csr_agent_m0_write;                      // video_input_8_out_csr_agent:m0_write -> video_input_8_out_csr_translator:uav_write
	wire    [2:0] video_input_8_out_csr_agent_m0_burstcount;                 // video_input_8_out_csr_agent:m0_burstcount -> video_input_8_out_csr_translator:uav_burstcount
	wire          video_input_8_out_csr_agent_rf_source_valid;               // video_input_8_out_csr_agent:rf_source_valid -> video_input_8_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_8_out_csr_agent_rf_source_data;                // video_input_8_out_csr_agent:rf_source_data -> video_input_8_out_csr_agent_rsp_fifo:in_data
	wire          video_input_8_out_csr_agent_rf_source_ready;               // video_input_8_out_csr_agent_rsp_fifo:in_ready -> video_input_8_out_csr_agent:rf_source_ready
	wire          video_input_8_out_csr_agent_rf_source_startofpacket;       // video_input_8_out_csr_agent:rf_source_startofpacket -> video_input_8_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_8_out_csr_agent_rf_source_endofpacket;         // video_input_8_out_csr_agent:rf_source_endofpacket -> video_input_8_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_8_out_csr_agent_rsp_fifo_out_valid;            // video_input_8_out_csr_agent_rsp_fifo:out_valid -> video_input_8_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_8_out_csr_agent_rsp_fifo_out_data;             // video_input_8_out_csr_agent_rsp_fifo:out_data -> video_input_8_out_csr_agent:rf_sink_data
	wire          video_input_8_out_csr_agent_rsp_fifo_out_ready;            // video_input_8_out_csr_agent:rf_sink_ready -> video_input_8_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_8_out_csr_agent_rsp_fifo_out_startofpacket;    // video_input_8_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_8_out_csr_agent:rf_sink_startofpacket
	wire          video_input_8_out_csr_agent_rsp_fifo_out_endofpacket;      // video_input_8_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_8_out_csr_agent:rf_sink_endofpacket
	wire          video_input_8_out_csr_agent_rdata_fifo_src_valid;          // video_input_8_out_csr_agent:rdata_fifo_src_valid -> video_input_8_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_8_out_csr_agent_rdata_fifo_src_data;           // video_input_8_out_csr_agent:rdata_fifo_src_data -> video_input_8_out_csr_agent_rdata_fifo:in_data
	wire          video_input_8_out_csr_agent_rdata_fifo_src_ready;          // video_input_8_out_csr_agent_rdata_fifo:in_ready -> video_input_8_out_csr_agent:rdata_fifo_src_ready
	wire   [31:0] video_input_9_out_csr_agent_m0_readdata;                   // video_input_9_out_csr_translator:uav_readdata -> video_input_9_out_csr_agent:m0_readdata
	wire          video_input_9_out_csr_agent_m0_waitrequest;                // video_input_9_out_csr_translator:uav_waitrequest -> video_input_9_out_csr_agent:m0_waitrequest
	wire          video_input_9_out_csr_agent_m0_debugaccess;                // video_input_9_out_csr_agent:m0_debugaccess -> video_input_9_out_csr_translator:uav_debugaccess
	wire   [29:0] video_input_9_out_csr_agent_m0_address;                    // video_input_9_out_csr_agent:m0_address -> video_input_9_out_csr_translator:uav_address
	wire    [3:0] video_input_9_out_csr_agent_m0_byteenable;                 // video_input_9_out_csr_agent:m0_byteenable -> video_input_9_out_csr_translator:uav_byteenable
	wire          video_input_9_out_csr_agent_m0_read;                       // video_input_9_out_csr_agent:m0_read -> video_input_9_out_csr_translator:uav_read
	wire          video_input_9_out_csr_agent_m0_readdatavalid;              // video_input_9_out_csr_translator:uav_readdatavalid -> video_input_9_out_csr_agent:m0_readdatavalid
	wire          video_input_9_out_csr_agent_m0_lock;                       // video_input_9_out_csr_agent:m0_lock -> video_input_9_out_csr_translator:uav_lock
	wire   [31:0] video_input_9_out_csr_agent_m0_writedata;                  // video_input_9_out_csr_agent:m0_writedata -> video_input_9_out_csr_translator:uav_writedata
	wire          video_input_9_out_csr_agent_m0_write;                      // video_input_9_out_csr_agent:m0_write -> video_input_9_out_csr_translator:uav_write
	wire    [2:0] video_input_9_out_csr_agent_m0_burstcount;                 // video_input_9_out_csr_agent:m0_burstcount -> video_input_9_out_csr_translator:uav_burstcount
	wire          video_input_9_out_csr_agent_rf_source_valid;               // video_input_9_out_csr_agent:rf_source_valid -> video_input_9_out_csr_agent_rsp_fifo:in_valid
	wire  [131:0] video_input_9_out_csr_agent_rf_source_data;                // video_input_9_out_csr_agent:rf_source_data -> video_input_9_out_csr_agent_rsp_fifo:in_data
	wire          video_input_9_out_csr_agent_rf_source_ready;               // video_input_9_out_csr_agent_rsp_fifo:in_ready -> video_input_9_out_csr_agent:rf_source_ready
	wire          video_input_9_out_csr_agent_rf_source_startofpacket;       // video_input_9_out_csr_agent:rf_source_startofpacket -> video_input_9_out_csr_agent_rsp_fifo:in_startofpacket
	wire          video_input_9_out_csr_agent_rf_source_endofpacket;         // video_input_9_out_csr_agent:rf_source_endofpacket -> video_input_9_out_csr_agent_rsp_fifo:in_endofpacket
	wire          video_input_9_out_csr_agent_rsp_fifo_out_valid;            // video_input_9_out_csr_agent_rsp_fifo:out_valid -> video_input_9_out_csr_agent:rf_sink_valid
	wire  [131:0] video_input_9_out_csr_agent_rsp_fifo_out_data;             // video_input_9_out_csr_agent_rsp_fifo:out_data -> video_input_9_out_csr_agent:rf_sink_data
	wire          video_input_9_out_csr_agent_rsp_fifo_out_ready;            // video_input_9_out_csr_agent:rf_sink_ready -> video_input_9_out_csr_agent_rsp_fifo:out_ready
	wire          video_input_9_out_csr_agent_rsp_fifo_out_startofpacket;    // video_input_9_out_csr_agent_rsp_fifo:out_startofpacket -> video_input_9_out_csr_agent:rf_sink_startofpacket
	wire          video_input_9_out_csr_agent_rsp_fifo_out_endofpacket;      // video_input_9_out_csr_agent_rsp_fifo:out_endofpacket -> video_input_9_out_csr_agent:rf_sink_endofpacket
	wire          video_input_9_out_csr_agent_rdata_fifo_src_valid;          // video_input_9_out_csr_agent:rdata_fifo_src_valid -> video_input_9_out_csr_agent_rdata_fifo:in_valid
	wire   [33:0] video_input_9_out_csr_agent_rdata_fifo_src_data;           // video_input_9_out_csr_agent:rdata_fifo_src_data -> video_input_9_out_csr_agent_rdata_fifo:in_data
	wire          video_input_9_out_csr_agent_rdata_fifo_src_ready;          // video_input_9_out_csr_agent_rdata_fifo:in_ready -> video_input_9_out_csr_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                 // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [166:0] hps_0_h2f_axi_master_agent_write_cp_data;                  // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                 // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;         // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;           // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                  // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [166:0] hps_0_h2f_axi_master_agent_read_cp_data;                   // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                  // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;          // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;            // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          video_input_out_agent_rp_valid;                            // video_input_out_agent:rp_valid -> router_002:sink_valid
	wire  [130:0] video_input_out_agent_rp_data;                             // video_input_out_agent:rp_data -> router_002:sink_data
	wire          video_input_out_agent_rp_ready;                            // router_002:sink_ready -> video_input_out_agent:rp_ready
	wire          video_input_out_agent_rp_startofpacket;                    // video_input_out_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          video_input_out_agent_rp_endofpacket;                      // video_input_out_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          video_input_0_out_agent_rp_valid;                          // video_input_0_out_agent:rp_valid -> router_003:sink_valid
	wire  [130:0] video_input_0_out_agent_rp_data;                           // video_input_0_out_agent:rp_data -> router_003:sink_data
	wire          video_input_0_out_agent_rp_ready;                          // router_003:sink_ready -> video_input_0_out_agent:rp_ready
	wire          video_input_0_out_agent_rp_startofpacket;                  // video_input_0_out_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          video_input_0_out_agent_rp_endofpacket;                    // video_input_0_out_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          video_input_1_out_agent_rp_valid;                          // video_input_1_out_agent:rp_valid -> router_004:sink_valid
	wire  [130:0] video_input_1_out_agent_rp_data;                           // video_input_1_out_agent:rp_data -> router_004:sink_data
	wire          video_input_1_out_agent_rp_ready;                          // router_004:sink_ready -> video_input_1_out_agent:rp_ready
	wire          video_input_1_out_agent_rp_startofpacket;                  // video_input_1_out_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          video_input_1_out_agent_rp_endofpacket;                    // video_input_1_out_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          video_input_2_out_agent_rp_valid;                          // video_input_2_out_agent:rp_valid -> router_005:sink_valid
	wire  [130:0] video_input_2_out_agent_rp_data;                           // video_input_2_out_agent:rp_data -> router_005:sink_data
	wire          video_input_2_out_agent_rp_ready;                          // router_005:sink_ready -> video_input_2_out_agent:rp_ready
	wire          video_input_2_out_agent_rp_startofpacket;                  // video_input_2_out_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          video_input_2_out_agent_rp_endofpacket;                    // video_input_2_out_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          video_input_3_out_agent_rp_valid;                          // video_input_3_out_agent:rp_valid -> router_006:sink_valid
	wire  [130:0] video_input_3_out_agent_rp_data;                           // video_input_3_out_agent:rp_data -> router_006:sink_data
	wire          video_input_3_out_agent_rp_ready;                          // router_006:sink_ready -> video_input_3_out_agent:rp_ready
	wire          video_input_3_out_agent_rp_startofpacket;                  // video_input_3_out_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          video_input_3_out_agent_rp_endofpacket;                    // video_input_3_out_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          video_input_4_out_agent_rp_valid;                          // video_input_4_out_agent:rp_valid -> router_007:sink_valid
	wire  [130:0] video_input_4_out_agent_rp_data;                           // video_input_4_out_agent:rp_data -> router_007:sink_data
	wire          video_input_4_out_agent_rp_ready;                          // router_007:sink_ready -> video_input_4_out_agent:rp_ready
	wire          video_input_4_out_agent_rp_startofpacket;                  // video_input_4_out_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          video_input_4_out_agent_rp_endofpacket;                    // video_input_4_out_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          video_input_5_out_agent_rp_valid;                          // video_input_5_out_agent:rp_valid -> router_008:sink_valid
	wire  [130:0] video_input_5_out_agent_rp_data;                           // video_input_5_out_agent:rp_data -> router_008:sink_data
	wire          video_input_5_out_agent_rp_ready;                          // router_008:sink_ready -> video_input_5_out_agent:rp_ready
	wire          video_input_5_out_agent_rp_startofpacket;                  // video_input_5_out_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          video_input_5_out_agent_rp_endofpacket;                    // video_input_5_out_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          video_input_6_out_agent_rp_valid;                          // video_input_6_out_agent:rp_valid -> router_009:sink_valid
	wire  [130:0] video_input_6_out_agent_rp_data;                           // video_input_6_out_agent:rp_data -> router_009:sink_data
	wire          video_input_6_out_agent_rp_ready;                          // router_009:sink_ready -> video_input_6_out_agent:rp_ready
	wire          video_input_6_out_agent_rp_startofpacket;                  // video_input_6_out_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          video_input_6_out_agent_rp_endofpacket;                    // video_input_6_out_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          video_input_7_out_agent_rp_valid;                          // video_input_7_out_agent:rp_valid -> router_010:sink_valid
	wire  [130:0] video_input_7_out_agent_rp_data;                           // video_input_7_out_agent:rp_data -> router_010:sink_data
	wire          video_input_7_out_agent_rp_ready;                          // router_010:sink_ready -> video_input_7_out_agent:rp_ready
	wire          video_input_7_out_agent_rp_startofpacket;                  // video_input_7_out_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          video_input_7_out_agent_rp_endofpacket;                    // video_input_7_out_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          video_input_8_out_agent_rp_valid;                          // video_input_8_out_agent:rp_valid -> router_011:sink_valid
	wire  [130:0] video_input_8_out_agent_rp_data;                           // video_input_8_out_agent:rp_data -> router_011:sink_data
	wire          video_input_8_out_agent_rp_ready;                          // router_011:sink_ready -> video_input_8_out_agent:rp_ready
	wire          video_input_8_out_agent_rp_startofpacket;                  // video_input_8_out_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          video_input_8_out_agent_rp_endofpacket;                    // video_input_8_out_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          video_input_9_out_agent_rp_valid;                          // video_input_9_out_agent:rp_valid -> router_012:sink_valid
	wire  [130:0] video_input_9_out_agent_rp_data;                           // video_input_9_out_agent:rp_data -> router_012:sink_data
	wire          video_input_9_out_agent_rp_ready;                          // router_012:sink_ready -> video_input_9_out_agent:rp_ready
	wire          video_input_9_out_agent_rp_startofpacket;                  // video_input_9_out_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          video_input_9_out_agent_rp_endofpacket;                    // video_input_9_out_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          video_input_out_csr_agent_rp_valid;                        // video_input_out_csr_agent:rp_valid -> router_013:sink_valid
	wire  [130:0] video_input_out_csr_agent_rp_data;                         // video_input_out_csr_agent:rp_data -> router_013:sink_data
	wire          video_input_out_csr_agent_rp_ready;                        // router_013:sink_ready -> video_input_out_csr_agent:rp_ready
	wire          video_input_out_csr_agent_rp_startofpacket;                // video_input_out_csr_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          video_input_out_csr_agent_rp_endofpacket;                  // video_input_out_csr_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          video_input_0_out_csr_agent_rp_valid;                      // video_input_0_out_csr_agent:rp_valid -> router_014:sink_valid
	wire  [130:0] video_input_0_out_csr_agent_rp_data;                       // video_input_0_out_csr_agent:rp_data -> router_014:sink_data
	wire          video_input_0_out_csr_agent_rp_ready;                      // router_014:sink_ready -> video_input_0_out_csr_agent:rp_ready
	wire          video_input_0_out_csr_agent_rp_startofpacket;              // video_input_0_out_csr_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          video_input_0_out_csr_agent_rp_endofpacket;                // video_input_0_out_csr_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          video_input_1_out_csr_agent_rp_valid;                      // video_input_1_out_csr_agent:rp_valid -> router_015:sink_valid
	wire  [130:0] video_input_1_out_csr_agent_rp_data;                       // video_input_1_out_csr_agent:rp_data -> router_015:sink_data
	wire          video_input_1_out_csr_agent_rp_ready;                      // router_015:sink_ready -> video_input_1_out_csr_agent:rp_ready
	wire          video_input_1_out_csr_agent_rp_startofpacket;              // video_input_1_out_csr_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          video_input_1_out_csr_agent_rp_endofpacket;                // video_input_1_out_csr_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          video_input_2_out_csr_agent_rp_valid;                      // video_input_2_out_csr_agent:rp_valid -> router_016:sink_valid
	wire  [130:0] video_input_2_out_csr_agent_rp_data;                       // video_input_2_out_csr_agent:rp_data -> router_016:sink_data
	wire          video_input_2_out_csr_agent_rp_ready;                      // router_016:sink_ready -> video_input_2_out_csr_agent:rp_ready
	wire          video_input_2_out_csr_agent_rp_startofpacket;              // video_input_2_out_csr_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          video_input_2_out_csr_agent_rp_endofpacket;                // video_input_2_out_csr_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          video_input_3_out_csr_agent_rp_valid;                      // video_input_3_out_csr_agent:rp_valid -> router_017:sink_valid
	wire  [130:0] video_input_3_out_csr_agent_rp_data;                       // video_input_3_out_csr_agent:rp_data -> router_017:sink_data
	wire          video_input_3_out_csr_agent_rp_ready;                      // router_017:sink_ready -> video_input_3_out_csr_agent:rp_ready
	wire          video_input_3_out_csr_agent_rp_startofpacket;              // video_input_3_out_csr_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          video_input_3_out_csr_agent_rp_endofpacket;                // video_input_3_out_csr_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          video_input_4_out_csr_agent_rp_valid;                      // video_input_4_out_csr_agent:rp_valid -> router_018:sink_valid
	wire  [130:0] video_input_4_out_csr_agent_rp_data;                       // video_input_4_out_csr_agent:rp_data -> router_018:sink_data
	wire          video_input_4_out_csr_agent_rp_ready;                      // router_018:sink_ready -> video_input_4_out_csr_agent:rp_ready
	wire          video_input_4_out_csr_agent_rp_startofpacket;              // video_input_4_out_csr_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          video_input_4_out_csr_agent_rp_endofpacket;                // video_input_4_out_csr_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          video_input_5_out_csr_agent_rp_valid;                      // video_input_5_out_csr_agent:rp_valid -> router_019:sink_valid
	wire  [130:0] video_input_5_out_csr_agent_rp_data;                       // video_input_5_out_csr_agent:rp_data -> router_019:sink_data
	wire          video_input_5_out_csr_agent_rp_ready;                      // router_019:sink_ready -> video_input_5_out_csr_agent:rp_ready
	wire          video_input_5_out_csr_agent_rp_startofpacket;              // video_input_5_out_csr_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          video_input_5_out_csr_agent_rp_endofpacket;                // video_input_5_out_csr_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          video_input_6_out_csr_agent_rp_valid;                      // video_input_6_out_csr_agent:rp_valid -> router_020:sink_valid
	wire  [130:0] video_input_6_out_csr_agent_rp_data;                       // video_input_6_out_csr_agent:rp_data -> router_020:sink_data
	wire          video_input_6_out_csr_agent_rp_ready;                      // router_020:sink_ready -> video_input_6_out_csr_agent:rp_ready
	wire          video_input_6_out_csr_agent_rp_startofpacket;              // video_input_6_out_csr_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          video_input_6_out_csr_agent_rp_endofpacket;                // video_input_6_out_csr_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          video_input_7_out_csr_agent_rp_valid;                      // video_input_7_out_csr_agent:rp_valid -> router_021:sink_valid
	wire  [130:0] video_input_7_out_csr_agent_rp_data;                       // video_input_7_out_csr_agent:rp_data -> router_021:sink_data
	wire          video_input_7_out_csr_agent_rp_ready;                      // router_021:sink_ready -> video_input_7_out_csr_agent:rp_ready
	wire          video_input_7_out_csr_agent_rp_startofpacket;              // video_input_7_out_csr_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          video_input_7_out_csr_agent_rp_endofpacket;                // video_input_7_out_csr_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          video_input_8_out_csr_agent_rp_valid;                      // video_input_8_out_csr_agent:rp_valid -> router_022:sink_valid
	wire  [130:0] video_input_8_out_csr_agent_rp_data;                       // video_input_8_out_csr_agent:rp_data -> router_022:sink_data
	wire          video_input_8_out_csr_agent_rp_ready;                      // router_022:sink_ready -> video_input_8_out_csr_agent:rp_ready
	wire          video_input_8_out_csr_agent_rp_startofpacket;              // video_input_8_out_csr_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          video_input_8_out_csr_agent_rp_endofpacket;                // video_input_8_out_csr_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          video_input_9_out_csr_agent_rp_valid;                      // video_input_9_out_csr_agent:rp_valid -> router_023:sink_valid
	wire  [130:0] video_input_9_out_csr_agent_rp_data;                       // video_input_9_out_csr_agent:rp_data -> router_023:sink_data
	wire          video_input_9_out_csr_agent_rp_ready;                      // router_023:sink_ready -> video_input_9_out_csr_agent:rp_ready
	wire          video_input_9_out_csr_agent_rp_startofpacket;              // video_input_9_out_csr_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          video_input_9_out_csr_agent_rp_endofpacket;                // video_input_9_out_csr_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_src_valid;                                          // router:src_valid -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [166:0] router_src_data;                                           // router:src_data -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                          // hps_0_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [21:0] router_src_channel;                                        // router:src_channel -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                  // router:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                    // router:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [166:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_data;              // hps_0_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_ready;             // cmd_demux:sink_ready -> hps_0_h2f_axi_master_wr_limiter:cmd_src_ready
	wire   [21:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_channel;           // hps_0_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket;     // hps_0_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket;       // hps_0_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                         // rsp_mux:src_valid -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [166:0] rsp_mux_src_data;                                          // rsp_mux:src_data -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                         // hps_0_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [21:0] rsp_mux_src_channel;                                       // rsp_mux:src_channel -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                 // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                   // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_valid;             // hps_0_h2f_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [166:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_data;              // hps_0_h2f_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_ready;             // hps_0_h2f_axi_master_agent:write_rp_ready -> hps_0_h2f_axi_master_wr_limiter:rsp_src_ready
	wire   [21:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_channel;           // hps_0_h2f_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket;     // hps_0_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket;       // hps_0_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                      // router_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [166:0] router_001_src_data;                                       // router_001:src_data -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                      // hps_0_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [21:0] router_001_src_channel;                                    // router_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                              // router_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                // router_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [166:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_data;              // hps_0_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_ready;             // cmd_demux_001:sink_ready -> hps_0_h2f_axi_master_rd_limiter:cmd_src_ready
	wire   [21:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_channel;           // hps_0_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket;     // hps_0_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket;       // hps_0_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                     // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [166:0] rsp_mux_001_src_data;                                      // rsp_mux_001:src_data -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                     // hps_0_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [21:0] rsp_mux_001_src_channel;                                   // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                             // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                               // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_valid;             // hps_0_h2f_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [166:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_data;              // hps_0_h2f_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_ready;             // hps_0_h2f_axi_master_agent:read_rp_ready -> hps_0_h2f_axi_master_rd_limiter:rsp_src_ready
	wire   [21:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_channel;           // hps_0_h2f_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket;     // hps_0_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket;       // hps_0_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          video_input_out_burst_adapter_source0_valid;               // video_input_out_burst_adapter:source0_valid -> video_input_out_agent:cp_valid
	wire  [130:0] video_input_out_burst_adapter_source0_data;                // video_input_out_burst_adapter:source0_data -> video_input_out_agent:cp_data
	wire          video_input_out_burst_adapter_source0_ready;               // video_input_out_agent:cp_ready -> video_input_out_burst_adapter:source0_ready
	wire   [21:0] video_input_out_burst_adapter_source0_channel;             // video_input_out_burst_adapter:source0_channel -> video_input_out_agent:cp_channel
	wire          video_input_out_burst_adapter_source0_startofpacket;       // video_input_out_burst_adapter:source0_startofpacket -> video_input_out_agent:cp_startofpacket
	wire          video_input_out_burst_adapter_source0_endofpacket;         // video_input_out_burst_adapter:source0_endofpacket -> video_input_out_agent:cp_endofpacket
	wire          video_input_0_out_burst_adapter_source0_valid;             // video_input_0_out_burst_adapter:source0_valid -> video_input_0_out_agent:cp_valid
	wire  [130:0] video_input_0_out_burst_adapter_source0_data;              // video_input_0_out_burst_adapter:source0_data -> video_input_0_out_agent:cp_data
	wire          video_input_0_out_burst_adapter_source0_ready;             // video_input_0_out_agent:cp_ready -> video_input_0_out_burst_adapter:source0_ready
	wire   [21:0] video_input_0_out_burst_adapter_source0_channel;           // video_input_0_out_burst_adapter:source0_channel -> video_input_0_out_agent:cp_channel
	wire          video_input_0_out_burst_adapter_source0_startofpacket;     // video_input_0_out_burst_adapter:source0_startofpacket -> video_input_0_out_agent:cp_startofpacket
	wire          video_input_0_out_burst_adapter_source0_endofpacket;       // video_input_0_out_burst_adapter:source0_endofpacket -> video_input_0_out_agent:cp_endofpacket
	wire          video_input_1_out_burst_adapter_source0_valid;             // video_input_1_out_burst_adapter:source0_valid -> video_input_1_out_agent:cp_valid
	wire  [130:0] video_input_1_out_burst_adapter_source0_data;              // video_input_1_out_burst_adapter:source0_data -> video_input_1_out_agent:cp_data
	wire          video_input_1_out_burst_adapter_source0_ready;             // video_input_1_out_agent:cp_ready -> video_input_1_out_burst_adapter:source0_ready
	wire   [21:0] video_input_1_out_burst_adapter_source0_channel;           // video_input_1_out_burst_adapter:source0_channel -> video_input_1_out_agent:cp_channel
	wire          video_input_1_out_burst_adapter_source0_startofpacket;     // video_input_1_out_burst_adapter:source0_startofpacket -> video_input_1_out_agent:cp_startofpacket
	wire          video_input_1_out_burst_adapter_source0_endofpacket;       // video_input_1_out_burst_adapter:source0_endofpacket -> video_input_1_out_agent:cp_endofpacket
	wire          video_input_2_out_burst_adapter_source0_valid;             // video_input_2_out_burst_adapter:source0_valid -> video_input_2_out_agent:cp_valid
	wire  [130:0] video_input_2_out_burst_adapter_source0_data;              // video_input_2_out_burst_adapter:source0_data -> video_input_2_out_agent:cp_data
	wire          video_input_2_out_burst_adapter_source0_ready;             // video_input_2_out_agent:cp_ready -> video_input_2_out_burst_adapter:source0_ready
	wire   [21:0] video_input_2_out_burst_adapter_source0_channel;           // video_input_2_out_burst_adapter:source0_channel -> video_input_2_out_agent:cp_channel
	wire          video_input_2_out_burst_adapter_source0_startofpacket;     // video_input_2_out_burst_adapter:source0_startofpacket -> video_input_2_out_agent:cp_startofpacket
	wire          video_input_2_out_burst_adapter_source0_endofpacket;       // video_input_2_out_burst_adapter:source0_endofpacket -> video_input_2_out_agent:cp_endofpacket
	wire          video_input_3_out_burst_adapter_source0_valid;             // video_input_3_out_burst_adapter:source0_valid -> video_input_3_out_agent:cp_valid
	wire  [130:0] video_input_3_out_burst_adapter_source0_data;              // video_input_3_out_burst_adapter:source0_data -> video_input_3_out_agent:cp_data
	wire          video_input_3_out_burst_adapter_source0_ready;             // video_input_3_out_agent:cp_ready -> video_input_3_out_burst_adapter:source0_ready
	wire   [21:0] video_input_3_out_burst_adapter_source0_channel;           // video_input_3_out_burst_adapter:source0_channel -> video_input_3_out_agent:cp_channel
	wire          video_input_3_out_burst_adapter_source0_startofpacket;     // video_input_3_out_burst_adapter:source0_startofpacket -> video_input_3_out_agent:cp_startofpacket
	wire          video_input_3_out_burst_adapter_source0_endofpacket;       // video_input_3_out_burst_adapter:source0_endofpacket -> video_input_3_out_agent:cp_endofpacket
	wire          video_input_4_out_burst_adapter_source0_valid;             // video_input_4_out_burst_adapter:source0_valid -> video_input_4_out_agent:cp_valid
	wire  [130:0] video_input_4_out_burst_adapter_source0_data;              // video_input_4_out_burst_adapter:source0_data -> video_input_4_out_agent:cp_data
	wire          video_input_4_out_burst_adapter_source0_ready;             // video_input_4_out_agent:cp_ready -> video_input_4_out_burst_adapter:source0_ready
	wire   [21:0] video_input_4_out_burst_adapter_source0_channel;           // video_input_4_out_burst_adapter:source0_channel -> video_input_4_out_agent:cp_channel
	wire          video_input_4_out_burst_adapter_source0_startofpacket;     // video_input_4_out_burst_adapter:source0_startofpacket -> video_input_4_out_agent:cp_startofpacket
	wire          video_input_4_out_burst_adapter_source0_endofpacket;       // video_input_4_out_burst_adapter:source0_endofpacket -> video_input_4_out_agent:cp_endofpacket
	wire          video_input_5_out_burst_adapter_source0_valid;             // video_input_5_out_burst_adapter:source0_valid -> video_input_5_out_agent:cp_valid
	wire  [130:0] video_input_5_out_burst_adapter_source0_data;              // video_input_5_out_burst_adapter:source0_data -> video_input_5_out_agent:cp_data
	wire          video_input_5_out_burst_adapter_source0_ready;             // video_input_5_out_agent:cp_ready -> video_input_5_out_burst_adapter:source0_ready
	wire   [21:0] video_input_5_out_burst_adapter_source0_channel;           // video_input_5_out_burst_adapter:source0_channel -> video_input_5_out_agent:cp_channel
	wire          video_input_5_out_burst_adapter_source0_startofpacket;     // video_input_5_out_burst_adapter:source0_startofpacket -> video_input_5_out_agent:cp_startofpacket
	wire          video_input_5_out_burst_adapter_source0_endofpacket;       // video_input_5_out_burst_adapter:source0_endofpacket -> video_input_5_out_agent:cp_endofpacket
	wire          video_input_6_out_burst_adapter_source0_valid;             // video_input_6_out_burst_adapter:source0_valid -> video_input_6_out_agent:cp_valid
	wire  [130:0] video_input_6_out_burst_adapter_source0_data;              // video_input_6_out_burst_adapter:source0_data -> video_input_6_out_agent:cp_data
	wire          video_input_6_out_burst_adapter_source0_ready;             // video_input_6_out_agent:cp_ready -> video_input_6_out_burst_adapter:source0_ready
	wire   [21:0] video_input_6_out_burst_adapter_source0_channel;           // video_input_6_out_burst_adapter:source0_channel -> video_input_6_out_agent:cp_channel
	wire          video_input_6_out_burst_adapter_source0_startofpacket;     // video_input_6_out_burst_adapter:source0_startofpacket -> video_input_6_out_agent:cp_startofpacket
	wire          video_input_6_out_burst_adapter_source0_endofpacket;       // video_input_6_out_burst_adapter:source0_endofpacket -> video_input_6_out_agent:cp_endofpacket
	wire          video_input_7_out_burst_adapter_source0_valid;             // video_input_7_out_burst_adapter:source0_valid -> video_input_7_out_agent:cp_valid
	wire  [130:0] video_input_7_out_burst_adapter_source0_data;              // video_input_7_out_burst_adapter:source0_data -> video_input_7_out_agent:cp_data
	wire          video_input_7_out_burst_adapter_source0_ready;             // video_input_7_out_agent:cp_ready -> video_input_7_out_burst_adapter:source0_ready
	wire   [21:0] video_input_7_out_burst_adapter_source0_channel;           // video_input_7_out_burst_adapter:source0_channel -> video_input_7_out_agent:cp_channel
	wire          video_input_7_out_burst_adapter_source0_startofpacket;     // video_input_7_out_burst_adapter:source0_startofpacket -> video_input_7_out_agent:cp_startofpacket
	wire          video_input_7_out_burst_adapter_source0_endofpacket;       // video_input_7_out_burst_adapter:source0_endofpacket -> video_input_7_out_agent:cp_endofpacket
	wire          video_input_8_out_burst_adapter_source0_valid;             // video_input_8_out_burst_adapter:source0_valid -> video_input_8_out_agent:cp_valid
	wire  [130:0] video_input_8_out_burst_adapter_source0_data;              // video_input_8_out_burst_adapter:source0_data -> video_input_8_out_agent:cp_data
	wire          video_input_8_out_burst_adapter_source0_ready;             // video_input_8_out_agent:cp_ready -> video_input_8_out_burst_adapter:source0_ready
	wire   [21:0] video_input_8_out_burst_adapter_source0_channel;           // video_input_8_out_burst_adapter:source0_channel -> video_input_8_out_agent:cp_channel
	wire          video_input_8_out_burst_adapter_source0_startofpacket;     // video_input_8_out_burst_adapter:source0_startofpacket -> video_input_8_out_agent:cp_startofpacket
	wire          video_input_8_out_burst_adapter_source0_endofpacket;       // video_input_8_out_burst_adapter:source0_endofpacket -> video_input_8_out_agent:cp_endofpacket
	wire          video_input_9_out_burst_adapter_source0_valid;             // video_input_9_out_burst_adapter:source0_valid -> video_input_9_out_agent:cp_valid
	wire  [130:0] video_input_9_out_burst_adapter_source0_data;              // video_input_9_out_burst_adapter:source0_data -> video_input_9_out_agent:cp_data
	wire          video_input_9_out_burst_adapter_source0_ready;             // video_input_9_out_agent:cp_ready -> video_input_9_out_burst_adapter:source0_ready
	wire   [21:0] video_input_9_out_burst_adapter_source0_channel;           // video_input_9_out_burst_adapter:source0_channel -> video_input_9_out_agent:cp_channel
	wire          video_input_9_out_burst_adapter_source0_startofpacket;     // video_input_9_out_burst_adapter:source0_startofpacket -> video_input_9_out_agent:cp_startofpacket
	wire          video_input_9_out_burst_adapter_source0_endofpacket;       // video_input_9_out_burst_adapter:source0_endofpacket -> video_input_9_out_agent:cp_endofpacket
	wire          video_input_out_csr_burst_adapter_source0_valid;           // video_input_out_csr_burst_adapter:source0_valid -> video_input_out_csr_agent:cp_valid
	wire  [130:0] video_input_out_csr_burst_adapter_source0_data;            // video_input_out_csr_burst_adapter:source0_data -> video_input_out_csr_agent:cp_data
	wire          video_input_out_csr_burst_adapter_source0_ready;           // video_input_out_csr_agent:cp_ready -> video_input_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_out_csr_burst_adapter_source0_channel;         // video_input_out_csr_burst_adapter:source0_channel -> video_input_out_csr_agent:cp_channel
	wire          video_input_out_csr_burst_adapter_source0_startofpacket;   // video_input_out_csr_burst_adapter:source0_startofpacket -> video_input_out_csr_agent:cp_startofpacket
	wire          video_input_out_csr_burst_adapter_source0_endofpacket;     // video_input_out_csr_burst_adapter:source0_endofpacket -> video_input_out_csr_agent:cp_endofpacket
	wire          video_input_0_out_csr_burst_adapter_source0_valid;         // video_input_0_out_csr_burst_adapter:source0_valid -> video_input_0_out_csr_agent:cp_valid
	wire  [130:0] video_input_0_out_csr_burst_adapter_source0_data;          // video_input_0_out_csr_burst_adapter:source0_data -> video_input_0_out_csr_agent:cp_data
	wire          video_input_0_out_csr_burst_adapter_source0_ready;         // video_input_0_out_csr_agent:cp_ready -> video_input_0_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_0_out_csr_burst_adapter_source0_channel;       // video_input_0_out_csr_burst_adapter:source0_channel -> video_input_0_out_csr_agent:cp_channel
	wire          video_input_0_out_csr_burst_adapter_source0_startofpacket; // video_input_0_out_csr_burst_adapter:source0_startofpacket -> video_input_0_out_csr_agent:cp_startofpacket
	wire          video_input_0_out_csr_burst_adapter_source0_endofpacket;   // video_input_0_out_csr_burst_adapter:source0_endofpacket -> video_input_0_out_csr_agent:cp_endofpacket
	wire          video_input_1_out_csr_burst_adapter_source0_valid;         // video_input_1_out_csr_burst_adapter:source0_valid -> video_input_1_out_csr_agent:cp_valid
	wire  [130:0] video_input_1_out_csr_burst_adapter_source0_data;          // video_input_1_out_csr_burst_adapter:source0_data -> video_input_1_out_csr_agent:cp_data
	wire          video_input_1_out_csr_burst_adapter_source0_ready;         // video_input_1_out_csr_agent:cp_ready -> video_input_1_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_1_out_csr_burst_adapter_source0_channel;       // video_input_1_out_csr_burst_adapter:source0_channel -> video_input_1_out_csr_agent:cp_channel
	wire          video_input_1_out_csr_burst_adapter_source0_startofpacket; // video_input_1_out_csr_burst_adapter:source0_startofpacket -> video_input_1_out_csr_agent:cp_startofpacket
	wire          video_input_1_out_csr_burst_adapter_source0_endofpacket;   // video_input_1_out_csr_burst_adapter:source0_endofpacket -> video_input_1_out_csr_agent:cp_endofpacket
	wire          video_input_2_out_csr_burst_adapter_source0_valid;         // video_input_2_out_csr_burst_adapter:source0_valid -> video_input_2_out_csr_agent:cp_valid
	wire  [130:0] video_input_2_out_csr_burst_adapter_source0_data;          // video_input_2_out_csr_burst_adapter:source0_data -> video_input_2_out_csr_agent:cp_data
	wire          video_input_2_out_csr_burst_adapter_source0_ready;         // video_input_2_out_csr_agent:cp_ready -> video_input_2_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_2_out_csr_burst_adapter_source0_channel;       // video_input_2_out_csr_burst_adapter:source0_channel -> video_input_2_out_csr_agent:cp_channel
	wire          video_input_2_out_csr_burst_adapter_source0_startofpacket; // video_input_2_out_csr_burst_adapter:source0_startofpacket -> video_input_2_out_csr_agent:cp_startofpacket
	wire          video_input_2_out_csr_burst_adapter_source0_endofpacket;   // video_input_2_out_csr_burst_adapter:source0_endofpacket -> video_input_2_out_csr_agent:cp_endofpacket
	wire          video_input_3_out_csr_burst_adapter_source0_valid;         // video_input_3_out_csr_burst_adapter:source0_valid -> video_input_3_out_csr_agent:cp_valid
	wire  [130:0] video_input_3_out_csr_burst_adapter_source0_data;          // video_input_3_out_csr_burst_adapter:source0_data -> video_input_3_out_csr_agent:cp_data
	wire          video_input_3_out_csr_burst_adapter_source0_ready;         // video_input_3_out_csr_agent:cp_ready -> video_input_3_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_3_out_csr_burst_adapter_source0_channel;       // video_input_3_out_csr_burst_adapter:source0_channel -> video_input_3_out_csr_agent:cp_channel
	wire          video_input_3_out_csr_burst_adapter_source0_startofpacket; // video_input_3_out_csr_burst_adapter:source0_startofpacket -> video_input_3_out_csr_agent:cp_startofpacket
	wire          video_input_3_out_csr_burst_adapter_source0_endofpacket;   // video_input_3_out_csr_burst_adapter:source0_endofpacket -> video_input_3_out_csr_agent:cp_endofpacket
	wire          video_input_4_out_csr_burst_adapter_source0_valid;         // video_input_4_out_csr_burst_adapter:source0_valid -> video_input_4_out_csr_agent:cp_valid
	wire  [130:0] video_input_4_out_csr_burst_adapter_source0_data;          // video_input_4_out_csr_burst_adapter:source0_data -> video_input_4_out_csr_agent:cp_data
	wire          video_input_4_out_csr_burst_adapter_source0_ready;         // video_input_4_out_csr_agent:cp_ready -> video_input_4_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_4_out_csr_burst_adapter_source0_channel;       // video_input_4_out_csr_burst_adapter:source0_channel -> video_input_4_out_csr_agent:cp_channel
	wire          video_input_4_out_csr_burst_adapter_source0_startofpacket; // video_input_4_out_csr_burst_adapter:source0_startofpacket -> video_input_4_out_csr_agent:cp_startofpacket
	wire          video_input_4_out_csr_burst_adapter_source0_endofpacket;   // video_input_4_out_csr_burst_adapter:source0_endofpacket -> video_input_4_out_csr_agent:cp_endofpacket
	wire          video_input_5_out_csr_burst_adapter_source0_valid;         // video_input_5_out_csr_burst_adapter:source0_valid -> video_input_5_out_csr_agent:cp_valid
	wire  [130:0] video_input_5_out_csr_burst_adapter_source0_data;          // video_input_5_out_csr_burst_adapter:source0_data -> video_input_5_out_csr_agent:cp_data
	wire          video_input_5_out_csr_burst_adapter_source0_ready;         // video_input_5_out_csr_agent:cp_ready -> video_input_5_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_5_out_csr_burst_adapter_source0_channel;       // video_input_5_out_csr_burst_adapter:source0_channel -> video_input_5_out_csr_agent:cp_channel
	wire          video_input_5_out_csr_burst_adapter_source0_startofpacket; // video_input_5_out_csr_burst_adapter:source0_startofpacket -> video_input_5_out_csr_agent:cp_startofpacket
	wire          video_input_5_out_csr_burst_adapter_source0_endofpacket;   // video_input_5_out_csr_burst_adapter:source0_endofpacket -> video_input_5_out_csr_agent:cp_endofpacket
	wire          video_input_6_out_csr_burst_adapter_source0_valid;         // video_input_6_out_csr_burst_adapter:source0_valid -> video_input_6_out_csr_agent:cp_valid
	wire  [130:0] video_input_6_out_csr_burst_adapter_source0_data;          // video_input_6_out_csr_burst_adapter:source0_data -> video_input_6_out_csr_agent:cp_data
	wire          video_input_6_out_csr_burst_adapter_source0_ready;         // video_input_6_out_csr_agent:cp_ready -> video_input_6_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_6_out_csr_burst_adapter_source0_channel;       // video_input_6_out_csr_burst_adapter:source0_channel -> video_input_6_out_csr_agent:cp_channel
	wire          video_input_6_out_csr_burst_adapter_source0_startofpacket; // video_input_6_out_csr_burst_adapter:source0_startofpacket -> video_input_6_out_csr_agent:cp_startofpacket
	wire          video_input_6_out_csr_burst_adapter_source0_endofpacket;   // video_input_6_out_csr_burst_adapter:source0_endofpacket -> video_input_6_out_csr_agent:cp_endofpacket
	wire          video_input_7_out_csr_burst_adapter_source0_valid;         // video_input_7_out_csr_burst_adapter:source0_valid -> video_input_7_out_csr_agent:cp_valid
	wire  [130:0] video_input_7_out_csr_burst_adapter_source0_data;          // video_input_7_out_csr_burst_adapter:source0_data -> video_input_7_out_csr_agent:cp_data
	wire          video_input_7_out_csr_burst_adapter_source0_ready;         // video_input_7_out_csr_agent:cp_ready -> video_input_7_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_7_out_csr_burst_adapter_source0_channel;       // video_input_7_out_csr_burst_adapter:source0_channel -> video_input_7_out_csr_agent:cp_channel
	wire          video_input_7_out_csr_burst_adapter_source0_startofpacket; // video_input_7_out_csr_burst_adapter:source0_startofpacket -> video_input_7_out_csr_agent:cp_startofpacket
	wire          video_input_7_out_csr_burst_adapter_source0_endofpacket;   // video_input_7_out_csr_burst_adapter:source0_endofpacket -> video_input_7_out_csr_agent:cp_endofpacket
	wire          video_input_8_out_csr_burst_adapter_source0_valid;         // video_input_8_out_csr_burst_adapter:source0_valid -> video_input_8_out_csr_agent:cp_valid
	wire  [130:0] video_input_8_out_csr_burst_adapter_source0_data;          // video_input_8_out_csr_burst_adapter:source0_data -> video_input_8_out_csr_agent:cp_data
	wire          video_input_8_out_csr_burst_adapter_source0_ready;         // video_input_8_out_csr_agent:cp_ready -> video_input_8_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_8_out_csr_burst_adapter_source0_channel;       // video_input_8_out_csr_burst_adapter:source0_channel -> video_input_8_out_csr_agent:cp_channel
	wire          video_input_8_out_csr_burst_adapter_source0_startofpacket; // video_input_8_out_csr_burst_adapter:source0_startofpacket -> video_input_8_out_csr_agent:cp_startofpacket
	wire          video_input_8_out_csr_burst_adapter_source0_endofpacket;   // video_input_8_out_csr_burst_adapter:source0_endofpacket -> video_input_8_out_csr_agent:cp_endofpacket
	wire          video_input_9_out_csr_burst_adapter_source0_valid;         // video_input_9_out_csr_burst_adapter:source0_valid -> video_input_9_out_csr_agent:cp_valid
	wire  [130:0] video_input_9_out_csr_burst_adapter_source0_data;          // video_input_9_out_csr_burst_adapter:source0_data -> video_input_9_out_csr_agent:cp_data
	wire          video_input_9_out_csr_burst_adapter_source0_ready;         // video_input_9_out_csr_agent:cp_ready -> video_input_9_out_csr_burst_adapter:source0_ready
	wire   [21:0] video_input_9_out_csr_burst_adapter_source0_channel;       // video_input_9_out_csr_burst_adapter:source0_channel -> video_input_9_out_csr_agent:cp_channel
	wire          video_input_9_out_csr_burst_adapter_source0_startofpacket; // video_input_9_out_csr_burst_adapter:source0_startofpacket -> video_input_9_out_csr_agent:cp_startofpacket
	wire          video_input_9_out_csr_burst_adapter_source0_endofpacket;   // video_input_9_out_csr_burst_adapter:source0_endofpacket -> video_input_9_out_csr_agent:cp_endofpacket
	wire          router_002_src_valid;                                      // router_002:src_valid -> video_input_out_rsp_width_adapter:in_valid
	wire  [130:0] router_002_src_data;                                       // router_002:src_data -> video_input_out_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                      // video_input_out_rsp_width_adapter:in_ready -> router_002:src_ready
	wire   [21:0] router_002_src_channel;                                    // router_002:src_channel -> video_input_out_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                              // router_002:src_startofpacket -> video_input_out_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                // router_002:src_endofpacket -> video_input_out_rsp_width_adapter:in_endofpacket
	wire          video_input_out_rsp_width_adapter_src_valid;               // video_input_out_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [166:0] video_input_out_rsp_width_adapter_src_data;                // video_input_out_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          video_input_out_rsp_width_adapter_src_ready;               // rsp_demux:sink_ready -> video_input_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_out_rsp_width_adapter_src_channel;             // video_input_out_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          video_input_out_rsp_width_adapter_src_startofpacket;       // video_input_out_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          video_input_out_rsp_width_adapter_src_endofpacket;         // video_input_out_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                      // router_003:src_valid -> video_input_0_out_rsp_width_adapter:in_valid
	wire  [130:0] router_003_src_data;                                       // router_003:src_data -> video_input_0_out_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                      // video_input_0_out_rsp_width_adapter:in_ready -> router_003:src_ready
	wire   [21:0] router_003_src_channel;                                    // router_003:src_channel -> video_input_0_out_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                              // router_003:src_startofpacket -> video_input_0_out_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                // router_003:src_endofpacket -> video_input_0_out_rsp_width_adapter:in_endofpacket
	wire          video_input_0_out_rsp_width_adapter_src_valid;             // video_input_0_out_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [166:0] video_input_0_out_rsp_width_adapter_src_data;              // video_input_0_out_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          video_input_0_out_rsp_width_adapter_src_ready;             // rsp_demux_001:sink_ready -> video_input_0_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_0_out_rsp_width_adapter_src_channel;           // video_input_0_out_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          video_input_0_out_rsp_width_adapter_src_startofpacket;     // video_input_0_out_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          video_input_0_out_rsp_width_adapter_src_endofpacket;       // video_input_0_out_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                      // router_004:src_valid -> video_input_1_out_rsp_width_adapter:in_valid
	wire  [130:0] router_004_src_data;                                       // router_004:src_data -> video_input_1_out_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                      // video_input_1_out_rsp_width_adapter:in_ready -> router_004:src_ready
	wire   [21:0] router_004_src_channel;                                    // router_004:src_channel -> video_input_1_out_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                              // router_004:src_startofpacket -> video_input_1_out_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                // router_004:src_endofpacket -> video_input_1_out_rsp_width_adapter:in_endofpacket
	wire          video_input_1_out_rsp_width_adapter_src_valid;             // video_input_1_out_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [166:0] video_input_1_out_rsp_width_adapter_src_data;              // video_input_1_out_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          video_input_1_out_rsp_width_adapter_src_ready;             // rsp_demux_002:sink_ready -> video_input_1_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_1_out_rsp_width_adapter_src_channel;           // video_input_1_out_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          video_input_1_out_rsp_width_adapter_src_startofpacket;     // video_input_1_out_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          video_input_1_out_rsp_width_adapter_src_endofpacket;       // video_input_1_out_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                      // router_005:src_valid -> video_input_2_out_rsp_width_adapter:in_valid
	wire  [130:0] router_005_src_data;                                       // router_005:src_data -> video_input_2_out_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                      // video_input_2_out_rsp_width_adapter:in_ready -> router_005:src_ready
	wire   [21:0] router_005_src_channel;                                    // router_005:src_channel -> video_input_2_out_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                              // router_005:src_startofpacket -> video_input_2_out_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                // router_005:src_endofpacket -> video_input_2_out_rsp_width_adapter:in_endofpacket
	wire          video_input_2_out_rsp_width_adapter_src_valid;             // video_input_2_out_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [166:0] video_input_2_out_rsp_width_adapter_src_data;              // video_input_2_out_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          video_input_2_out_rsp_width_adapter_src_ready;             // rsp_demux_003:sink_ready -> video_input_2_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_2_out_rsp_width_adapter_src_channel;           // video_input_2_out_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          video_input_2_out_rsp_width_adapter_src_startofpacket;     // video_input_2_out_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          video_input_2_out_rsp_width_adapter_src_endofpacket;       // video_input_2_out_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                      // router_006:src_valid -> video_input_3_out_rsp_width_adapter:in_valid
	wire  [130:0] router_006_src_data;                                       // router_006:src_data -> video_input_3_out_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                      // video_input_3_out_rsp_width_adapter:in_ready -> router_006:src_ready
	wire   [21:0] router_006_src_channel;                                    // router_006:src_channel -> video_input_3_out_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                              // router_006:src_startofpacket -> video_input_3_out_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                // router_006:src_endofpacket -> video_input_3_out_rsp_width_adapter:in_endofpacket
	wire          video_input_3_out_rsp_width_adapter_src_valid;             // video_input_3_out_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [166:0] video_input_3_out_rsp_width_adapter_src_data;              // video_input_3_out_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          video_input_3_out_rsp_width_adapter_src_ready;             // rsp_demux_004:sink_ready -> video_input_3_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_3_out_rsp_width_adapter_src_channel;           // video_input_3_out_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          video_input_3_out_rsp_width_adapter_src_startofpacket;     // video_input_3_out_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          video_input_3_out_rsp_width_adapter_src_endofpacket;       // video_input_3_out_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                      // router_007:src_valid -> video_input_4_out_rsp_width_adapter:in_valid
	wire  [130:0] router_007_src_data;                                       // router_007:src_data -> video_input_4_out_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                      // video_input_4_out_rsp_width_adapter:in_ready -> router_007:src_ready
	wire   [21:0] router_007_src_channel;                                    // router_007:src_channel -> video_input_4_out_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                              // router_007:src_startofpacket -> video_input_4_out_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                // router_007:src_endofpacket -> video_input_4_out_rsp_width_adapter:in_endofpacket
	wire          video_input_4_out_rsp_width_adapter_src_valid;             // video_input_4_out_rsp_width_adapter:out_valid -> rsp_demux_005:sink_valid
	wire  [166:0] video_input_4_out_rsp_width_adapter_src_data;              // video_input_4_out_rsp_width_adapter:out_data -> rsp_demux_005:sink_data
	wire          video_input_4_out_rsp_width_adapter_src_ready;             // rsp_demux_005:sink_ready -> video_input_4_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_4_out_rsp_width_adapter_src_channel;           // video_input_4_out_rsp_width_adapter:out_channel -> rsp_demux_005:sink_channel
	wire          video_input_4_out_rsp_width_adapter_src_startofpacket;     // video_input_4_out_rsp_width_adapter:out_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          video_input_4_out_rsp_width_adapter_src_endofpacket;       // video_input_4_out_rsp_width_adapter:out_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_008_src_valid;                                      // router_008:src_valid -> video_input_5_out_rsp_width_adapter:in_valid
	wire  [130:0] router_008_src_data;                                       // router_008:src_data -> video_input_5_out_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                      // video_input_5_out_rsp_width_adapter:in_ready -> router_008:src_ready
	wire   [21:0] router_008_src_channel;                                    // router_008:src_channel -> video_input_5_out_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                              // router_008:src_startofpacket -> video_input_5_out_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                // router_008:src_endofpacket -> video_input_5_out_rsp_width_adapter:in_endofpacket
	wire          video_input_5_out_rsp_width_adapter_src_valid;             // video_input_5_out_rsp_width_adapter:out_valid -> rsp_demux_006:sink_valid
	wire  [166:0] video_input_5_out_rsp_width_adapter_src_data;              // video_input_5_out_rsp_width_adapter:out_data -> rsp_demux_006:sink_data
	wire          video_input_5_out_rsp_width_adapter_src_ready;             // rsp_demux_006:sink_ready -> video_input_5_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_5_out_rsp_width_adapter_src_channel;           // video_input_5_out_rsp_width_adapter:out_channel -> rsp_demux_006:sink_channel
	wire          video_input_5_out_rsp_width_adapter_src_startofpacket;     // video_input_5_out_rsp_width_adapter:out_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          video_input_5_out_rsp_width_adapter_src_endofpacket;       // video_input_5_out_rsp_width_adapter:out_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_009_src_valid;                                      // router_009:src_valid -> video_input_6_out_rsp_width_adapter:in_valid
	wire  [130:0] router_009_src_data;                                       // router_009:src_data -> video_input_6_out_rsp_width_adapter:in_data
	wire          router_009_src_ready;                                      // video_input_6_out_rsp_width_adapter:in_ready -> router_009:src_ready
	wire   [21:0] router_009_src_channel;                                    // router_009:src_channel -> video_input_6_out_rsp_width_adapter:in_channel
	wire          router_009_src_startofpacket;                              // router_009:src_startofpacket -> video_input_6_out_rsp_width_adapter:in_startofpacket
	wire          router_009_src_endofpacket;                                // router_009:src_endofpacket -> video_input_6_out_rsp_width_adapter:in_endofpacket
	wire          video_input_6_out_rsp_width_adapter_src_valid;             // video_input_6_out_rsp_width_adapter:out_valid -> rsp_demux_007:sink_valid
	wire  [166:0] video_input_6_out_rsp_width_adapter_src_data;              // video_input_6_out_rsp_width_adapter:out_data -> rsp_demux_007:sink_data
	wire          video_input_6_out_rsp_width_adapter_src_ready;             // rsp_demux_007:sink_ready -> video_input_6_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_6_out_rsp_width_adapter_src_channel;           // video_input_6_out_rsp_width_adapter:out_channel -> rsp_demux_007:sink_channel
	wire          video_input_6_out_rsp_width_adapter_src_startofpacket;     // video_input_6_out_rsp_width_adapter:out_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          video_input_6_out_rsp_width_adapter_src_endofpacket;       // video_input_6_out_rsp_width_adapter:out_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_010_src_valid;                                      // router_010:src_valid -> video_input_7_out_rsp_width_adapter:in_valid
	wire  [130:0] router_010_src_data;                                       // router_010:src_data -> video_input_7_out_rsp_width_adapter:in_data
	wire          router_010_src_ready;                                      // video_input_7_out_rsp_width_adapter:in_ready -> router_010:src_ready
	wire   [21:0] router_010_src_channel;                                    // router_010:src_channel -> video_input_7_out_rsp_width_adapter:in_channel
	wire          router_010_src_startofpacket;                              // router_010:src_startofpacket -> video_input_7_out_rsp_width_adapter:in_startofpacket
	wire          router_010_src_endofpacket;                                // router_010:src_endofpacket -> video_input_7_out_rsp_width_adapter:in_endofpacket
	wire          video_input_7_out_rsp_width_adapter_src_valid;             // video_input_7_out_rsp_width_adapter:out_valid -> rsp_demux_008:sink_valid
	wire  [166:0] video_input_7_out_rsp_width_adapter_src_data;              // video_input_7_out_rsp_width_adapter:out_data -> rsp_demux_008:sink_data
	wire          video_input_7_out_rsp_width_adapter_src_ready;             // rsp_demux_008:sink_ready -> video_input_7_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_7_out_rsp_width_adapter_src_channel;           // video_input_7_out_rsp_width_adapter:out_channel -> rsp_demux_008:sink_channel
	wire          video_input_7_out_rsp_width_adapter_src_startofpacket;     // video_input_7_out_rsp_width_adapter:out_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          video_input_7_out_rsp_width_adapter_src_endofpacket;       // video_input_7_out_rsp_width_adapter:out_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_011_src_valid;                                      // router_011:src_valid -> video_input_8_out_rsp_width_adapter:in_valid
	wire  [130:0] router_011_src_data;                                       // router_011:src_data -> video_input_8_out_rsp_width_adapter:in_data
	wire          router_011_src_ready;                                      // video_input_8_out_rsp_width_adapter:in_ready -> router_011:src_ready
	wire   [21:0] router_011_src_channel;                                    // router_011:src_channel -> video_input_8_out_rsp_width_adapter:in_channel
	wire          router_011_src_startofpacket;                              // router_011:src_startofpacket -> video_input_8_out_rsp_width_adapter:in_startofpacket
	wire          router_011_src_endofpacket;                                // router_011:src_endofpacket -> video_input_8_out_rsp_width_adapter:in_endofpacket
	wire          video_input_8_out_rsp_width_adapter_src_valid;             // video_input_8_out_rsp_width_adapter:out_valid -> rsp_demux_009:sink_valid
	wire  [166:0] video_input_8_out_rsp_width_adapter_src_data;              // video_input_8_out_rsp_width_adapter:out_data -> rsp_demux_009:sink_data
	wire          video_input_8_out_rsp_width_adapter_src_ready;             // rsp_demux_009:sink_ready -> video_input_8_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_8_out_rsp_width_adapter_src_channel;           // video_input_8_out_rsp_width_adapter:out_channel -> rsp_demux_009:sink_channel
	wire          video_input_8_out_rsp_width_adapter_src_startofpacket;     // video_input_8_out_rsp_width_adapter:out_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          video_input_8_out_rsp_width_adapter_src_endofpacket;       // video_input_8_out_rsp_width_adapter:out_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_012_src_valid;                                      // router_012:src_valid -> video_input_9_out_rsp_width_adapter:in_valid
	wire  [130:0] router_012_src_data;                                       // router_012:src_data -> video_input_9_out_rsp_width_adapter:in_data
	wire          router_012_src_ready;                                      // video_input_9_out_rsp_width_adapter:in_ready -> router_012:src_ready
	wire   [21:0] router_012_src_channel;                                    // router_012:src_channel -> video_input_9_out_rsp_width_adapter:in_channel
	wire          router_012_src_startofpacket;                              // router_012:src_startofpacket -> video_input_9_out_rsp_width_adapter:in_startofpacket
	wire          router_012_src_endofpacket;                                // router_012:src_endofpacket -> video_input_9_out_rsp_width_adapter:in_endofpacket
	wire          video_input_9_out_rsp_width_adapter_src_valid;             // video_input_9_out_rsp_width_adapter:out_valid -> rsp_demux_010:sink_valid
	wire  [166:0] video_input_9_out_rsp_width_adapter_src_data;              // video_input_9_out_rsp_width_adapter:out_data -> rsp_demux_010:sink_data
	wire          video_input_9_out_rsp_width_adapter_src_ready;             // rsp_demux_010:sink_ready -> video_input_9_out_rsp_width_adapter:out_ready
	wire   [21:0] video_input_9_out_rsp_width_adapter_src_channel;           // video_input_9_out_rsp_width_adapter:out_channel -> rsp_demux_010:sink_channel
	wire          video_input_9_out_rsp_width_adapter_src_startofpacket;     // video_input_9_out_rsp_width_adapter:out_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          video_input_9_out_rsp_width_adapter_src_endofpacket;       // video_input_9_out_rsp_width_adapter:out_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_013_src_valid;                                      // router_013:src_valid -> video_input_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_013_src_data;                                       // router_013:src_data -> video_input_out_csr_rsp_width_adapter:in_data
	wire          router_013_src_ready;                                      // video_input_out_csr_rsp_width_adapter:in_ready -> router_013:src_ready
	wire   [21:0] router_013_src_channel;                                    // router_013:src_channel -> video_input_out_csr_rsp_width_adapter:in_channel
	wire          router_013_src_startofpacket;                              // router_013:src_startofpacket -> video_input_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_013_src_endofpacket;                                // router_013:src_endofpacket -> video_input_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_out_csr_rsp_width_adapter_src_valid;           // video_input_out_csr_rsp_width_adapter:out_valid -> rsp_demux_011:sink_valid
	wire  [166:0] video_input_out_csr_rsp_width_adapter_src_data;            // video_input_out_csr_rsp_width_adapter:out_data -> rsp_demux_011:sink_data
	wire          video_input_out_csr_rsp_width_adapter_src_ready;           // rsp_demux_011:sink_ready -> video_input_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_out_csr_rsp_width_adapter_src_channel;         // video_input_out_csr_rsp_width_adapter:out_channel -> rsp_demux_011:sink_channel
	wire          video_input_out_csr_rsp_width_adapter_src_startofpacket;   // video_input_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          video_input_out_csr_rsp_width_adapter_src_endofpacket;     // video_input_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_014_src_valid;                                      // router_014:src_valid -> video_input_0_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_014_src_data;                                       // router_014:src_data -> video_input_0_out_csr_rsp_width_adapter:in_data
	wire          router_014_src_ready;                                      // video_input_0_out_csr_rsp_width_adapter:in_ready -> router_014:src_ready
	wire   [21:0] router_014_src_channel;                                    // router_014:src_channel -> video_input_0_out_csr_rsp_width_adapter:in_channel
	wire          router_014_src_startofpacket;                              // router_014:src_startofpacket -> video_input_0_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_014_src_endofpacket;                                // router_014:src_endofpacket -> video_input_0_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_0_out_csr_rsp_width_adapter_src_valid;         // video_input_0_out_csr_rsp_width_adapter:out_valid -> rsp_demux_012:sink_valid
	wire  [166:0] video_input_0_out_csr_rsp_width_adapter_src_data;          // video_input_0_out_csr_rsp_width_adapter:out_data -> rsp_demux_012:sink_data
	wire          video_input_0_out_csr_rsp_width_adapter_src_ready;         // rsp_demux_012:sink_ready -> video_input_0_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_0_out_csr_rsp_width_adapter_src_channel;       // video_input_0_out_csr_rsp_width_adapter:out_channel -> rsp_demux_012:sink_channel
	wire          video_input_0_out_csr_rsp_width_adapter_src_startofpacket; // video_input_0_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          video_input_0_out_csr_rsp_width_adapter_src_endofpacket;   // video_input_0_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_015_src_valid;                                      // router_015:src_valid -> video_input_1_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_015_src_data;                                       // router_015:src_data -> video_input_1_out_csr_rsp_width_adapter:in_data
	wire          router_015_src_ready;                                      // video_input_1_out_csr_rsp_width_adapter:in_ready -> router_015:src_ready
	wire   [21:0] router_015_src_channel;                                    // router_015:src_channel -> video_input_1_out_csr_rsp_width_adapter:in_channel
	wire          router_015_src_startofpacket;                              // router_015:src_startofpacket -> video_input_1_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_015_src_endofpacket;                                // router_015:src_endofpacket -> video_input_1_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_1_out_csr_rsp_width_adapter_src_valid;         // video_input_1_out_csr_rsp_width_adapter:out_valid -> rsp_demux_013:sink_valid
	wire  [166:0] video_input_1_out_csr_rsp_width_adapter_src_data;          // video_input_1_out_csr_rsp_width_adapter:out_data -> rsp_demux_013:sink_data
	wire          video_input_1_out_csr_rsp_width_adapter_src_ready;         // rsp_demux_013:sink_ready -> video_input_1_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_1_out_csr_rsp_width_adapter_src_channel;       // video_input_1_out_csr_rsp_width_adapter:out_channel -> rsp_demux_013:sink_channel
	wire          video_input_1_out_csr_rsp_width_adapter_src_startofpacket; // video_input_1_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          video_input_1_out_csr_rsp_width_adapter_src_endofpacket;   // video_input_1_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_016_src_valid;                                      // router_016:src_valid -> video_input_2_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_016_src_data;                                       // router_016:src_data -> video_input_2_out_csr_rsp_width_adapter:in_data
	wire          router_016_src_ready;                                      // video_input_2_out_csr_rsp_width_adapter:in_ready -> router_016:src_ready
	wire   [21:0] router_016_src_channel;                                    // router_016:src_channel -> video_input_2_out_csr_rsp_width_adapter:in_channel
	wire          router_016_src_startofpacket;                              // router_016:src_startofpacket -> video_input_2_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_016_src_endofpacket;                                // router_016:src_endofpacket -> video_input_2_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_2_out_csr_rsp_width_adapter_src_valid;         // video_input_2_out_csr_rsp_width_adapter:out_valid -> rsp_demux_014:sink_valid
	wire  [166:0] video_input_2_out_csr_rsp_width_adapter_src_data;          // video_input_2_out_csr_rsp_width_adapter:out_data -> rsp_demux_014:sink_data
	wire          video_input_2_out_csr_rsp_width_adapter_src_ready;         // rsp_demux_014:sink_ready -> video_input_2_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_2_out_csr_rsp_width_adapter_src_channel;       // video_input_2_out_csr_rsp_width_adapter:out_channel -> rsp_demux_014:sink_channel
	wire          video_input_2_out_csr_rsp_width_adapter_src_startofpacket; // video_input_2_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          video_input_2_out_csr_rsp_width_adapter_src_endofpacket;   // video_input_2_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_017_src_valid;                                      // router_017:src_valid -> video_input_3_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_017_src_data;                                       // router_017:src_data -> video_input_3_out_csr_rsp_width_adapter:in_data
	wire          router_017_src_ready;                                      // video_input_3_out_csr_rsp_width_adapter:in_ready -> router_017:src_ready
	wire   [21:0] router_017_src_channel;                                    // router_017:src_channel -> video_input_3_out_csr_rsp_width_adapter:in_channel
	wire          router_017_src_startofpacket;                              // router_017:src_startofpacket -> video_input_3_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_017_src_endofpacket;                                // router_017:src_endofpacket -> video_input_3_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_3_out_csr_rsp_width_adapter_src_valid;         // video_input_3_out_csr_rsp_width_adapter:out_valid -> rsp_demux_015:sink_valid
	wire  [166:0] video_input_3_out_csr_rsp_width_adapter_src_data;          // video_input_3_out_csr_rsp_width_adapter:out_data -> rsp_demux_015:sink_data
	wire          video_input_3_out_csr_rsp_width_adapter_src_ready;         // rsp_demux_015:sink_ready -> video_input_3_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_3_out_csr_rsp_width_adapter_src_channel;       // video_input_3_out_csr_rsp_width_adapter:out_channel -> rsp_demux_015:sink_channel
	wire          video_input_3_out_csr_rsp_width_adapter_src_startofpacket; // video_input_3_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          video_input_3_out_csr_rsp_width_adapter_src_endofpacket;   // video_input_3_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_018_src_valid;                                      // router_018:src_valid -> video_input_4_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_018_src_data;                                       // router_018:src_data -> video_input_4_out_csr_rsp_width_adapter:in_data
	wire          router_018_src_ready;                                      // video_input_4_out_csr_rsp_width_adapter:in_ready -> router_018:src_ready
	wire   [21:0] router_018_src_channel;                                    // router_018:src_channel -> video_input_4_out_csr_rsp_width_adapter:in_channel
	wire          router_018_src_startofpacket;                              // router_018:src_startofpacket -> video_input_4_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_018_src_endofpacket;                                // router_018:src_endofpacket -> video_input_4_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_4_out_csr_rsp_width_adapter_src_valid;         // video_input_4_out_csr_rsp_width_adapter:out_valid -> rsp_demux_016:sink_valid
	wire  [166:0] video_input_4_out_csr_rsp_width_adapter_src_data;          // video_input_4_out_csr_rsp_width_adapter:out_data -> rsp_demux_016:sink_data
	wire          video_input_4_out_csr_rsp_width_adapter_src_ready;         // rsp_demux_016:sink_ready -> video_input_4_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_4_out_csr_rsp_width_adapter_src_channel;       // video_input_4_out_csr_rsp_width_adapter:out_channel -> rsp_demux_016:sink_channel
	wire          video_input_4_out_csr_rsp_width_adapter_src_startofpacket; // video_input_4_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          video_input_4_out_csr_rsp_width_adapter_src_endofpacket;   // video_input_4_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          router_019_src_valid;                                      // router_019:src_valid -> video_input_5_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_019_src_data;                                       // router_019:src_data -> video_input_5_out_csr_rsp_width_adapter:in_data
	wire          router_019_src_ready;                                      // video_input_5_out_csr_rsp_width_adapter:in_ready -> router_019:src_ready
	wire   [21:0] router_019_src_channel;                                    // router_019:src_channel -> video_input_5_out_csr_rsp_width_adapter:in_channel
	wire          router_019_src_startofpacket;                              // router_019:src_startofpacket -> video_input_5_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_019_src_endofpacket;                                // router_019:src_endofpacket -> video_input_5_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_5_out_csr_rsp_width_adapter_src_valid;         // video_input_5_out_csr_rsp_width_adapter:out_valid -> rsp_demux_017:sink_valid
	wire  [166:0] video_input_5_out_csr_rsp_width_adapter_src_data;          // video_input_5_out_csr_rsp_width_adapter:out_data -> rsp_demux_017:sink_data
	wire          video_input_5_out_csr_rsp_width_adapter_src_ready;         // rsp_demux_017:sink_ready -> video_input_5_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_5_out_csr_rsp_width_adapter_src_channel;       // video_input_5_out_csr_rsp_width_adapter:out_channel -> rsp_demux_017:sink_channel
	wire          video_input_5_out_csr_rsp_width_adapter_src_startofpacket; // video_input_5_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          video_input_5_out_csr_rsp_width_adapter_src_endofpacket;   // video_input_5_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          router_020_src_valid;                                      // router_020:src_valid -> video_input_6_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_020_src_data;                                       // router_020:src_data -> video_input_6_out_csr_rsp_width_adapter:in_data
	wire          router_020_src_ready;                                      // video_input_6_out_csr_rsp_width_adapter:in_ready -> router_020:src_ready
	wire   [21:0] router_020_src_channel;                                    // router_020:src_channel -> video_input_6_out_csr_rsp_width_adapter:in_channel
	wire          router_020_src_startofpacket;                              // router_020:src_startofpacket -> video_input_6_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_020_src_endofpacket;                                // router_020:src_endofpacket -> video_input_6_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_6_out_csr_rsp_width_adapter_src_valid;         // video_input_6_out_csr_rsp_width_adapter:out_valid -> rsp_demux_018:sink_valid
	wire  [166:0] video_input_6_out_csr_rsp_width_adapter_src_data;          // video_input_6_out_csr_rsp_width_adapter:out_data -> rsp_demux_018:sink_data
	wire          video_input_6_out_csr_rsp_width_adapter_src_ready;         // rsp_demux_018:sink_ready -> video_input_6_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_6_out_csr_rsp_width_adapter_src_channel;       // video_input_6_out_csr_rsp_width_adapter:out_channel -> rsp_demux_018:sink_channel
	wire          video_input_6_out_csr_rsp_width_adapter_src_startofpacket; // video_input_6_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          video_input_6_out_csr_rsp_width_adapter_src_endofpacket;   // video_input_6_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_021_src_valid;                                      // router_021:src_valid -> video_input_7_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_021_src_data;                                       // router_021:src_data -> video_input_7_out_csr_rsp_width_adapter:in_data
	wire          router_021_src_ready;                                      // video_input_7_out_csr_rsp_width_adapter:in_ready -> router_021:src_ready
	wire   [21:0] router_021_src_channel;                                    // router_021:src_channel -> video_input_7_out_csr_rsp_width_adapter:in_channel
	wire          router_021_src_startofpacket;                              // router_021:src_startofpacket -> video_input_7_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_021_src_endofpacket;                                // router_021:src_endofpacket -> video_input_7_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_7_out_csr_rsp_width_adapter_src_valid;         // video_input_7_out_csr_rsp_width_adapter:out_valid -> rsp_demux_019:sink_valid
	wire  [166:0] video_input_7_out_csr_rsp_width_adapter_src_data;          // video_input_7_out_csr_rsp_width_adapter:out_data -> rsp_demux_019:sink_data
	wire          video_input_7_out_csr_rsp_width_adapter_src_ready;         // rsp_demux_019:sink_ready -> video_input_7_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_7_out_csr_rsp_width_adapter_src_channel;       // video_input_7_out_csr_rsp_width_adapter:out_channel -> rsp_demux_019:sink_channel
	wire          video_input_7_out_csr_rsp_width_adapter_src_startofpacket; // video_input_7_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          video_input_7_out_csr_rsp_width_adapter_src_endofpacket;   // video_input_7_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          router_022_src_valid;                                      // router_022:src_valid -> video_input_8_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_022_src_data;                                       // router_022:src_data -> video_input_8_out_csr_rsp_width_adapter:in_data
	wire          router_022_src_ready;                                      // video_input_8_out_csr_rsp_width_adapter:in_ready -> router_022:src_ready
	wire   [21:0] router_022_src_channel;                                    // router_022:src_channel -> video_input_8_out_csr_rsp_width_adapter:in_channel
	wire          router_022_src_startofpacket;                              // router_022:src_startofpacket -> video_input_8_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_022_src_endofpacket;                                // router_022:src_endofpacket -> video_input_8_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_8_out_csr_rsp_width_adapter_src_valid;         // video_input_8_out_csr_rsp_width_adapter:out_valid -> rsp_demux_020:sink_valid
	wire  [166:0] video_input_8_out_csr_rsp_width_adapter_src_data;          // video_input_8_out_csr_rsp_width_adapter:out_data -> rsp_demux_020:sink_data
	wire          video_input_8_out_csr_rsp_width_adapter_src_ready;         // rsp_demux_020:sink_ready -> video_input_8_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_8_out_csr_rsp_width_adapter_src_channel;       // video_input_8_out_csr_rsp_width_adapter:out_channel -> rsp_demux_020:sink_channel
	wire          video_input_8_out_csr_rsp_width_adapter_src_startofpacket; // video_input_8_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          video_input_8_out_csr_rsp_width_adapter_src_endofpacket;   // video_input_8_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          router_023_src_valid;                                      // router_023:src_valid -> video_input_9_out_csr_rsp_width_adapter:in_valid
	wire  [130:0] router_023_src_data;                                       // router_023:src_data -> video_input_9_out_csr_rsp_width_adapter:in_data
	wire          router_023_src_ready;                                      // video_input_9_out_csr_rsp_width_adapter:in_ready -> router_023:src_ready
	wire   [21:0] router_023_src_channel;                                    // router_023:src_channel -> video_input_9_out_csr_rsp_width_adapter:in_channel
	wire          router_023_src_startofpacket;                              // router_023:src_startofpacket -> video_input_9_out_csr_rsp_width_adapter:in_startofpacket
	wire          router_023_src_endofpacket;                                // router_023:src_endofpacket -> video_input_9_out_csr_rsp_width_adapter:in_endofpacket
	wire          video_input_9_out_csr_rsp_width_adapter_src_valid;         // video_input_9_out_csr_rsp_width_adapter:out_valid -> rsp_demux_021:sink_valid
	wire  [166:0] video_input_9_out_csr_rsp_width_adapter_src_data;          // video_input_9_out_csr_rsp_width_adapter:out_data -> rsp_demux_021:sink_data
	wire          video_input_9_out_csr_rsp_width_adapter_src_ready;         // rsp_demux_021:sink_ready -> video_input_9_out_csr_rsp_width_adapter:out_ready
	wire   [21:0] video_input_9_out_csr_rsp_width_adapter_src_channel;       // video_input_9_out_csr_rsp_width_adapter:out_channel -> rsp_demux_021:sink_channel
	wire          video_input_9_out_csr_rsp_width_adapter_src_startofpacket; // video_input_9_out_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          video_input_9_out_csr_rsp_width_adapter_src_endofpacket;   // video_input_9_out_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          cmd_mux_src_valid;                                         // cmd_mux:src_valid -> video_input_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_src_data;                                          // cmd_mux:src_data -> video_input_out_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                         // video_input_out_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [21:0] cmd_mux_src_channel;                                       // cmd_mux:src_channel -> video_input_out_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                 // cmd_mux:src_startofpacket -> video_input_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                   // cmd_mux:src_endofpacket -> video_input_out_cmd_width_adapter:in_endofpacket
	wire          video_input_out_cmd_width_adapter_src_valid;               // video_input_out_cmd_width_adapter:out_valid -> video_input_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_out_cmd_width_adapter_src_data;                // video_input_out_cmd_width_adapter:out_data -> video_input_out_burst_adapter:sink0_data
	wire          video_input_out_cmd_width_adapter_src_ready;               // video_input_out_burst_adapter:sink0_ready -> video_input_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_out_cmd_width_adapter_src_channel;             // video_input_out_cmd_width_adapter:out_channel -> video_input_out_burst_adapter:sink0_channel
	wire          video_input_out_cmd_width_adapter_src_startofpacket;       // video_input_out_cmd_width_adapter:out_startofpacket -> video_input_out_burst_adapter:sink0_startofpacket
	wire          video_input_out_cmd_width_adapter_src_endofpacket;         // video_input_out_cmd_width_adapter:out_endofpacket -> video_input_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                     // cmd_mux_001:src_valid -> video_input_0_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_001_src_data;                                      // cmd_mux_001:src_data -> video_input_0_out_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                     // video_input_0_out_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [21:0] cmd_mux_001_src_channel;                                   // cmd_mux_001:src_channel -> video_input_0_out_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                             // cmd_mux_001:src_startofpacket -> video_input_0_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                               // cmd_mux_001:src_endofpacket -> video_input_0_out_cmd_width_adapter:in_endofpacket
	wire          video_input_0_out_cmd_width_adapter_src_valid;             // video_input_0_out_cmd_width_adapter:out_valid -> video_input_0_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_0_out_cmd_width_adapter_src_data;              // video_input_0_out_cmd_width_adapter:out_data -> video_input_0_out_burst_adapter:sink0_data
	wire          video_input_0_out_cmd_width_adapter_src_ready;             // video_input_0_out_burst_adapter:sink0_ready -> video_input_0_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_0_out_cmd_width_adapter_src_channel;           // video_input_0_out_cmd_width_adapter:out_channel -> video_input_0_out_burst_adapter:sink0_channel
	wire          video_input_0_out_cmd_width_adapter_src_startofpacket;     // video_input_0_out_cmd_width_adapter:out_startofpacket -> video_input_0_out_burst_adapter:sink0_startofpacket
	wire          video_input_0_out_cmd_width_adapter_src_endofpacket;       // video_input_0_out_cmd_width_adapter:out_endofpacket -> video_input_0_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                     // cmd_mux_002:src_valid -> video_input_1_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_002_src_data;                                      // cmd_mux_002:src_data -> video_input_1_out_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                     // video_input_1_out_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire   [21:0] cmd_mux_002_src_channel;                                   // cmd_mux_002:src_channel -> video_input_1_out_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                             // cmd_mux_002:src_startofpacket -> video_input_1_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                               // cmd_mux_002:src_endofpacket -> video_input_1_out_cmd_width_adapter:in_endofpacket
	wire          video_input_1_out_cmd_width_adapter_src_valid;             // video_input_1_out_cmd_width_adapter:out_valid -> video_input_1_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_1_out_cmd_width_adapter_src_data;              // video_input_1_out_cmd_width_adapter:out_data -> video_input_1_out_burst_adapter:sink0_data
	wire          video_input_1_out_cmd_width_adapter_src_ready;             // video_input_1_out_burst_adapter:sink0_ready -> video_input_1_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_1_out_cmd_width_adapter_src_channel;           // video_input_1_out_cmd_width_adapter:out_channel -> video_input_1_out_burst_adapter:sink0_channel
	wire          video_input_1_out_cmd_width_adapter_src_startofpacket;     // video_input_1_out_cmd_width_adapter:out_startofpacket -> video_input_1_out_burst_adapter:sink0_startofpacket
	wire          video_input_1_out_cmd_width_adapter_src_endofpacket;       // video_input_1_out_cmd_width_adapter:out_endofpacket -> video_input_1_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                     // cmd_mux_003:src_valid -> video_input_2_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_003_src_data;                                      // cmd_mux_003:src_data -> video_input_2_out_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                     // video_input_2_out_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire   [21:0] cmd_mux_003_src_channel;                                   // cmd_mux_003:src_channel -> video_input_2_out_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                             // cmd_mux_003:src_startofpacket -> video_input_2_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                               // cmd_mux_003:src_endofpacket -> video_input_2_out_cmd_width_adapter:in_endofpacket
	wire          video_input_2_out_cmd_width_adapter_src_valid;             // video_input_2_out_cmd_width_adapter:out_valid -> video_input_2_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_2_out_cmd_width_adapter_src_data;              // video_input_2_out_cmd_width_adapter:out_data -> video_input_2_out_burst_adapter:sink0_data
	wire          video_input_2_out_cmd_width_adapter_src_ready;             // video_input_2_out_burst_adapter:sink0_ready -> video_input_2_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_2_out_cmd_width_adapter_src_channel;           // video_input_2_out_cmd_width_adapter:out_channel -> video_input_2_out_burst_adapter:sink0_channel
	wire          video_input_2_out_cmd_width_adapter_src_startofpacket;     // video_input_2_out_cmd_width_adapter:out_startofpacket -> video_input_2_out_burst_adapter:sink0_startofpacket
	wire          video_input_2_out_cmd_width_adapter_src_endofpacket;       // video_input_2_out_cmd_width_adapter:out_endofpacket -> video_input_2_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                     // cmd_mux_004:src_valid -> video_input_3_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_004_src_data;                                      // cmd_mux_004:src_data -> video_input_3_out_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                     // video_input_3_out_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire   [21:0] cmd_mux_004_src_channel;                                   // cmd_mux_004:src_channel -> video_input_3_out_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                             // cmd_mux_004:src_startofpacket -> video_input_3_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                               // cmd_mux_004:src_endofpacket -> video_input_3_out_cmd_width_adapter:in_endofpacket
	wire          video_input_3_out_cmd_width_adapter_src_valid;             // video_input_3_out_cmd_width_adapter:out_valid -> video_input_3_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_3_out_cmd_width_adapter_src_data;              // video_input_3_out_cmd_width_adapter:out_data -> video_input_3_out_burst_adapter:sink0_data
	wire          video_input_3_out_cmd_width_adapter_src_ready;             // video_input_3_out_burst_adapter:sink0_ready -> video_input_3_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_3_out_cmd_width_adapter_src_channel;           // video_input_3_out_cmd_width_adapter:out_channel -> video_input_3_out_burst_adapter:sink0_channel
	wire          video_input_3_out_cmd_width_adapter_src_startofpacket;     // video_input_3_out_cmd_width_adapter:out_startofpacket -> video_input_3_out_burst_adapter:sink0_startofpacket
	wire          video_input_3_out_cmd_width_adapter_src_endofpacket;       // video_input_3_out_cmd_width_adapter:out_endofpacket -> video_input_3_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_005_src_valid;                                     // cmd_mux_005:src_valid -> video_input_4_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_005_src_data;                                      // cmd_mux_005:src_data -> video_input_4_out_cmd_width_adapter:in_data
	wire          cmd_mux_005_src_ready;                                     // video_input_4_out_cmd_width_adapter:in_ready -> cmd_mux_005:src_ready
	wire   [21:0] cmd_mux_005_src_channel;                                   // cmd_mux_005:src_channel -> video_input_4_out_cmd_width_adapter:in_channel
	wire          cmd_mux_005_src_startofpacket;                             // cmd_mux_005:src_startofpacket -> video_input_4_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                               // cmd_mux_005:src_endofpacket -> video_input_4_out_cmd_width_adapter:in_endofpacket
	wire          video_input_4_out_cmd_width_adapter_src_valid;             // video_input_4_out_cmd_width_adapter:out_valid -> video_input_4_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_4_out_cmd_width_adapter_src_data;              // video_input_4_out_cmd_width_adapter:out_data -> video_input_4_out_burst_adapter:sink0_data
	wire          video_input_4_out_cmd_width_adapter_src_ready;             // video_input_4_out_burst_adapter:sink0_ready -> video_input_4_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_4_out_cmd_width_adapter_src_channel;           // video_input_4_out_cmd_width_adapter:out_channel -> video_input_4_out_burst_adapter:sink0_channel
	wire          video_input_4_out_cmd_width_adapter_src_startofpacket;     // video_input_4_out_cmd_width_adapter:out_startofpacket -> video_input_4_out_burst_adapter:sink0_startofpacket
	wire          video_input_4_out_cmd_width_adapter_src_endofpacket;       // video_input_4_out_cmd_width_adapter:out_endofpacket -> video_input_4_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                     // cmd_mux_006:src_valid -> video_input_5_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_006_src_data;                                      // cmd_mux_006:src_data -> video_input_5_out_cmd_width_adapter:in_data
	wire          cmd_mux_006_src_ready;                                     // video_input_5_out_cmd_width_adapter:in_ready -> cmd_mux_006:src_ready
	wire   [21:0] cmd_mux_006_src_channel;                                   // cmd_mux_006:src_channel -> video_input_5_out_cmd_width_adapter:in_channel
	wire          cmd_mux_006_src_startofpacket;                             // cmd_mux_006:src_startofpacket -> video_input_5_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                               // cmd_mux_006:src_endofpacket -> video_input_5_out_cmd_width_adapter:in_endofpacket
	wire          video_input_5_out_cmd_width_adapter_src_valid;             // video_input_5_out_cmd_width_adapter:out_valid -> video_input_5_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_5_out_cmd_width_adapter_src_data;              // video_input_5_out_cmd_width_adapter:out_data -> video_input_5_out_burst_adapter:sink0_data
	wire          video_input_5_out_cmd_width_adapter_src_ready;             // video_input_5_out_burst_adapter:sink0_ready -> video_input_5_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_5_out_cmd_width_adapter_src_channel;           // video_input_5_out_cmd_width_adapter:out_channel -> video_input_5_out_burst_adapter:sink0_channel
	wire          video_input_5_out_cmd_width_adapter_src_startofpacket;     // video_input_5_out_cmd_width_adapter:out_startofpacket -> video_input_5_out_burst_adapter:sink0_startofpacket
	wire          video_input_5_out_cmd_width_adapter_src_endofpacket;       // video_input_5_out_cmd_width_adapter:out_endofpacket -> video_input_5_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_007_src_valid;                                     // cmd_mux_007:src_valid -> video_input_6_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_007_src_data;                                      // cmd_mux_007:src_data -> video_input_6_out_cmd_width_adapter:in_data
	wire          cmd_mux_007_src_ready;                                     // video_input_6_out_cmd_width_adapter:in_ready -> cmd_mux_007:src_ready
	wire   [21:0] cmd_mux_007_src_channel;                                   // cmd_mux_007:src_channel -> video_input_6_out_cmd_width_adapter:in_channel
	wire          cmd_mux_007_src_startofpacket;                             // cmd_mux_007:src_startofpacket -> video_input_6_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                               // cmd_mux_007:src_endofpacket -> video_input_6_out_cmd_width_adapter:in_endofpacket
	wire          video_input_6_out_cmd_width_adapter_src_valid;             // video_input_6_out_cmd_width_adapter:out_valid -> video_input_6_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_6_out_cmd_width_adapter_src_data;              // video_input_6_out_cmd_width_adapter:out_data -> video_input_6_out_burst_adapter:sink0_data
	wire          video_input_6_out_cmd_width_adapter_src_ready;             // video_input_6_out_burst_adapter:sink0_ready -> video_input_6_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_6_out_cmd_width_adapter_src_channel;           // video_input_6_out_cmd_width_adapter:out_channel -> video_input_6_out_burst_adapter:sink0_channel
	wire          video_input_6_out_cmd_width_adapter_src_startofpacket;     // video_input_6_out_cmd_width_adapter:out_startofpacket -> video_input_6_out_burst_adapter:sink0_startofpacket
	wire          video_input_6_out_cmd_width_adapter_src_endofpacket;       // video_input_6_out_cmd_width_adapter:out_endofpacket -> video_input_6_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_008_src_valid;                                     // cmd_mux_008:src_valid -> video_input_7_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_008_src_data;                                      // cmd_mux_008:src_data -> video_input_7_out_cmd_width_adapter:in_data
	wire          cmd_mux_008_src_ready;                                     // video_input_7_out_cmd_width_adapter:in_ready -> cmd_mux_008:src_ready
	wire   [21:0] cmd_mux_008_src_channel;                                   // cmd_mux_008:src_channel -> video_input_7_out_cmd_width_adapter:in_channel
	wire          cmd_mux_008_src_startofpacket;                             // cmd_mux_008:src_startofpacket -> video_input_7_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                               // cmd_mux_008:src_endofpacket -> video_input_7_out_cmd_width_adapter:in_endofpacket
	wire          video_input_7_out_cmd_width_adapter_src_valid;             // video_input_7_out_cmd_width_adapter:out_valid -> video_input_7_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_7_out_cmd_width_adapter_src_data;              // video_input_7_out_cmd_width_adapter:out_data -> video_input_7_out_burst_adapter:sink0_data
	wire          video_input_7_out_cmd_width_adapter_src_ready;             // video_input_7_out_burst_adapter:sink0_ready -> video_input_7_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_7_out_cmd_width_adapter_src_channel;           // video_input_7_out_cmd_width_adapter:out_channel -> video_input_7_out_burst_adapter:sink0_channel
	wire          video_input_7_out_cmd_width_adapter_src_startofpacket;     // video_input_7_out_cmd_width_adapter:out_startofpacket -> video_input_7_out_burst_adapter:sink0_startofpacket
	wire          video_input_7_out_cmd_width_adapter_src_endofpacket;       // video_input_7_out_cmd_width_adapter:out_endofpacket -> video_input_7_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                     // cmd_mux_009:src_valid -> video_input_8_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_009_src_data;                                      // cmd_mux_009:src_data -> video_input_8_out_cmd_width_adapter:in_data
	wire          cmd_mux_009_src_ready;                                     // video_input_8_out_cmd_width_adapter:in_ready -> cmd_mux_009:src_ready
	wire   [21:0] cmd_mux_009_src_channel;                                   // cmd_mux_009:src_channel -> video_input_8_out_cmd_width_adapter:in_channel
	wire          cmd_mux_009_src_startofpacket;                             // cmd_mux_009:src_startofpacket -> video_input_8_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_009_src_endofpacket;                               // cmd_mux_009:src_endofpacket -> video_input_8_out_cmd_width_adapter:in_endofpacket
	wire          video_input_8_out_cmd_width_adapter_src_valid;             // video_input_8_out_cmd_width_adapter:out_valid -> video_input_8_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_8_out_cmd_width_adapter_src_data;              // video_input_8_out_cmd_width_adapter:out_data -> video_input_8_out_burst_adapter:sink0_data
	wire          video_input_8_out_cmd_width_adapter_src_ready;             // video_input_8_out_burst_adapter:sink0_ready -> video_input_8_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_8_out_cmd_width_adapter_src_channel;           // video_input_8_out_cmd_width_adapter:out_channel -> video_input_8_out_burst_adapter:sink0_channel
	wire          video_input_8_out_cmd_width_adapter_src_startofpacket;     // video_input_8_out_cmd_width_adapter:out_startofpacket -> video_input_8_out_burst_adapter:sink0_startofpacket
	wire          video_input_8_out_cmd_width_adapter_src_endofpacket;       // video_input_8_out_cmd_width_adapter:out_endofpacket -> video_input_8_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_010_src_valid;                                     // cmd_mux_010:src_valid -> video_input_9_out_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_010_src_data;                                      // cmd_mux_010:src_data -> video_input_9_out_cmd_width_adapter:in_data
	wire          cmd_mux_010_src_ready;                                     // video_input_9_out_cmd_width_adapter:in_ready -> cmd_mux_010:src_ready
	wire   [21:0] cmd_mux_010_src_channel;                                   // cmd_mux_010:src_channel -> video_input_9_out_cmd_width_adapter:in_channel
	wire          cmd_mux_010_src_startofpacket;                             // cmd_mux_010:src_startofpacket -> video_input_9_out_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                               // cmd_mux_010:src_endofpacket -> video_input_9_out_cmd_width_adapter:in_endofpacket
	wire          video_input_9_out_cmd_width_adapter_src_valid;             // video_input_9_out_cmd_width_adapter:out_valid -> video_input_9_out_burst_adapter:sink0_valid
	wire  [130:0] video_input_9_out_cmd_width_adapter_src_data;              // video_input_9_out_cmd_width_adapter:out_data -> video_input_9_out_burst_adapter:sink0_data
	wire          video_input_9_out_cmd_width_adapter_src_ready;             // video_input_9_out_burst_adapter:sink0_ready -> video_input_9_out_cmd_width_adapter:out_ready
	wire   [21:0] video_input_9_out_cmd_width_adapter_src_channel;           // video_input_9_out_cmd_width_adapter:out_channel -> video_input_9_out_burst_adapter:sink0_channel
	wire          video_input_9_out_cmd_width_adapter_src_startofpacket;     // video_input_9_out_cmd_width_adapter:out_startofpacket -> video_input_9_out_burst_adapter:sink0_startofpacket
	wire          video_input_9_out_cmd_width_adapter_src_endofpacket;       // video_input_9_out_cmd_width_adapter:out_endofpacket -> video_input_9_out_burst_adapter:sink0_endofpacket
	wire          cmd_mux_011_src_valid;                                     // cmd_mux_011:src_valid -> video_input_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_011_src_data;                                      // cmd_mux_011:src_data -> video_input_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_011_src_ready;                                     // video_input_out_csr_cmd_width_adapter:in_ready -> cmd_mux_011:src_ready
	wire   [21:0] cmd_mux_011_src_channel;                                   // cmd_mux_011:src_channel -> video_input_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_011_src_startofpacket;                             // cmd_mux_011:src_startofpacket -> video_input_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_011_src_endofpacket;                               // cmd_mux_011:src_endofpacket -> video_input_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_out_csr_cmd_width_adapter_src_valid;           // video_input_out_csr_cmd_width_adapter:out_valid -> video_input_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_out_csr_cmd_width_adapter_src_data;            // video_input_out_csr_cmd_width_adapter:out_data -> video_input_out_csr_burst_adapter:sink0_data
	wire          video_input_out_csr_cmd_width_adapter_src_ready;           // video_input_out_csr_burst_adapter:sink0_ready -> video_input_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_out_csr_cmd_width_adapter_src_channel;         // video_input_out_csr_cmd_width_adapter:out_channel -> video_input_out_csr_burst_adapter:sink0_channel
	wire          video_input_out_csr_cmd_width_adapter_src_startofpacket;   // video_input_out_csr_cmd_width_adapter:out_startofpacket -> video_input_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_out_csr_cmd_width_adapter_src_endofpacket;     // video_input_out_csr_cmd_width_adapter:out_endofpacket -> video_input_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_012_src_valid;                                     // cmd_mux_012:src_valid -> video_input_0_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_012_src_data;                                      // cmd_mux_012:src_data -> video_input_0_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_012_src_ready;                                     // video_input_0_out_csr_cmd_width_adapter:in_ready -> cmd_mux_012:src_ready
	wire   [21:0] cmd_mux_012_src_channel;                                   // cmd_mux_012:src_channel -> video_input_0_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_012_src_startofpacket;                             // cmd_mux_012:src_startofpacket -> video_input_0_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_012_src_endofpacket;                               // cmd_mux_012:src_endofpacket -> video_input_0_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_0_out_csr_cmd_width_adapter_src_valid;         // video_input_0_out_csr_cmd_width_adapter:out_valid -> video_input_0_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_0_out_csr_cmd_width_adapter_src_data;          // video_input_0_out_csr_cmd_width_adapter:out_data -> video_input_0_out_csr_burst_adapter:sink0_data
	wire          video_input_0_out_csr_cmd_width_adapter_src_ready;         // video_input_0_out_csr_burst_adapter:sink0_ready -> video_input_0_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_0_out_csr_cmd_width_adapter_src_channel;       // video_input_0_out_csr_cmd_width_adapter:out_channel -> video_input_0_out_csr_burst_adapter:sink0_channel
	wire          video_input_0_out_csr_cmd_width_adapter_src_startofpacket; // video_input_0_out_csr_cmd_width_adapter:out_startofpacket -> video_input_0_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_0_out_csr_cmd_width_adapter_src_endofpacket;   // video_input_0_out_csr_cmd_width_adapter:out_endofpacket -> video_input_0_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_013_src_valid;                                     // cmd_mux_013:src_valid -> video_input_1_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_013_src_data;                                      // cmd_mux_013:src_data -> video_input_1_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_013_src_ready;                                     // video_input_1_out_csr_cmd_width_adapter:in_ready -> cmd_mux_013:src_ready
	wire   [21:0] cmd_mux_013_src_channel;                                   // cmd_mux_013:src_channel -> video_input_1_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_013_src_startofpacket;                             // cmd_mux_013:src_startofpacket -> video_input_1_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_013_src_endofpacket;                               // cmd_mux_013:src_endofpacket -> video_input_1_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_1_out_csr_cmd_width_adapter_src_valid;         // video_input_1_out_csr_cmd_width_adapter:out_valid -> video_input_1_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_1_out_csr_cmd_width_adapter_src_data;          // video_input_1_out_csr_cmd_width_adapter:out_data -> video_input_1_out_csr_burst_adapter:sink0_data
	wire          video_input_1_out_csr_cmd_width_adapter_src_ready;         // video_input_1_out_csr_burst_adapter:sink0_ready -> video_input_1_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_1_out_csr_cmd_width_adapter_src_channel;       // video_input_1_out_csr_cmd_width_adapter:out_channel -> video_input_1_out_csr_burst_adapter:sink0_channel
	wire          video_input_1_out_csr_cmd_width_adapter_src_startofpacket; // video_input_1_out_csr_cmd_width_adapter:out_startofpacket -> video_input_1_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_1_out_csr_cmd_width_adapter_src_endofpacket;   // video_input_1_out_csr_cmd_width_adapter:out_endofpacket -> video_input_1_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_014_src_valid;                                     // cmd_mux_014:src_valid -> video_input_2_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_014_src_data;                                      // cmd_mux_014:src_data -> video_input_2_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_014_src_ready;                                     // video_input_2_out_csr_cmd_width_adapter:in_ready -> cmd_mux_014:src_ready
	wire   [21:0] cmd_mux_014_src_channel;                                   // cmd_mux_014:src_channel -> video_input_2_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_014_src_startofpacket;                             // cmd_mux_014:src_startofpacket -> video_input_2_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_014_src_endofpacket;                               // cmd_mux_014:src_endofpacket -> video_input_2_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_2_out_csr_cmd_width_adapter_src_valid;         // video_input_2_out_csr_cmd_width_adapter:out_valid -> video_input_2_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_2_out_csr_cmd_width_adapter_src_data;          // video_input_2_out_csr_cmd_width_adapter:out_data -> video_input_2_out_csr_burst_adapter:sink0_data
	wire          video_input_2_out_csr_cmd_width_adapter_src_ready;         // video_input_2_out_csr_burst_adapter:sink0_ready -> video_input_2_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_2_out_csr_cmd_width_adapter_src_channel;       // video_input_2_out_csr_cmd_width_adapter:out_channel -> video_input_2_out_csr_burst_adapter:sink0_channel
	wire          video_input_2_out_csr_cmd_width_adapter_src_startofpacket; // video_input_2_out_csr_cmd_width_adapter:out_startofpacket -> video_input_2_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_2_out_csr_cmd_width_adapter_src_endofpacket;   // video_input_2_out_csr_cmd_width_adapter:out_endofpacket -> video_input_2_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_015_src_valid;                                     // cmd_mux_015:src_valid -> video_input_3_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_015_src_data;                                      // cmd_mux_015:src_data -> video_input_3_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_015_src_ready;                                     // video_input_3_out_csr_cmd_width_adapter:in_ready -> cmd_mux_015:src_ready
	wire   [21:0] cmd_mux_015_src_channel;                                   // cmd_mux_015:src_channel -> video_input_3_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_015_src_startofpacket;                             // cmd_mux_015:src_startofpacket -> video_input_3_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_015_src_endofpacket;                               // cmd_mux_015:src_endofpacket -> video_input_3_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_3_out_csr_cmd_width_adapter_src_valid;         // video_input_3_out_csr_cmd_width_adapter:out_valid -> video_input_3_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_3_out_csr_cmd_width_adapter_src_data;          // video_input_3_out_csr_cmd_width_adapter:out_data -> video_input_3_out_csr_burst_adapter:sink0_data
	wire          video_input_3_out_csr_cmd_width_adapter_src_ready;         // video_input_3_out_csr_burst_adapter:sink0_ready -> video_input_3_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_3_out_csr_cmd_width_adapter_src_channel;       // video_input_3_out_csr_cmd_width_adapter:out_channel -> video_input_3_out_csr_burst_adapter:sink0_channel
	wire          video_input_3_out_csr_cmd_width_adapter_src_startofpacket; // video_input_3_out_csr_cmd_width_adapter:out_startofpacket -> video_input_3_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_3_out_csr_cmd_width_adapter_src_endofpacket;   // video_input_3_out_csr_cmd_width_adapter:out_endofpacket -> video_input_3_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_016_src_valid;                                     // cmd_mux_016:src_valid -> video_input_4_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_016_src_data;                                      // cmd_mux_016:src_data -> video_input_4_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_016_src_ready;                                     // video_input_4_out_csr_cmd_width_adapter:in_ready -> cmd_mux_016:src_ready
	wire   [21:0] cmd_mux_016_src_channel;                                   // cmd_mux_016:src_channel -> video_input_4_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_016_src_startofpacket;                             // cmd_mux_016:src_startofpacket -> video_input_4_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_016_src_endofpacket;                               // cmd_mux_016:src_endofpacket -> video_input_4_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_4_out_csr_cmd_width_adapter_src_valid;         // video_input_4_out_csr_cmd_width_adapter:out_valid -> video_input_4_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_4_out_csr_cmd_width_adapter_src_data;          // video_input_4_out_csr_cmd_width_adapter:out_data -> video_input_4_out_csr_burst_adapter:sink0_data
	wire          video_input_4_out_csr_cmd_width_adapter_src_ready;         // video_input_4_out_csr_burst_adapter:sink0_ready -> video_input_4_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_4_out_csr_cmd_width_adapter_src_channel;       // video_input_4_out_csr_cmd_width_adapter:out_channel -> video_input_4_out_csr_burst_adapter:sink0_channel
	wire          video_input_4_out_csr_cmd_width_adapter_src_startofpacket; // video_input_4_out_csr_cmd_width_adapter:out_startofpacket -> video_input_4_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_4_out_csr_cmd_width_adapter_src_endofpacket;   // video_input_4_out_csr_cmd_width_adapter:out_endofpacket -> video_input_4_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_017_src_valid;                                     // cmd_mux_017:src_valid -> video_input_5_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_017_src_data;                                      // cmd_mux_017:src_data -> video_input_5_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_017_src_ready;                                     // video_input_5_out_csr_cmd_width_adapter:in_ready -> cmd_mux_017:src_ready
	wire   [21:0] cmd_mux_017_src_channel;                                   // cmd_mux_017:src_channel -> video_input_5_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_017_src_startofpacket;                             // cmd_mux_017:src_startofpacket -> video_input_5_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_017_src_endofpacket;                               // cmd_mux_017:src_endofpacket -> video_input_5_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_5_out_csr_cmd_width_adapter_src_valid;         // video_input_5_out_csr_cmd_width_adapter:out_valid -> video_input_5_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_5_out_csr_cmd_width_adapter_src_data;          // video_input_5_out_csr_cmd_width_adapter:out_data -> video_input_5_out_csr_burst_adapter:sink0_data
	wire          video_input_5_out_csr_cmd_width_adapter_src_ready;         // video_input_5_out_csr_burst_adapter:sink0_ready -> video_input_5_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_5_out_csr_cmd_width_adapter_src_channel;       // video_input_5_out_csr_cmd_width_adapter:out_channel -> video_input_5_out_csr_burst_adapter:sink0_channel
	wire          video_input_5_out_csr_cmd_width_adapter_src_startofpacket; // video_input_5_out_csr_cmd_width_adapter:out_startofpacket -> video_input_5_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_5_out_csr_cmd_width_adapter_src_endofpacket;   // video_input_5_out_csr_cmd_width_adapter:out_endofpacket -> video_input_5_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_018_src_valid;                                     // cmd_mux_018:src_valid -> video_input_6_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_018_src_data;                                      // cmd_mux_018:src_data -> video_input_6_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_018_src_ready;                                     // video_input_6_out_csr_cmd_width_adapter:in_ready -> cmd_mux_018:src_ready
	wire   [21:0] cmd_mux_018_src_channel;                                   // cmd_mux_018:src_channel -> video_input_6_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_018_src_startofpacket;                             // cmd_mux_018:src_startofpacket -> video_input_6_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_018_src_endofpacket;                               // cmd_mux_018:src_endofpacket -> video_input_6_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_6_out_csr_cmd_width_adapter_src_valid;         // video_input_6_out_csr_cmd_width_adapter:out_valid -> video_input_6_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_6_out_csr_cmd_width_adapter_src_data;          // video_input_6_out_csr_cmd_width_adapter:out_data -> video_input_6_out_csr_burst_adapter:sink0_data
	wire          video_input_6_out_csr_cmd_width_adapter_src_ready;         // video_input_6_out_csr_burst_adapter:sink0_ready -> video_input_6_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_6_out_csr_cmd_width_adapter_src_channel;       // video_input_6_out_csr_cmd_width_adapter:out_channel -> video_input_6_out_csr_burst_adapter:sink0_channel
	wire          video_input_6_out_csr_cmd_width_adapter_src_startofpacket; // video_input_6_out_csr_cmd_width_adapter:out_startofpacket -> video_input_6_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_6_out_csr_cmd_width_adapter_src_endofpacket;   // video_input_6_out_csr_cmd_width_adapter:out_endofpacket -> video_input_6_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_019_src_valid;                                     // cmd_mux_019:src_valid -> video_input_7_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_019_src_data;                                      // cmd_mux_019:src_data -> video_input_7_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_019_src_ready;                                     // video_input_7_out_csr_cmd_width_adapter:in_ready -> cmd_mux_019:src_ready
	wire   [21:0] cmd_mux_019_src_channel;                                   // cmd_mux_019:src_channel -> video_input_7_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_019_src_startofpacket;                             // cmd_mux_019:src_startofpacket -> video_input_7_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_019_src_endofpacket;                               // cmd_mux_019:src_endofpacket -> video_input_7_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_7_out_csr_cmd_width_adapter_src_valid;         // video_input_7_out_csr_cmd_width_adapter:out_valid -> video_input_7_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_7_out_csr_cmd_width_adapter_src_data;          // video_input_7_out_csr_cmd_width_adapter:out_data -> video_input_7_out_csr_burst_adapter:sink0_data
	wire          video_input_7_out_csr_cmd_width_adapter_src_ready;         // video_input_7_out_csr_burst_adapter:sink0_ready -> video_input_7_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_7_out_csr_cmd_width_adapter_src_channel;       // video_input_7_out_csr_cmd_width_adapter:out_channel -> video_input_7_out_csr_burst_adapter:sink0_channel
	wire          video_input_7_out_csr_cmd_width_adapter_src_startofpacket; // video_input_7_out_csr_cmd_width_adapter:out_startofpacket -> video_input_7_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_7_out_csr_cmd_width_adapter_src_endofpacket;   // video_input_7_out_csr_cmd_width_adapter:out_endofpacket -> video_input_7_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_020_src_valid;                                     // cmd_mux_020:src_valid -> video_input_8_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_020_src_data;                                      // cmd_mux_020:src_data -> video_input_8_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_020_src_ready;                                     // video_input_8_out_csr_cmd_width_adapter:in_ready -> cmd_mux_020:src_ready
	wire   [21:0] cmd_mux_020_src_channel;                                   // cmd_mux_020:src_channel -> video_input_8_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_020_src_startofpacket;                             // cmd_mux_020:src_startofpacket -> video_input_8_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_020_src_endofpacket;                               // cmd_mux_020:src_endofpacket -> video_input_8_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_8_out_csr_cmd_width_adapter_src_valid;         // video_input_8_out_csr_cmd_width_adapter:out_valid -> video_input_8_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_8_out_csr_cmd_width_adapter_src_data;          // video_input_8_out_csr_cmd_width_adapter:out_data -> video_input_8_out_csr_burst_adapter:sink0_data
	wire          video_input_8_out_csr_cmd_width_adapter_src_ready;         // video_input_8_out_csr_burst_adapter:sink0_ready -> video_input_8_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_8_out_csr_cmd_width_adapter_src_channel;       // video_input_8_out_csr_cmd_width_adapter:out_channel -> video_input_8_out_csr_burst_adapter:sink0_channel
	wire          video_input_8_out_csr_cmd_width_adapter_src_startofpacket; // video_input_8_out_csr_cmd_width_adapter:out_startofpacket -> video_input_8_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_8_out_csr_cmd_width_adapter_src_endofpacket;   // video_input_8_out_csr_cmd_width_adapter:out_endofpacket -> video_input_8_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_021_src_valid;                                     // cmd_mux_021:src_valid -> video_input_9_out_csr_cmd_width_adapter:in_valid
	wire  [166:0] cmd_mux_021_src_data;                                      // cmd_mux_021:src_data -> video_input_9_out_csr_cmd_width_adapter:in_data
	wire          cmd_mux_021_src_ready;                                     // video_input_9_out_csr_cmd_width_adapter:in_ready -> cmd_mux_021:src_ready
	wire   [21:0] cmd_mux_021_src_channel;                                   // cmd_mux_021:src_channel -> video_input_9_out_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_021_src_startofpacket;                             // cmd_mux_021:src_startofpacket -> video_input_9_out_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_021_src_endofpacket;                               // cmd_mux_021:src_endofpacket -> video_input_9_out_csr_cmd_width_adapter:in_endofpacket
	wire          video_input_9_out_csr_cmd_width_adapter_src_valid;         // video_input_9_out_csr_cmd_width_adapter:out_valid -> video_input_9_out_csr_burst_adapter:sink0_valid
	wire  [130:0] video_input_9_out_csr_cmd_width_adapter_src_data;          // video_input_9_out_csr_cmd_width_adapter:out_data -> video_input_9_out_csr_burst_adapter:sink0_data
	wire          video_input_9_out_csr_cmd_width_adapter_src_ready;         // video_input_9_out_csr_burst_adapter:sink0_ready -> video_input_9_out_csr_cmd_width_adapter:out_ready
	wire   [21:0] video_input_9_out_csr_cmd_width_adapter_src_channel;       // video_input_9_out_csr_cmd_width_adapter:out_channel -> video_input_9_out_csr_burst_adapter:sink0_channel
	wire          video_input_9_out_csr_cmd_width_adapter_src_startofpacket; // video_input_9_out_csr_cmd_width_adapter:out_startofpacket -> video_input_9_out_csr_burst_adapter:sink0_startofpacket
	wire          video_input_9_out_csr_cmd_width_adapter_src_endofpacket;   // video_input_9_out_csr_cmd_width_adapter:out_endofpacket -> video_input_9_out_csr_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                      // cmd_demux:src0_valid -> crosser:in_valid
	wire  [166:0] cmd_demux_src0_data;                                       // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                      // crosser:in_ready -> cmd_demux:src0_ready
	wire   [21:0] cmd_demux_src0_channel;                                    // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                              // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                         // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [166:0] crosser_out_data;                                          // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                         // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [21:0] crosser_out_channel;                                       // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                 // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                   // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                      // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [166:0] cmd_demux_src1_data;                                       // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                      // crosser_001:in_ready -> cmd_demux:src1_ready
	wire   [21:0] cmd_demux_src1_channel;                                    // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                              // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                     // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [166:0] crosser_001_out_data;                                      // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                     // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire   [21:0] crosser_001_out_channel;                                   // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                             // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                               // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                      // cmd_demux:src2_valid -> crosser_002:in_valid
	wire  [166:0] cmd_demux_src2_data;                                       // cmd_demux:src2_data -> crosser_002:in_data
	wire          cmd_demux_src2_ready;                                      // crosser_002:in_ready -> cmd_demux:src2_ready
	wire   [21:0] cmd_demux_src2_channel;                                    // cmd_demux:src2_channel -> crosser_002:in_channel
	wire          cmd_demux_src2_startofpacket;                              // cmd_demux:src2_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                // cmd_demux:src2_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                     // crosser_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [166:0] crosser_002_out_data;                                      // crosser_002:out_data -> cmd_mux_002:sink0_data
	wire          crosser_002_out_ready;                                     // cmd_mux_002:sink0_ready -> crosser_002:out_ready
	wire   [21:0] crosser_002_out_channel;                                   // crosser_002:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_002_out_startofpacket;                             // crosser_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                               // crosser_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                      // cmd_demux:src3_valid -> crosser_003:in_valid
	wire  [166:0] cmd_demux_src3_data;                                       // cmd_demux:src3_data -> crosser_003:in_data
	wire          cmd_demux_src3_ready;                                      // crosser_003:in_ready -> cmd_demux:src3_ready
	wire   [21:0] cmd_demux_src3_channel;                                    // cmd_demux:src3_channel -> crosser_003:in_channel
	wire          cmd_demux_src3_startofpacket;                              // cmd_demux:src3_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                // cmd_demux:src3_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                     // crosser_003:out_valid -> cmd_mux_003:sink0_valid
	wire  [166:0] crosser_003_out_data;                                      // crosser_003:out_data -> cmd_mux_003:sink0_data
	wire          crosser_003_out_ready;                                     // cmd_mux_003:sink0_ready -> crosser_003:out_ready
	wire   [21:0] crosser_003_out_channel;                                   // crosser_003:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_003_out_startofpacket;                             // crosser_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                               // crosser_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                      // cmd_demux:src4_valid -> crosser_004:in_valid
	wire  [166:0] cmd_demux_src4_data;                                       // cmd_demux:src4_data -> crosser_004:in_data
	wire          cmd_demux_src4_ready;                                      // crosser_004:in_ready -> cmd_demux:src4_ready
	wire   [21:0] cmd_demux_src4_channel;                                    // cmd_demux:src4_channel -> crosser_004:in_channel
	wire          cmd_demux_src4_startofpacket;                              // cmd_demux:src4_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                // cmd_demux:src4_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                     // crosser_004:out_valid -> cmd_mux_004:sink0_valid
	wire  [166:0] crosser_004_out_data;                                      // crosser_004:out_data -> cmd_mux_004:sink0_data
	wire          crosser_004_out_ready;                                     // cmd_mux_004:sink0_ready -> crosser_004:out_ready
	wire   [21:0] crosser_004_out_channel;                                   // crosser_004:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_004_out_startofpacket;                             // crosser_004:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                               // crosser_004:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                      // cmd_demux:src5_valid -> crosser_005:in_valid
	wire  [166:0] cmd_demux_src5_data;                                       // cmd_demux:src5_data -> crosser_005:in_data
	wire          cmd_demux_src5_ready;                                      // crosser_005:in_ready -> cmd_demux:src5_ready
	wire   [21:0] cmd_demux_src5_channel;                                    // cmd_demux:src5_channel -> crosser_005:in_channel
	wire          cmd_demux_src5_startofpacket;                              // cmd_demux:src5_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                // cmd_demux:src5_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                     // crosser_005:out_valid -> cmd_mux_005:sink0_valid
	wire  [166:0] crosser_005_out_data;                                      // crosser_005:out_data -> cmd_mux_005:sink0_data
	wire          crosser_005_out_ready;                                     // cmd_mux_005:sink0_ready -> crosser_005:out_ready
	wire   [21:0] crosser_005_out_channel;                                   // crosser_005:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_005_out_startofpacket;                             // crosser_005:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                               // crosser_005:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                      // cmd_demux:src6_valid -> crosser_006:in_valid
	wire  [166:0] cmd_demux_src6_data;                                       // cmd_demux:src6_data -> crosser_006:in_data
	wire          cmd_demux_src6_ready;                                      // crosser_006:in_ready -> cmd_demux:src6_ready
	wire   [21:0] cmd_demux_src6_channel;                                    // cmd_demux:src6_channel -> crosser_006:in_channel
	wire          cmd_demux_src6_startofpacket;                              // cmd_demux:src6_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                // cmd_demux:src6_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                     // crosser_006:out_valid -> cmd_mux_006:sink0_valid
	wire  [166:0] crosser_006_out_data;                                      // crosser_006:out_data -> cmd_mux_006:sink0_data
	wire          crosser_006_out_ready;                                     // cmd_mux_006:sink0_ready -> crosser_006:out_ready
	wire   [21:0] crosser_006_out_channel;                                   // crosser_006:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_006_out_startofpacket;                             // crosser_006:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                               // crosser_006:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                      // cmd_demux:src7_valid -> crosser_007:in_valid
	wire  [166:0] cmd_demux_src7_data;                                       // cmd_demux:src7_data -> crosser_007:in_data
	wire          cmd_demux_src7_ready;                                      // crosser_007:in_ready -> cmd_demux:src7_ready
	wire   [21:0] cmd_demux_src7_channel;                                    // cmd_demux:src7_channel -> crosser_007:in_channel
	wire          cmd_demux_src7_startofpacket;                              // cmd_demux:src7_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                // cmd_demux:src7_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                     // crosser_007:out_valid -> cmd_mux_007:sink0_valid
	wire  [166:0] crosser_007_out_data;                                      // crosser_007:out_data -> cmd_mux_007:sink0_data
	wire          crosser_007_out_ready;                                     // cmd_mux_007:sink0_ready -> crosser_007:out_ready
	wire   [21:0] crosser_007_out_channel;                                   // crosser_007:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_007_out_startofpacket;                             // crosser_007:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                               // crosser_007:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                      // cmd_demux:src8_valid -> crosser_008:in_valid
	wire  [166:0] cmd_demux_src8_data;                                       // cmd_demux:src8_data -> crosser_008:in_data
	wire          cmd_demux_src8_ready;                                      // crosser_008:in_ready -> cmd_demux:src8_ready
	wire   [21:0] cmd_demux_src8_channel;                                    // cmd_demux:src8_channel -> crosser_008:in_channel
	wire          cmd_demux_src8_startofpacket;                              // cmd_demux:src8_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                // cmd_demux:src8_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                     // crosser_008:out_valid -> cmd_mux_008:sink0_valid
	wire  [166:0] crosser_008_out_data;                                      // crosser_008:out_data -> cmd_mux_008:sink0_data
	wire          crosser_008_out_ready;                                     // cmd_mux_008:sink0_ready -> crosser_008:out_ready
	wire   [21:0] crosser_008_out_channel;                                   // crosser_008:out_channel -> cmd_mux_008:sink0_channel
	wire          crosser_008_out_startofpacket;                             // crosser_008:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          crosser_008_out_endofpacket;                               // crosser_008:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                      // cmd_demux:src9_valid -> crosser_009:in_valid
	wire  [166:0] cmd_demux_src9_data;                                       // cmd_demux:src9_data -> crosser_009:in_data
	wire          cmd_demux_src9_ready;                                      // crosser_009:in_ready -> cmd_demux:src9_ready
	wire   [21:0] cmd_demux_src9_channel;                                    // cmd_demux:src9_channel -> crosser_009:in_channel
	wire          cmd_demux_src9_startofpacket;                              // cmd_demux:src9_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                // cmd_demux:src9_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                     // crosser_009:out_valid -> cmd_mux_009:sink0_valid
	wire  [166:0] crosser_009_out_data;                                      // crosser_009:out_data -> cmd_mux_009:sink0_data
	wire          crosser_009_out_ready;                                     // cmd_mux_009:sink0_ready -> crosser_009:out_ready
	wire   [21:0] crosser_009_out_channel;                                   // crosser_009:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_009_out_startofpacket;                             // crosser_009:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_009_out_endofpacket;                               // crosser_009:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                     // cmd_demux:src10_valid -> crosser_010:in_valid
	wire  [166:0] cmd_demux_src10_data;                                      // cmd_demux:src10_data -> crosser_010:in_data
	wire          cmd_demux_src10_ready;                                     // crosser_010:in_ready -> cmd_demux:src10_ready
	wire   [21:0] cmd_demux_src10_channel;                                   // cmd_demux:src10_channel -> crosser_010:in_channel
	wire          cmd_demux_src10_startofpacket;                             // cmd_demux:src10_startofpacket -> crosser_010:in_startofpacket
	wire          cmd_demux_src10_endofpacket;                               // cmd_demux:src10_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                     // crosser_010:out_valid -> cmd_mux_010:sink0_valid
	wire  [166:0] crosser_010_out_data;                                      // crosser_010:out_data -> cmd_mux_010:sink0_data
	wire          crosser_010_out_ready;                                     // cmd_mux_010:sink0_ready -> crosser_010:out_ready
	wire   [21:0] crosser_010_out_channel;                                   // crosser_010:out_channel -> cmd_mux_010:sink0_channel
	wire          crosser_010_out_startofpacket;                             // crosser_010:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          crosser_010_out_endofpacket;                               // crosser_010:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                     // cmd_demux:src11_valid -> crosser_011:in_valid
	wire  [166:0] cmd_demux_src11_data;                                      // cmd_demux:src11_data -> crosser_011:in_data
	wire          cmd_demux_src11_ready;                                     // crosser_011:in_ready -> cmd_demux:src11_ready
	wire   [21:0] cmd_demux_src11_channel;                                   // cmd_demux:src11_channel -> crosser_011:in_channel
	wire          cmd_demux_src11_startofpacket;                             // cmd_demux:src11_startofpacket -> crosser_011:in_startofpacket
	wire          cmd_demux_src11_endofpacket;                               // cmd_demux:src11_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                     // crosser_011:out_valid -> cmd_mux_011:sink0_valid
	wire  [166:0] crosser_011_out_data;                                      // crosser_011:out_data -> cmd_mux_011:sink0_data
	wire          crosser_011_out_ready;                                     // cmd_mux_011:sink0_ready -> crosser_011:out_ready
	wire   [21:0] crosser_011_out_channel;                                   // crosser_011:out_channel -> cmd_mux_011:sink0_channel
	wire          crosser_011_out_startofpacket;                             // crosser_011:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          crosser_011_out_endofpacket;                               // crosser_011:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                     // cmd_demux:src12_valid -> crosser_012:in_valid
	wire  [166:0] cmd_demux_src12_data;                                      // cmd_demux:src12_data -> crosser_012:in_data
	wire          cmd_demux_src12_ready;                                     // crosser_012:in_ready -> cmd_demux:src12_ready
	wire   [21:0] cmd_demux_src12_channel;                                   // cmd_demux:src12_channel -> crosser_012:in_channel
	wire          cmd_demux_src12_startofpacket;                             // cmd_demux:src12_startofpacket -> crosser_012:in_startofpacket
	wire          cmd_demux_src12_endofpacket;                               // cmd_demux:src12_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                     // crosser_012:out_valid -> cmd_mux_012:sink0_valid
	wire  [166:0] crosser_012_out_data;                                      // crosser_012:out_data -> cmd_mux_012:sink0_data
	wire          crosser_012_out_ready;                                     // cmd_mux_012:sink0_ready -> crosser_012:out_ready
	wire   [21:0] crosser_012_out_channel;                                   // crosser_012:out_channel -> cmd_mux_012:sink0_channel
	wire          crosser_012_out_startofpacket;                             // crosser_012:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          crosser_012_out_endofpacket;                               // crosser_012:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                     // cmd_demux:src13_valid -> crosser_013:in_valid
	wire  [166:0] cmd_demux_src13_data;                                      // cmd_demux:src13_data -> crosser_013:in_data
	wire          cmd_demux_src13_ready;                                     // crosser_013:in_ready -> cmd_demux:src13_ready
	wire   [21:0] cmd_demux_src13_channel;                                   // cmd_demux:src13_channel -> crosser_013:in_channel
	wire          cmd_demux_src13_startofpacket;                             // cmd_demux:src13_startofpacket -> crosser_013:in_startofpacket
	wire          cmd_demux_src13_endofpacket;                               // cmd_demux:src13_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                     // crosser_013:out_valid -> cmd_mux_013:sink0_valid
	wire  [166:0] crosser_013_out_data;                                      // crosser_013:out_data -> cmd_mux_013:sink0_data
	wire          crosser_013_out_ready;                                     // cmd_mux_013:sink0_ready -> crosser_013:out_ready
	wire   [21:0] crosser_013_out_channel;                                   // crosser_013:out_channel -> cmd_mux_013:sink0_channel
	wire          crosser_013_out_startofpacket;                             // crosser_013:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                               // crosser_013:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                     // cmd_demux:src14_valid -> crosser_014:in_valid
	wire  [166:0] cmd_demux_src14_data;                                      // cmd_demux:src14_data -> crosser_014:in_data
	wire          cmd_demux_src14_ready;                                     // crosser_014:in_ready -> cmd_demux:src14_ready
	wire   [21:0] cmd_demux_src14_channel;                                   // cmd_demux:src14_channel -> crosser_014:in_channel
	wire          cmd_demux_src14_startofpacket;                             // cmd_demux:src14_startofpacket -> crosser_014:in_startofpacket
	wire          cmd_demux_src14_endofpacket;                               // cmd_demux:src14_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                     // crosser_014:out_valid -> cmd_mux_014:sink0_valid
	wire  [166:0] crosser_014_out_data;                                      // crosser_014:out_data -> cmd_mux_014:sink0_data
	wire          crosser_014_out_ready;                                     // cmd_mux_014:sink0_ready -> crosser_014:out_ready
	wire   [21:0] crosser_014_out_channel;                                   // crosser_014:out_channel -> cmd_mux_014:sink0_channel
	wire          crosser_014_out_startofpacket;                             // crosser_014:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          crosser_014_out_endofpacket;                               // crosser_014:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                     // cmd_demux:src15_valid -> crosser_015:in_valid
	wire  [166:0] cmd_demux_src15_data;                                      // cmd_demux:src15_data -> crosser_015:in_data
	wire          cmd_demux_src15_ready;                                     // crosser_015:in_ready -> cmd_demux:src15_ready
	wire   [21:0] cmd_demux_src15_channel;                                   // cmd_demux:src15_channel -> crosser_015:in_channel
	wire          cmd_demux_src15_startofpacket;                             // cmd_demux:src15_startofpacket -> crosser_015:in_startofpacket
	wire          cmd_demux_src15_endofpacket;                               // cmd_demux:src15_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                     // crosser_015:out_valid -> cmd_mux_015:sink0_valid
	wire  [166:0] crosser_015_out_data;                                      // crosser_015:out_data -> cmd_mux_015:sink0_data
	wire          crosser_015_out_ready;                                     // cmd_mux_015:sink0_ready -> crosser_015:out_ready
	wire   [21:0] crosser_015_out_channel;                                   // crosser_015:out_channel -> cmd_mux_015:sink0_channel
	wire          crosser_015_out_startofpacket;                             // crosser_015:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          crosser_015_out_endofpacket;                               // crosser_015:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                     // cmd_demux:src16_valid -> crosser_016:in_valid
	wire  [166:0] cmd_demux_src16_data;                                      // cmd_demux:src16_data -> crosser_016:in_data
	wire          cmd_demux_src16_ready;                                     // crosser_016:in_ready -> cmd_demux:src16_ready
	wire   [21:0] cmd_demux_src16_channel;                                   // cmd_demux:src16_channel -> crosser_016:in_channel
	wire          cmd_demux_src16_startofpacket;                             // cmd_demux:src16_startofpacket -> crosser_016:in_startofpacket
	wire          cmd_demux_src16_endofpacket;                               // cmd_demux:src16_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                     // crosser_016:out_valid -> cmd_mux_016:sink0_valid
	wire  [166:0] crosser_016_out_data;                                      // crosser_016:out_data -> cmd_mux_016:sink0_data
	wire          crosser_016_out_ready;                                     // cmd_mux_016:sink0_ready -> crosser_016:out_ready
	wire   [21:0] crosser_016_out_channel;                                   // crosser_016:out_channel -> cmd_mux_016:sink0_channel
	wire          crosser_016_out_startofpacket;                             // crosser_016:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          crosser_016_out_endofpacket;                               // crosser_016:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                     // cmd_demux:src17_valid -> crosser_017:in_valid
	wire  [166:0] cmd_demux_src17_data;                                      // cmd_demux:src17_data -> crosser_017:in_data
	wire          cmd_demux_src17_ready;                                     // crosser_017:in_ready -> cmd_demux:src17_ready
	wire   [21:0] cmd_demux_src17_channel;                                   // cmd_demux:src17_channel -> crosser_017:in_channel
	wire          cmd_demux_src17_startofpacket;                             // cmd_demux:src17_startofpacket -> crosser_017:in_startofpacket
	wire          cmd_demux_src17_endofpacket;                               // cmd_demux:src17_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                     // crosser_017:out_valid -> cmd_mux_017:sink0_valid
	wire  [166:0] crosser_017_out_data;                                      // crosser_017:out_data -> cmd_mux_017:sink0_data
	wire          crosser_017_out_ready;                                     // cmd_mux_017:sink0_ready -> crosser_017:out_ready
	wire   [21:0] crosser_017_out_channel;                                   // crosser_017:out_channel -> cmd_mux_017:sink0_channel
	wire          crosser_017_out_startofpacket;                             // crosser_017:out_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          crosser_017_out_endofpacket;                               // crosser_017:out_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                     // cmd_demux:src18_valid -> crosser_018:in_valid
	wire  [166:0] cmd_demux_src18_data;                                      // cmd_demux:src18_data -> crosser_018:in_data
	wire          cmd_demux_src18_ready;                                     // crosser_018:in_ready -> cmd_demux:src18_ready
	wire   [21:0] cmd_demux_src18_channel;                                   // cmd_demux:src18_channel -> crosser_018:in_channel
	wire          cmd_demux_src18_startofpacket;                             // cmd_demux:src18_startofpacket -> crosser_018:in_startofpacket
	wire          cmd_demux_src18_endofpacket;                               // cmd_demux:src18_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                     // crosser_018:out_valid -> cmd_mux_018:sink0_valid
	wire  [166:0] crosser_018_out_data;                                      // crosser_018:out_data -> cmd_mux_018:sink0_data
	wire          crosser_018_out_ready;                                     // cmd_mux_018:sink0_ready -> crosser_018:out_ready
	wire   [21:0] crosser_018_out_channel;                                   // crosser_018:out_channel -> cmd_mux_018:sink0_channel
	wire          crosser_018_out_startofpacket;                             // crosser_018:out_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          crosser_018_out_endofpacket;                               // crosser_018:out_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                     // cmd_demux:src19_valid -> crosser_019:in_valid
	wire  [166:0] cmd_demux_src19_data;                                      // cmd_demux:src19_data -> crosser_019:in_data
	wire          cmd_demux_src19_ready;                                     // crosser_019:in_ready -> cmd_demux:src19_ready
	wire   [21:0] cmd_demux_src19_channel;                                   // cmd_demux:src19_channel -> crosser_019:in_channel
	wire          cmd_demux_src19_startofpacket;                             // cmd_demux:src19_startofpacket -> crosser_019:in_startofpacket
	wire          cmd_demux_src19_endofpacket;                               // cmd_demux:src19_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                     // crosser_019:out_valid -> cmd_mux_019:sink0_valid
	wire  [166:0] crosser_019_out_data;                                      // crosser_019:out_data -> cmd_mux_019:sink0_data
	wire          crosser_019_out_ready;                                     // cmd_mux_019:sink0_ready -> crosser_019:out_ready
	wire   [21:0] crosser_019_out_channel;                                   // crosser_019:out_channel -> cmd_mux_019:sink0_channel
	wire          crosser_019_out_startofpacket;                             // crosser_019:out_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          crosser_019_out_endofpacket;                               // crosser_019:out_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                     // cmd_demux:src20_valid -> crosser_020:in_valid
	wire  [166:0] cmd_demux_src20_data;                                      // cmd_demux:src20_data -> crosser_020:in_data
	wire          cmd_demux_src20_ready;                                     // crosser_020:in_ready -> cmd_demux:src20_ready
	wire   [21:0] cmd_demux_src20_channel;                                   // cmd_demux:src20_channel -> crosser_020:in_channel
	wire          cmd_demux_src20_startofpacket;                             // cmd_demux:src20_startofpacket -> crosser_020:in_startofpacket
	wire          cmd_demux_src20_endofpacket;                               // cmd_demux:src20_endofpacket -> crosser_020:in_endofpacket
	wire          crosser_020_out_valid;                                     // crosser_020:out_valid -> cmd_mux_020:sink0_valid
	wire  [166:0] crosser_020_out_data;                                      // crosser_020:out_data -> cmd_mux_020:sink0_data
	wire          crosser_020_out_ready;                                     // cmd_mux_020:sink0_ready -> crosser_020:out_ready
	wire   [21:0] crosser_020_out_channel;                                   // crosser_020:out_channel -> cmd_mux_020:sink0_channel
	wire          crosser_020_out_startofpacket;                             // crosser_020:out_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          crosser_020_out_endofpacket;                               // crosser_020:out_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                     // cmd_demux:src21_valid -> crosser_021:in_valid
	wire  [166:0] cmd_demux_src21_data;                                      // cmd_demux:src21_data -> crosser_021:in_data
	wire          cmd_demux_src21_ready;                                     // crosser_021:in_ready -> cmd_demux:src21_ready
	wire   [21:0] cmd_demux_src21_channel;                                   // cmd_demux:src21_channel -> crosser_021:in_channel
	wire          cmd_demux_src21_startofpacket;                             // cmd_demux:src21_startofpacket -> crosser_021:in_startofpacket
	wire          cmd_demux_src21_endofpacket;                               // cmd_demux:src21_endofpacket -> crosser_021:in_endofpacket
	wire          crosser_021_out_valid;                                     // crosser_021:out_valid -> cmd_mux_021:sink0_valid
	wire  [166:0] crosser_021_out_data;                                      // crosser_021:out_data -> cmd_mux_021:sink0_data
	wire          crosser_021_out_ready;                                     // cmd_mux_021:sink0_ready -> crosser_021:out_ready
	wire   [21:0] crosser_021_out_channel;                                   // crosser_021:out_channel -> cmd_mux_021:sink0_channel
	wire          crosser_021_out_startofpacket;                             // crosser_021:out_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          crosser_021_out_endofpacket;                               // crosser_021:out_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                  // cmd_demux_001:src0_valid -> crosser_022:in_valid
	wire  [166:0] cmd_demux_001_src0_data;                                   // cmd_demux_001:src0_data -> crosser_022:in_data
	wire          cmd_demux_001_src0_ready;                                  // crosser_022:in_ready -> cmd_demux_001:src0_ready
	wire   [21:0] cmd_demux_001_src0_channel;                                // cmd_demux_001:src0_channel -> crosser_022:in_channel
	wire          cmd_demux_001_src0_startofpacket;                          // cmd_demux_001:src0_startofpacket -> crosser_022:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                            // cmd_demux_001:src0_endofpacket -> crosser_022:in_endofpacket
	wire          crosser_022_out_valid;                                     // crosser_022:out_valid -> cmd_mux:sink1_valid
	wire  [166:0] crosser_022_out_data;                                      // crosser_022:out_data -> cmd_mux:sink1_data
	wire          crosser_022_out_ready;                                     // cmd_mux:sink1_ready -> crosser_022:out_ready
	wire   [21:0] crosser_022_out_channel;                                   // crosser_022:out_channel -> cmd_mux:sink1_channel
	wire          crosser_022_out_startofpacket;                             // crosser_022:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_022_out_endofpacket;                               // crosser_022:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                  // cmd_demux_001:src1_valid -> crosser_023:in_valid
	wire  [166:0] cmd_demux_001_src1_data;                                   // cmd_demux_001:src1_data -> crosser_023:in_data
	wire          cmd_demux_001_src1_ready;                                  // crosser_023:in_ready -> cmd_demux_001:src1_ready
	wire   [21:0] cmd_demux_001_src1_channel;                                // cmd_demux_001:src1_channel -> crosser_023:in_channel
	wire          cmd_demux_001_src1_startofpacket;                          // cmd_demux_001:src1_startofpacket -> crosser_023:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                            // cmd_demux_001:src1_endofpacket -> crosser_023:in_endofpacket
	wire          crosser_023_out_valid;                                     // crosser_023:out_valid -> cmd_mux_001:sink1_valid
	wire  [166:0] crosser_023_out_data;                                      // crosser_023:out_data -> cmd_mux_001:sink1_data
	wire          crosser_023_out_ready;                                     // cmd_mux_001:sink1_ready -> crosser_023:out_ready
	wire   [21:0] crosser_023_out_channel;                                   // crosser_023:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_023_out_startofpacket;                             // crosser_023:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_023_out_endofpacket;                               // crosser_023:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                  // cmd_demux_001:src2_valid -> crosser_024:in_valid
	wire  [166:0] cmd_demux_001_src2_data;                                   // cmd_demux_001:src2_data -> crosser_024:in_data
	wire          cmd_demux_001_src2_ready;                                  // crosser_024:in_ready -> cmd_demux_001:src2_ready
	wire   [21:0] cmd_demux_001_src2_channel;                                // cmd_demux_001:src2_channel -> crosser_024:in_channel
	wire          cmd_demux_001_src2_startofpacket;                          // cmd_demux_001:src2_startofpacket -> crosser_024:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                            // cmd_demux_001:src2_endofpacket -> crosser_024:in_endofpacket
	wire          crosser_024_out_valid;                                     // crosser_024:out_valid -> cmd_mux_002:sink1_valid
	wire  [166:0] crosser_024_out_data;                                      // crosser_024:out_data -> cmd_mux_002:sink1_data
	wire          crosser_024_out_ready;                                     // cmd_mux_002:sink1_ready -> crosser_024:out_ready
	wire   [21:0] crosser_024_out_channel;                                   // crosser_024:out_channel -> cmd_mux_002:sink1_channel
	wire          crosser_024_out_startofpacket;                             // crosser_024:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          crosser_024_out_endofpacket;                               // crosser_024:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                  // cmd_demux_001:src3_valid -> crosser_025:in_valid
	wire  [166:0] cmd_demux_001_src3_data;                                   // cmd_demux_001:src3_data -> crosser_025:in_data
	wire          cmd_demux_001_src3_ready;                                  // crosser_025:in_ready -> cmd_demux_001:src3_ready
	wire   [21:0] cmd_demux_001_src3_channel;                                // cmd_demux_001:src3_channel -> crosser_025:in_channel
	wire          cmd_demux_001_src3_startofpacket;                          // cmd_demux_001:src3_startofpacket -> crosser_025:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                            // cmd_demux_001:src3_endofpacket -> crosser_025:in_endofpacket
	wire          crosser_025_out_valid;                                     // crosser_025:out_valid -> cmd_mux_003:sink1_valid
	wire  [166:0] crosser_025_out_data;                                      // crosser_025:out_data -> cmd_mux_003:sink1_data
	wire          crosser_025_out_ready;                                     // cmd_mux_003:sink1_ready -> crosser_025:out_ready
	wire   [21:0] crosser_025_out_channel;                                   // crosser_025:out_channel -> cmd_mux_003:sink1_channel
	wire          crosser_025_out_startofpacket;                             // crosser_025:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          crosser_025_out_endofpacket;                               // crosser_025:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                  // cmd_demux_001:src4_valid -> crosser_026:in_valid
	wire  [166:0] cmd_demux_001_src4_data;                                   // cmd_demux_001:src4_data -> crosser_026:in_data
	wire          cmd_demux_001_src4_ready;                                  // crosser_026:in_ready -> cmd_demux_001:src4_ready
	wire   [21:0] cmd_demux_001_src4_channel;                                // cmd_demux_001:src4_channel -> crosser_026:in_channel
	wire          cmd_demux_001_src4_startofpacket;                          // cmd_demux_001:src4_startofpacket -> crosser_026:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                            // cmd_demux_001:src4_endofpacket -> crosser_026:in_endofpacket
	wire          crosser_026_out_valid;                                     // crosser_026:out_valid -> cmd_mux_004:sink1_valid
	wire  [166:0] crosser_026_out_data;                                      // crosser_026:out_data -> cmd_mux_004:sink1_data
	wire          crosser_026_out_ready;                                     // cmd_mux_004:sink1_ready -> crosser_026:out_ready
	wire   [21:0] crosser_026_out_channel;                                   // crosser_026:out_channel -> cmd_mux_004:sink1_channel
	wire          crosser_026_out_startofpacket;                             // crosser_026:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          crosser_026_out_endofpacket;                               // crosser_026:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                  // cmd_demux_001:src5_valid -> crosser_027:in_valid
	wire  [166:0] cmd_demux_001_src5_data;                                   // cmd_demux_001:src5_data -> crosser_027:in_data
	wire          cmd_demux_001_src5_ready;                                  // crosser_027:in_ready -> cmd_demux_001:src5_ready
	wire   [21:0] cmd_demux_001_src5_channel;                                // cmd_demux_001:src5_channel -> crosser_027:in_channel
	wire          cmd_demux_001_src5_startofpacket;                          // cmd_demux_001:src5_startofpacket -> crosser_027:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                            // cmd_demux_001:src5_endofpacket -> crosser_027:in_endofpacket
	wire          crosser_027_out_valid;                                     // crosser_027:out_valid -> cmd_mux_005:sink1_valid
	wire  [166:0] crosser_027_out_data;                                      // crosser_027:out_data -> cmd_mux_005:sink1_data
	wire          crosser_027_out_ready;                                     // cmd_mux_005:sink1_ready -> crosser_027:out_ready
	wire   [21:0] crosser_027_out_channel;                                   // crosser_027:out_channel -> cmd_mux_005:sink1_channel
	wire          crosser_027_out_startofpacket;                             // crosser_027:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          crosser_027_out_endofpacket;                               // crosser_027:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                  // cmd_demux_001:src6_valid -> crosser_028:in_valid
	wire  [166:0] cmd_demux_001_src6_data;                                   // cmd_demux_001:src6_data -> crosser_028:in_data
	wire          cmd_demux_001_src6_ready;                                  // crosser_028:in_ready -> cmd_demux_001:src6_ready
	wire   [21:0] cmd_demux_001_src6_channel;                                // cmd_demux_001:src6_channel -> crosser_028:in_channel
	wire          cmd_demux_001_src6_startofpacket;                          // cmd_demux_001:src6_startofpacket -> crosser_028:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                            // cmd_demux_001:src6_endofpacket -> crosser_028:in_endofpacket
	wire          crosser_028_out_valid;                                     // crosser_028:out_valid -> cmd_mux_006:sink1_valid
	wire  [166:0] crosser_028_out_data;                                      // crosser_028:out_data -> cmd_mux_006:sink1_data
	wire          crosser_028_out_ready;                                     // cmd_mux_006:sink1_ready -> crosser_028:out_ready
	wire   [21:0] crosser_028_out_channel;                                   // crosser_028:out_channel -> cmd_mux_006:sink1_channel
	wire          crosser_028_out_startofpacket;                             // crosser_028:out_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          crosser_028_out_endofpacket;                               // crosser_028:out_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                  // cmd_demux_001:src7_valid -> crosser_029:in_valid
	wire  [166:0] cmd_demux_001_src7_data;                                   // cmd_demux_001:src7_data -> crosser_029:in_data
	wire          cmd_demux_001_src7_ready;                                  // crosser_029:in_ready -> cmd_demux_001:src7_ready
	wire   [21:0] cmd_demux_001_src7_channel;                                // cmd_demux_001:src7_channel -> crosser_029:in_channel
	wire          cmd_demux_001_src7_startofpacket;                          // cmd_demux_001:src7_startofpacket -> crosser_029:in_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                            // cmd_demux_001:src7_endofpacket -> crosser_029:in_endofpacket
	wire          crosser_029_out_valid;                                     // crosser_029:out_valid -> cmd_mux_007:sink1_valid
	wire  [166:0] crosser_029_out_data;                                      // crosser_029:out_data -> cmd_mux_007:sink1_data
	wire          crosser_029_out_ready;                                     // cmd_mux_007:sink1_ready -> crosser_029:out_ready
	wire   [21:0] crosser_029_out_channel;                                   // crosser_029:out_channel -> cmd_mux_007:sink1_channel
	wire          crosser_029_out_startofpacket;                             // crosser_029:out_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          crosser_029_out_endofpacket;                               // crosser_029:out_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                  // cmd_demux_001:src8_valid -> crosser_030:in_valid
	wire  [166:0] cmd_demux_001_src8_data;                                   // cmd_demux_001:src8_data -> crosser_030:in_data
	wire          cmd_demux_001_src8_ready;                                  // crosser_030:in_ready -> cmd_demux_001:src8_ready
	wire   [21:0] cmd_demux_001_src8_channel;                                // cmd_demux_001:src8_channel -> crosser_030:in_channel
	wire          cmd_demux_001_src8_startofpacket;                          // cmd_demux_001:src8_startofpacket -> crosser_030:in_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                            // cmd_demux_001:src8_endofpacket -> crosser_030:in_endofpacket
	wire          crosser_030_out_valid;                                     // crosser_030:out_valid -> cmd_mux_008:sink1_valid
	wire  [166:0] crosser_030_out_data;                                      // crosser_030:out_data -> cmd_mux_008:sink1_data
	wire          crosser_030_out_ready;                                     // cmd_mux_008:sink1_ready -> crosser_030:out_ready
	wire   [21:0] crosser_030_out_channel;                                   // crosser_030:out_channel -> cmd_mux_008:sink1_channel
	wire          crosser_030_out_startofpacket;                             // crosser_030:out_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          crosser_030_out_endofpacket;                               // crosser_030:out_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                  // cmd_demux_001:src9_valid -> crosser_031:in_valid
	wire  [166:0] cmd_demux_001_src9_data;                                   // cmd_demux_001:src9_data -> crosser_031:in_data
	wire          cmd_demux_001_src9_ready;                                  // crosser_031:in_ready -> cmd_demux_001:src9_ready
	wire   [21:0] cmd_demux_001_src9_channel;                                // cmd_demux_001:src9_channel -> crosser_031:in_channel
	wire          cmd_demux_001_src9_startofpacket;                          // cmd_demux_001:src9_startofpacket -> crosser_031:in_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                            // cmd_demux_001:src9_endofpacket -> crosser_031:in_endofpacket
	wire          crosser_031_out_valid;                                     // crosser_031:out_valid -> cmd_mux_009:sink1_valid
	wire  [166:0] crosser_031_out_data;                                      // crosser_031:out_data -> cmd_mux_009:sink1_data
	wire          crosser_031_out_ready;                                     // cmd_mux_009:sink1_ready -> crosser_031:out_ready
	wire   [21:0] crosser_031_out_channel;                                   // crosser_031:out_channel -> cmd_mux_009:sink1_channel
	wire          crosser_031_out_startofpacket;                             // crosser_031:out_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          crosser_031_out_endofpacket;                               // crosser_031:out_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                 // cmd_demux_001:src10_valid -> crosser_032:in_valid
	wire  [166:0] cmd_demux_001_src10_data;                                  // cmd_demux_001:src10_data -> crosser_032:in_data
	wire          cmd_demux_001_src10_ready;                                 // crosser_032:in_ready -> cmd_demux_001:src10_ready
	wire   [21:0] cmd_demux_001_src10_channel;                               // cmd_demux_001:src10_channel -> crosser_032:in_channel
	wire          cmd_demux_001_src10_startofpacket;                         // cmd_demux_001:src10_startofpacket -> crosser_032:in_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                           // cmd_demux_001:src10_endofpacket -> crosser_032:in_endofpacket
	wire          crosser_032_out_valid;                                     // crosser_032:out_valid -> cmd_mux_010:sink1_valid
	wire  [166:0] crosser_032_out_data;                                      // crosser_032:out_data -> cmd_mux_010:sink1_data
	wire          crosser_032_out_ready;                                     // cmd_mux_010:sink1_ready -> crosser_032:out_ready
	wire   [21:0] crosser_032_out_channel;                                   // crosser_032:out_channel -> cmd_mux_010:sink1_channel
	wire          crosser_032_out_startofpacket;                             // crosser_032:out_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          crosser_032_out_endofpacket;                               // crosser_032:out_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                 // cmd_demux_001:src11_valid -> crosser_033:in_valid
	wire  [166:0] cmd_demux_001_src11_data;                                  // cmd_demux_001:src11_data -> crosser_033:in_data
	wire          cmd_demux_001_src11_ready;                                 // crosser_033:in_ready -> cmd_demux_001:src11_ready
	wire   [21:0] cmd_demux_001_src11_channel;                               // cmd_demux_001:src11_channel -> crosser_033:in_channel
	wire          cmd_demux_001_src11_startofpacket;                         // cmd_demux_001:src11_startofpacket -> crosser_033:in_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                           // cmd_demux_001:src11_endofpacket -> crosser_033:in_endofpacket
	wire          crosser_033_out_valid;                                     // crosser_033:out_valid -> cmd_mux_011:sink1_valid
	wire  [166:0] crosser_033_out_data;                                      // crosser_033:out_data -> cmd_mux_011:sink1_data
	wire          crosser_033_out_ready;                                     // cmd_mux_011:sink1_ready -> crosser_033:out_ready
	wire   [21:0] crosser_033_out_channel;                                   // crosser_033:out_channel -> cmd_mux_011:sink1_channel
	wire          crosser_033_out_startofpacket;                             // crosser_033:out_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          crosser_033_out_endofpacket;                               // crosser_033:out_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                 // cmd_demux_001:src12_valid -> crosser_034:in_valid
	wire  [166:0] cmd_demux_001_src12_data;                                  // cmd_demux_001:src12_data -> crosser_034:in_data
	wire          cmd_demux_001_src12_ready;                                 // crosser_034:in_ready -> cmd_demux_001:src12_ready
	wire   [21:0] cmd_demux_001_src12_channel;                               // cmd_demux_001:src12_channel -> crosser_034:in_channel
	wire          cmd_demux_001_src12_startofpacket;                         // cmd_demux_001:src12_startofpacket -> crosser_034:in_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                           // cmd_demux_001:src12_endofpacket -> crosser_034:in_endofpacket
	wire          crosser_034_out_valid;                                     // crosser_034:out_valid -> cmd_mux_012:sink1_valid
	wire  [166:0] crosser_034_out_data;                                      // crosser_034:out_data -> cmd_mux_012:sink1_data
	wire          crosser_034_out_ready;                                     // cmd_mux_012:sink1_ready -> crosser_034:out_ready
	wire   [21:0] crosser_034_out_channel;                                   // crosser_034:out_channel -> cmd_mux_012:sink1_channel
	wire          crosser_034_out_startofpacket;                             // crosser_034:out_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          crosser_034_out_endofpacket;                               // crosser_034:out_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src13_valid;                                 // cmd_demux_001:src13_valid -> crosser_035:in_valid
	wire  [166:0] cmd_demux_001_src13_data;                                  // cmd_demux_001:src13_data -> crosser_035:in_data
	wire          cmd_demux_001_src13_ready;                                 // crosser_035:in_ready -> cmd_demux_001:src13_ready
	wire   [21:0] cmd_demux_001_src13_channel;                               // cmd_demux_001:src13_channel -> crosser_035:in_channel
	wire          cmd_demux_001_src13_startofpacket;                         // cmd_demux_001:src13_startofpacket -> crosser_035:in_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                           // cmd_demux_001:src13_endofpacket -> crosser_035:in_endofpacket
	wire          crosser_035_out_valid;                                     // crosser_035:out_valid -> cmd_mux_013:sink1_valid
	wire  [166:0] crosser_035_out_data;                                      // crosser_035:out_data -> cmd_mux_013:sink1_data
	wire          crosser_035_out_ready;                                     // cmd_mux_013:sink1_ready -> crosser_035:out_ready
	wire   [21:0] crosser_035_out_channel;                                   // crosser_035:out_channel -> cmd_mux_013:sink1_channel
	wire          crosser_035_out_startofpacket;                             // crosser_035:out_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          crosser_035_out_endofpacket;                               // crosser_035:out_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src14_valid;                                 // cmd_demux_001:src14_valid -> crosser_036:in_valid
	wire  [166:0] cmd_demux_001_src14_data;                                  // cmd_demux_001:src14_data -> crosser_036:in_data
	wire          cmd_demux_001_src14_ready;                                 // crosser_036:in_ready -> cmd_demux_001:src14_ready
	wire   [21:0] cmd_demux_001_src14_channel;                               // cmd_demux_001:src14_channel -> crosser_036:in_channel
	wire          cmd_demux_001_src14_startofpacket;                         // cmd_demux_001:src14_startofpacket -> crosser_036:in_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                           // cmd_demux_001:src14_endofpacket -> crosser_036:in_endofpacket
	wire          crosser_036_out_valid;                                     // crosser_036:out_valid -> cmd_mux_014:sink1_valid
	wire  [166:0] crosser_036_out_data;                                      // crosser_036:out_data -> cmd_mux_014:sink1_data
	wire          crosser_036_out_ready;                                     // cmd_mux_014:sink1_ready -> crosser_036:out_ready
	wire   [21:0] crosser_036_out_channel;                                   // crosser_036:out_channel -> cmd_mux_014:sink1_channel
	wire          crosser_036_out_startofpacket;                             // crosser_036:out_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          crosser_036_out_endofpacket;                               // crosser_036:out_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_001_src15_valid;                                 // cmd_demux_001:src15_valid -> crosser_037:in_valid
	wire  [166:0] cmd_demux_001_src15_data;                                  // cmd_demux_001:src15_data -> crosser_037:in_data
	wire          cmd_demux_001_src15_ready;                                 // crosser_037:in_ready -> cmd_demux_001:src15_ready
	wire   [21:0] cmd_demux_001_src15_channel;                               // cmd_demux_001:src15_channel -> crosser_037:in_channel
	wire          cmd_demux_001_src15_startofpacket;                         // cmd_demux_001:src15_startofpacket -> crosser_037:in_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                           // cmd_demux_001:src15_endofpacket -> crosser_037:in_endofpacket
	wire          crosser_037_out_valid;                                     // crosser_037:out_valid -> cmd_mux_015:sink1_valid
	wire  [166:0] crosser_037_out_data;                                      // crosser_037:out_data -> cmd_mux_015:sink1_data
	wire          crosser_037_out_ready;                                     // cmd_mux_015:sink1_ready -> crosser_037:out_ready
	wire   [21:0] crosser_037_out_channel;                                   // crosser_037:out_channel -> cmd_mux_015:sink1_channel
	wire          crosser_037_out_startofpacket;                             // crosser_037:out_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          crosser_037_out_endofpacket;                               // crosser_037:out_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_001_src16_valid;                                 // cmd_demux_001:src16_valid -> crosser_038:in_valid
	wire  [166:0] cmd_demux_001_src16_data;                                  // cmd_demux_001:src16_data -> crosser_038:in_data
	wire          cmd_demux_001_src16_ready;                                 // crosser_038:in_ready -> cmd_demux_001:src16_ready
	wire   [21:0] cmd_demux_001_src16_channel;                               // cmd_demux_001:src16_channel -> crosser_038:in_channel
	wire          cmd_demux_001_src16_startofpacket;                         // cmd_demux_001:src16_startofpacket -> crosser_038:in_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                           // cmd_demux_001:src16_endofpacket -> crosser_038:in_endofpacket
	wire          crosser_038_out_valid;                                     // crosser_038:out_valid -> cmd_mux_016:sink1_valid
	wire  [166:0] crosser_038_out_data;                                      // crosser_038:out_data -> cmd_mux_016:sink1_data
	wire          crosser_038_out_ready;                                     // cmd_mux_016:sink1_ready -> crosser_038:out_ready
	wire   [21:0] crosser_038_out_channel;                                   // crosser_038:out_channel -> cmd_mux_016:sink1_channel
	wire          crosser_038_out_startofpacket;                             // crosser_038:out_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          crosser_038_out_endofpacket;                               // crosser_038:out_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_001_src17_valid;                                 // cmd_demux_001:src17_valid -> crosser_039:in_valid
	wire  [166:0] cmd_demux_001_src17_data;                                  // cmd_demux_001:src17_data -> crosser_039:in_data
	wire          cmd_demux_001_src17_ready;                                 // crosser_039:in_ready -> cmd_demux_001:src17_ready
	wire   [21:0] cmd_demux_001_src17_channel;                               // cmd_demux_001:src17_channel -> crosser_039:in_channel
	wire          cmd_demux_001_src17_startofpacket;                         // cmd_demux_001:src17_startofpacket -> crosser_039:in_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                           // cmd_demux_001:src17_endofpacket -> crosser_039:in_endofpacket
	wire          crosser_039_out_valid;                                     // crosser_039:out_valid -> cmd_mux_017:sink1_valid
	wire  [166:0] crosser_039_out_data;                                      // crosser_039:out_data -> cmd_mux_017:sink1_data
	wire          crosser_039_out_ready;                                     // cmd_mux_017:sink1_ready -> crosser_039:out_ready
	wire   [21:0] crosser_039_out_channel;                                   // crosser_039:out_channel -> cmd_mux_017:sink1_channel
	wire          crosser_039_out_startofpacket;                             // crosser_039:out_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          crosser_039_out_endofpacket;                               // crosser_039:out_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_001_src18_valid;                                 // cmd_demux_001:src18_valid -> crosser_040:in_valid
	wire  [166:0] cmd_demux_001_src18_data;                                  // cmd_demux_001:src18_data -> crosser_040:in_data
	wire          cmd_demux_001_src18_ready;                                 // crosser_040:in_ready -> cmd_demux_001:src18_ready
	wire   [21:0] cmd_demux_001_src18_channel;                               // cmd_demux_001:src18_channel -> crosser_040:in_channel
	wire          cmd_demux_001_src18_startofpacket;                         // cmd_demux_001:src18_startofpacket -> crosser_040:in_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                           // cmd_demux_001:src18_endofpacket -> crosser_040:in_endofpacket
	wire          crosser_040_out_valid;                                     // crosser_040:out_valid -> cmd_mux_018:sink1_valid
	wire  [166:0] crosser_040_out_data;                                      // crosser_040:out_data -> cmd_mux_018:sink1_data
	wire          crosser_040_out_ready;                                     // cmd_mux_018:sink1_ready -> crosser_040:out_ready
	wire   [21:0] crosser_040_out_channel;                                   // crosser_040:out_channel -> cmd_mux_018:sink1_channel
	wire          crosser_040_out_startofpacket;                             // crosser_040:out_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          crosser_040_out_endofpacket;                               // crosser_040:out_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_001_src19_valid;                                 // cmd_demux_001:src19_valid -> crosser_041:in_valid
	wire  [166:0] cmd_demux_001_src19_data;                                  // cmd_demux_001:src19_data -> crosser_041:in_data
	wire          cmd_demux_001_src19_ready;                                 // crosser_041:in_ready -> cmd_demux_001:src19_ready
	wire   [21:0] cmd_demux_001_src19_channel;                               // cmd_demux_001:src19_channel -> crosser_041:in_channel
	wire          cmd_demux_001_src19_startofpacket;                         // cmd_demux_001:src19_startofpacket -> crosser_041:in_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                           // cmd_demux_001:src19_endofpacket -> crosser_041:in_endofpacket
	wire          crosser_041_out_valid;                                     // crosser_041:out_valid -> cmd_mux_019:sink1_valid
	wire  [166:0] crosser_041_out_data;                                      // crosser_041:out_data -> cmd_mux_019:sink1_data
	wire          crosser_041_out_ready;                                     // cmd_mux_019:sink1_ready -> crosser_041:out_ready
	wire   [21:0] crosser_041_out_channel;                                   // crosser_041:out_channel -> cmd_mux_019:sink1_channel
	wire          crosser_041_out_startofpacket;                             // crosser_041:out_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          crosser_041_out_endofpacket;                               // crosser_041:out_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_001_src20_valid;                                 // cmd_demux_001:src20_valid -> crosser_042:in_valid
	wire  [166:0] cmd_demux_001_src20_data;                                  // cmd_demux_001:src20_data -> crosser_042:in_data
	wire          cmd_demux_001_src20_ready;                                 // crosser_042:in_ready -> cmd_demux_001:src20_ready
	wire   [21:0] cmd_demux_001_src20_channel;                               // cmd_demux_001:src20_channel -> crosser_042:in_channel
	wire          cmd_demux_001_src20_startofpacket;                         // cmd_demux_001:src20_startofpacket -> crosser_042:in_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                           // cmd_demux_001:src20_endofpacket -> crosser_042:in_endofpacket
	wire          crosser_042_out_valid;                                     // crosser_042:out_valid -> cmd_mux_020:sink1_valid
	wire  [166:0] crosser_042_out_data;                                      // crosser_042:out_data -> cmd_mux_020:sink1_data
	wire          crosser_042_out_ready;                                     // cmd_mux_020:sink1_ready -> crosser_042:out_ready
	wire   [21:0] crosser_042_out_channel;                                   // crosser_042:out_channel -> cmd_mux_020:sink1_channel
	wire          crosser_042_out_startofpacket;                             // crosser_042:out_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          crosser_042_out_endofpacket;                               // crosser_042:out_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_001_src21_valid;                                 // cmd_demux_001:src21_valid -> crosser_043:in_valid
	wire  [166:0] cmd_demux_001_src21_data;                                  // cmd_demux_001:src21_data -> crosser_043:in_data
	wire          cmd_demux_001_src21_ready;                                 // crosser_043:in_ready -> cmd_demux_001:src21_ready
	wire   [21:0] cmd_demux_001_src21_channel;                               // cmd_demux_001:src21_channel -> crosser_043:in_channel
	wire          cmd_demux_001_src21_startofpacket;                         // cmd_demux_001:src21_startofpacket -> crosser_043:in_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                           // cmd_demux_001:src21_endofpacket -> crosser_043:in_endofpacket
	wire          crosser_043_out_valid;                                     // crosser_043:out_valid -> cmd_mux_021:sink1_valid
	wire  [166:0] crosser_043_out_data;                                      // crosser_043:out_data -> cmd_mux_021:sink1_data
	wire          crosser_043_out_ready;                                     // cmd_mux_021:sink1_ready -> crosser_043:out_ready
	wire   [21:0] crosser_043_out_channel;                                   // crosser_043:out_channel -> cmd_mux_021:sink1_channel
	wire          crosser_043_out_startofpacket;                             // crosser_043:out_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          crosser_043_out_endofpacket;                               // crosser_043:out_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                      // rsp_demux:src0_valid -> crosser_044:in_valid
	wire  [166:0] rsp_demux_src0_data;                                       // rsp_demux:src0_data -> crosser_044:in_data
	wire          rsp_demux_src0_ready;                                      // crosser_044:in_ready -> rsp_demux:src0_ready
	wire   [21:0] rsp_demux_src0_channel;                                    // rsp_demux:src0_channel -> crosser_044:in_channel
	wire          rsp_demux_src0_startofpacket;                              // rsp_demux:src0_startofpacket -> crosser_044:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                // rsp_demux:src0_endofpacket -> crosser_044:in_endofpacket
	wire          crosser_044_out_valid;                                     // crosser_044:out_valid -> rsp_mux:sink0_valid
	wire  [166:0] crosser_044_out_data;                                      // crosser_044:out_data -> rsp_mux:sink0_data
	wire          crosser_044_out_ready;                                     // rsp_mux:sink0_ready -> crosser_044:out_ready
	wire   [21:0] crosser_044_out_channel;                                   // crosser_044:out_channel -> rsp_mux:sink0_channel
	wire          crosser_044_out_startofpacket;                             // crosser_044:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_044_out_endofpacket;                               // crosser_044:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                      // rsp_demux:src1_valid -> crosser_045:in_valid
	wire  [166:0] rsp_demux_src1_data;                                       // rsp_demux:src1_data -> crosser_045:in_data
	wire          rsp_demux_src1_ready;                                      // crosser_045:in_ready -> rsp_demux:src1_ready
	wire   [21:0] rsp_demux_src1_channel;                                    // rsp_demux:src1_channel -> crosser_045:in_channel
	wire          rsp_demux_src1_startofpacket;                              // rsp_demux:src1_startofpacket -> crosser_045:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                // rsp_demux:src1_endofpacket -> crosser_045:in_endofpacket
	wire          crosser_045_out_valid;                                     // crosser_045:out_valid -> rsp_mux_001:sink0_valid
	wire  [166:0] crosser_045_out_data;                                      // crosser_045:out_data -> rsp_mux_001:sink0_data
	wire          crosser_045_out_ready;                                     // rsp_mux_001:sink0_ready -> crosser_045:out_ready
	wire   [21:0] crosser_045_out_channel;                                   // crosser_045:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_045_out_startofpacket;                             // crosser_045:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_045_out_endofpacket;                               // crosser_045:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                  // rsp_demux_001:src0_valid -> crosser_046:in_valid
	wire  [166:0] rsp_demux_001_src0_data;                                   // rsp_demux_001:src0_data -> crosser_046:in_data
	wire          rsp_demux_001_src0_ready;                                  // crosser_046:in_ready -> rsp_demux_001:src0_ready
	wire   [21:0] rsp_demux_001_src0_channel;                                // rsp_demux_001:src0_channel -> crosser_046:in_channel
	wire          rsp_demux_001_src0_startofpacket;                          // rsp_demux_001:src0_startofpacket -> crosser_046:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                            // rsp_demux_001:src0_endofpacket -> crosser_046:in_endofpacket
	wire          crosser_046_out_valid;                                     // crosser_046:out_valid -> rsp_mux:sink1_valid
	wire  [166:0] crosser_046_out_data;                                      // crosser_046:out_data -> rsp_mux:sink1_data
	wire          crosser_046_out_ready;                                     // rsp_mux:sink1_ready -> crosser_046:out_ready
	wire   [21:0] crosser_046_out_channel;                                   // crosser_046:out_channel -> rsp_mux:sink1_channel
	wire          crosser_046_out_startofpacket;                             // crosser_046:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_046_out_endofpacket;                               // crosser_046:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                  // rsp_demux_001:src1_valid -> crosser_047:in_valid
	wire  [166:0] rsp_demux_001_src1_data;                                   // rsp_demux_001:src1_data -> crosser_047:in_data
	wire          rsp_demux_001_src1_ready;                                  // crosser_047:in_ready -> rsp_demux_001:src1_ready
	wire   [21:0] rsp_demux_001_src1_channel;                                // rsp_demux_001:src1_channel -> crosser_047:in_channel
	wire          rsp_demux_001_src1_startofpacket;                          // rsp_demux_001:src1_startofpacket -> crosser_047:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                            // rsp_demux_001:src1_endofpacket -> crosser_047:in_endofpacket
	wire          crosser_047_out_valid;                                     // crosser_047:out_valid -> rsp_mux_001:sink1_valid
	wire  [166:0] crosser_047_out_data;                                      // crosser_047:out_data -> rsp_mux_001:sink1_data
	wire          crosser_047_out_ready;                                     // rsp_mux_001:sink1_ready -> crosser_047:out_ready
	wire   [21:0] crosser_047_out_channel;                                   // crosser_047:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_047_out_startofpacket;                             // crosser_047:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_047_out_endofpacket;                               // crosser_047:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                  // rsp_demux_002:src0_valid -> crosser_048:in_valid
	wire  [166:0] rsp_demux_002_src0_data;                                   // rsp_demux_002:src0_data -> crosser_048:in_data
	wire          rsp_demux_002_src0_ready;                                  // crosser_048:in_ready -> rsp_demux_002:src0_ready
	wire   [21:0] rsp_demux_002_src0_channel;                                // rsp_demux_002:src0_channel -> crosser_048:in_channel
	wire          rsp_demux_002_src0_startofpacket;                          // rsp_demux_002:src0_startofpacket -> crosser_048:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                            // rsp_demux_002:src0_endofpacket -> crosser_048:in_endofpacket
	wire          crosser_048_out_valid;                                     // crosser_048:out_valid -> rsp_mux:sink2_valid
	wire  [166:0] crosser_048_out_data;                                      // crosser_048:out_data -> rsp_mux:sink2_data
	wire          crosser_048_out_ready;                                     // rsp_mux:sink2_ready -> crosser_048:out_ready
	wire   [21:0] crosser_048_out_channel;                                   // crosser_048:out_channel -> rsp_mux:sink2_channel
	wire          crosser_048_out_startofpacket;                             // crosser_048:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_048_out_endofpacket;                               // crosser_048:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                  // rsp_demux_002:src1_valid -> crosser_049:in_valid
	wire  [166:0] rsp_demux_002_src1_data;                                   // rsp_demux_002:src1_data -> crosser_049:in_data
	wire          rsp_demux_002_src1_ready;                                  // crosser_049:in_ready -> rsp_demux_002:src1_ready
	wire   [21:0] rsp_demux_002_src1_channel;                                // rsp_demux_002:src1_channel -> crosser_049:in_channel
	wire          rsp_demux_002_src1_startofpacket;                          // rsp_demux_002:src1_startofpacket -> crosser_049:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                            // rsp_demux_002:src1_endofpacket -> crosser_049:in_endofpacket
	wire          crosser_049_out_valid;                                     // crosser_049:out_valid -> rsp_mux_001:sink2_valid
	wire  [166:0] crosser_049_out_data;                                      // crosser_049:out_data -> rsp_mux_001:sink2_data
	wire          crosser_049_out_ready;                                     // rsp_mux_001:sink2_ready -> crosser_049:out_ready
	wire   [21:0] crosser_049_out_channel;                                   // crosser_049:out_channel -> rsp_mux_001:sink2_channel
	wire          crosser_049_out_startofpacket;                             // crosser_049:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          crosser_049_out_endofpacket;                               // crosser_049:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                  // rsp_demux_003:src0_valid -> crosser_050:in_valid
	wire  [166:0] rsp_demux_003_src0_data;                                   // rsp_demux_003:src0_data -> crosser_050:in_data
	wire          rsp_demux_003_src0_ready;                                  // crosser_050:in_ready -> rsp_demux_003:src0_ready
	wire   [21:0] rsp_demux_003_src0_channel;                                // rsp_demux_003:src0_channel -> crosser_050:in_channel
	wire          rsp_demux_003_src0_startofpacket;                          // rsp_demux_003:src0_startofpacket -> crosser_050:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                            // rsp_demux_003:src0_endofpacket -> crosser_050:in_endofpacket
	wire          crosser_050_out_valid;                                     // crosser_050:out_valid -> rsp_mux:sink3_valid
	wire  [166:0] crosser_050_out_data;                                      // crosser_050:out_data -> rsp_mux:sink3_data
	wire          crosser_050_out_ready;                                     // rsp_mux:sink3_ready -> crosser_050:out_ready
	wire   [21:0] crosser_050_out_channel;                                   // crosser_050:out_channel -> rsp_mux:sink3_channel
	wire          crosser_050_out_startofpacket;                             // crosser_050:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_050_out_endofpacket;                               // crosser_050:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                  // rsp_demux_003:src1_valid -> crosser_051:in_valid
	wire  [166:0] rsp_demux_003_src1_data;                                   // rsp_demux_003:src1_data -> crosser_051:in_data
	wire          rsp_demux_003_src1_ready;                                  // crosser_051:in_ready -> rsp_demux_003:src1_ready
	wire   [21:0] rsp_demux_003_src1_channel;                                // rsp_demux_003:src1_channel -> crosser_051:in_channel
	wire          rsp_demux_003_src1_startofpacket;                          // rsp_demux_003:src1_startofpacket -> crosser_051:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                            // rsp_demux_003:src1_endofpacket -> crosser_051:in_endofpacket
	wire          crosser_051_out_valid;                                     // crosser_051:out_valid -> rsp_mux_001:sink3_valid
	wire  [166:0] crosser_051_out_data;                                      // crosser_051:out_data -> rsp_mux_001:sink3_data
	wire          crosser_051_out_ready;                                     // rsp_mux_001:sink3_ready -> crosser_051:out_ready
	wire   [21:0] crosser_051_out_channel;                                   // crosser_051:out_channel -> rsp_mux_001:sink3_channel
	wire          crosser_051_out_startofpacket;                             // crosser_051:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          crosser_051_out_endofpacket;                               // crosser_051:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                  // rsp_demux_004:src0_valid -> crosser_052:in_valid
	wire  [166:0] rsp_demux_004_src0_data;                                   // rsp_demux_004:src0_data -> crosser_052:in_data
	wire          rsp_demux_004_src0_ready;                                  // crosser_052:in_ready -> rsp_demux_004:src0_ready
	wire   [21:0] rsp_demux_004_src0_channel;                                // rsp_demux_004:src0_channel -> crosser_052:in_channel
	wire          rsp_demux_004_src0_startofpacket;                          // rsp_demux_004:src0_startofpacket -> crosser_052:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                            // rsp_demux_004:src0_endofpacket -> crosser_052:in_endofpacket
	wire          crosser_052_out_valid;                                     // crosser_052:out_valid -> rsp_mux:sink4_valid
	wire  [166:0] crosser_052_out_data;                                      // crosser_052:out_data -> rsp_mux:sink4_data
	wire          crosser_052_out_ready;                                     // rsp_mux:sink4_ready -> crosser_052:out_ready
	wire   [21:0] crosser_052_out_channel;                                   // crosser_052:out_channel -> rsp_mux:sink4_channel
	wire          crosser_052_out_startofpacket;                             // crosser_052:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_052_out_endofpacket;                               // crosser_052:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                  // rsp_demux_004:src1_valid -> crosser_053:in_valid
	wire  [166:0] rsp_demux_004_src1_data;                                   // rsp_demux_004:src1_data -> crosser_053:in_data
	wire          rsp_demux_004_src1_ready;                                  // crosser_053:in_ready -> rsp_demux_004:src1_ready
	wire   [21:0] rsp_demux_004_src1_channel;                                // rsp_demux_004:src1_channel -> crosser_053:in_channel
	wire          rsp_demux_004_src1_startofpacket;                          // rsp_demux_004:src1_startofpacket -> crosser_053:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                            // rsp_demux_004:src1_endofpacket -> crosser_053:in_endofpacket
	wire          crosser_053_out_valid;                                     // crosser_053:out_valid -> rsp_mux_001:sink4_valid
	wire  [166:0] crosser_053_out_data;                                      // crosser_053:out_data -> rsp_mux_001:sink4_data
	wire          crosser_053_out_ready;                                     // rsp_mux_001:sink4_ready -> crosser_053:out_ready
	wire   [21:0] crosser_053_out_channel;                                   // crosser_053:out_channel -> rsp_mux_001:sink4_channel
	wire          crosser_053_out_startofpacket;                             // crosser_053:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          crosser_053_out_endofpacket;                               // crosser_053:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                  // rsp_demux_005:src0_valid -> crosser_054:in_valid
	wire  [166:0] rsp_demux_005_src0_data;                                   // rsp_demux_005:src0_data -> crosser_054:in_data
	wire          rsp_demux_005_src0_ready;                                  // crosser_054:in_ready -> rsp_demux_005:src0_ready
	wire   [21:0] rsp_demux_005_src0_channel;                                // rsp_demux_005:src0_channel -> crosser_054:in_channel
	wire          rsp_demux_005_src0_startofpacket;                          // rsp_demux_005:src0_startofpacket -> crosser_054:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                            // rsp_demux_005:src0_endofpacket -> crosser_054:in_endofpacket
	wire          crosser_054_out_valid;                                     // crosser_054:out_valid -> rsp_mux:sink5_valid
	wire  [166:0] crosser_054_out_data;                                      // crosser_054:out_data -> rsp_mux:sink5_data
	wire          crosser_054_out_ready;                                     // rsp_mux:sink5_ready -> crosser_054:out_ready
	wire   [21:0] crosser_054_out_channel;                                   // crosser_054:out_channel -> rsp_mux:sink5_channel
	wire          crosser_054_out_startofpacket;                             // crosser_054:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_054_out_endofpacket;                               // crosser_054:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                  // rsp_demux_005:src1_valid -> crosser_055:in_valid
	wire  [166:0] rsp_demux_005_src1_data;                                   // rsp_demux_005:src1_data -> crosser_055:in_data
	wire          rsp_demux_005_src1_ready;                                  // crosser_055:in_ready -> rsp_demux_005:src1_ready
	wire   [21:0] rsp_demux_005_src1_channel;                                // rsp_demux_005:src1_channel -> crosser_055:in_channel
	wire          rsp_demux_005_src1_startofpacket;                          // rsp_demux_005:src1_startofpacket -> crosser_055:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                            // rsp_demux_005:src1_endofpacket -> crosser_055:in_endofpacket
	wire          crosser_055_out_valid;                                     // crosser_055:out_valid -> rsp_mux_001:sink5_valid
	wire  [166:0] crosser_055_out_data;                                      // crosser_055:out_data -> rsp_mux_001:sink5_data
	wire          crosser_055_out_ready;                                     // rsp_mux_001:sink5_ready -> crosser_055:out_ready
	wire   [21:0] crosser_055_out_channel;                                   // crosser_055:out_channel -> rsp_mux_001:sink5_channel
	wire          crosser_055_out_startofpacket;                             // crosser_055:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          crosser_055_out_endofpacket;                               // crosser_055:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                  // rsp_demux_006:src0_valid -> crosser_056:in_valid
	wire  [166:0] rsp_demux_006_src0_data;                                   // rsp_demux_006:src0_data -> crosser_056:in_data
	wire          rsp_demux_006_src0_ready;                                  // crosser_056:in_ready -> rsp_demux_006:src0_ready
	wire   [21:0] rsp_demux_006_src0_channel;                                // rsp_demux_006:src0_channel -> crosser_056:in_channel
	wire          rsp_demux_006_src0_startofpacket;                          // rsp_demux_006:src0_startofpacket -> crosser_056:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                            // rsp_demux_006:src0_endofpacket -> crosser_056:in_endofpacket
	wire          crosser_056_out_valid;                                     // crosser_056:out_valid -> rsp_mux:sink6_valid
	wire  [166:0] crosser_056_out_data;                                      // crosser_056:out_data -> rsp_mux:sink6_data
	wire          crosser_056_out_ready;                                     // rsp_mux:sink6_ready -> crosser_056:out_ready
	wire   [21:0] crosser_056_out_channel;                                   // crosser_056:out_channel -> rsp_mux:sink6_channel
	wire          crosser_056_out_startofpacket;                             // crosser_056:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_056_out_endofpacket;                               // crosser_056:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                  // rsp_demux_006:src1_valid -> crosser_057:in_valid
	wire  [166:0] rsp_demux_006_src1_data;                                   // rsp_demux_006:src1_data -> crosser_057:in_data
	wire          rsp_demux_006_src1_ready;                                  // crosser_057:in_ready -> rsp_demux_006:src1_ready
	wire   [21:0] rsp_demux_006_src1_channel;                                // rsp_demux_006:src1_channel -> crosser_057:in_channel
	wire          rsp_demux_006_src1_startofpacket;                          // rsp_demux_006:src1_startofpacket -> crosser_057:in_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                            // rsp_demux_006:src1_endofpacket -> crosser_057:in_endofpacket
	wire          crosser_057_out_valid;                                     // crosser_057:out_valid -> rsp_mux_001:sink6_valid
	wire  [166:0] crosser_057_out_data;                                      // crosser_057:out_data -> rsp_mux_001:sink6_data
	wire          crosser_057_out_ready;                                     // rsp_mux_001:sink6_ready -> crosser_057:out_ready
	wire   [21:0] crosser_057_out_channel;                                   // crosser_057:out_channel -> rsp_mux_001:sink6_channel
	wire          crosser_057_out_startofpacket;                             // crosser_057:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          crosser_057_out_endofpacket;                               // crosser_057:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                  // rsp_demux_007:src0_valid -> crosser_058:in_valid
	wire  [166:0] rsp_demux_007_src0_data;                                   // rsp_demux_007:src0_data -> crosser_058:in_data
	wire          rsp_demux_007_src0_ready;                                  // crosser_058:in_ready -> rsp_demux_007:src0_ready
	wire   [21:0] rsp_demux_007_src0_channel;                                // rsp_demux_007:src0_channel -> crosser_058:in_channel
	wire          rsp_demux_007_src0_startofpacket;                          // rsp_demux_007:src0_startofpacket -> crosser_058:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                            // rsp_demux_007:src0_endofpacket -> crosser_058:in_endofpacket
	wire          crosser_058_out_valid;                                     // crosser_058:out_valid -> rsp_mux:sink7_valid
	wire  [166:0] crosser_058_out_data;                                      // crosser_058:out_data -> rsp_mux:sink7_data
	wire          crosser_058_out_ready;                                     // rsp_mux:sink7_ready -> crosser_058:out_ready
	wire   [21:0] crosser_058_out_channel;                                   // crosser_058:out_channel -> rsp_mux:sink7_channel
	wire          crosser_058_out_startofpacket;                             // crosser_058:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          crosser_058_out_endofpacket;                               // crosser_058:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                  // rsp_demux_007:src1_valid -> crosser_059:in_valid
	wire  [166:0] rsp_demux_007_src1_data;                                   // rsp_demux_007:src1_data -> crosser_059:in_data
	wire          rsp_demux_007_src1_ready;                                  // crosser_059:in_ready -> rsp_demux_007:src1_ready
	wire   [21:0] rsp_demux_007_src1_channel;                                // rsp_demux_007:src1_channel -> crosser_059:in_channel
	wire          rsp_demux_007_src1_startofpacket;                          // rsp_demux_007:src1_startofpacket -> crosser_059:in_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                            // rsp_demux_007:src1_endofpacket -> crosser_059:in_endofpacket
	wire          crosser_059_out_valid;                                     // crosser_059:out_valid -> rsp_mux_001:sink7_valid
	wire  [166:0] crosser_059_out_data;                                      // crosser_059:out_data -> rsp_mux_001:sink7_data
	wire          crosser_059_out_ready;                                     // rsp_mux_001:sink7_ready -> crosser_059:out_ready
	wire   [21:0] crosser_059_out_channel;                                   // crosser_059:out_channel -> rsp_mux_001:sink7_channel
	wire          crosser_059_out_startofpacket;                             // crosser_059:out_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          crosser_059_out_endofpacket;                               // crosser_059:out_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                  // rsp_demux_008:src0_valid -> crosser_060:in_valid
	wire  [166:0] rsp_demux_008_src0_data;                                   // rsp_demux_008:src0_data -> crosser_060:in_data
	wire          rsp_demux_008_src0_ready;                                  // crosser_060:in_ready -> rsp_demux_008:src0_ready
	wire   [21:0] rsp_demux_008_src0_channel;                                // rsp_demux_008:src0_channel -> crosser_060:in_channel
	wire          rsp_demux_008_src0_startofpacket;                          // rsp_demux_008:src0_startofpacket -> crosser_060:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                            // rsp_demux_008:src0_endofpacket -> crosser_060:in_endofpacket
	wire          crosser_060_out_valid;                                     // crosser_060:out_valid -> rsp_mux:sink8_valid
	wire  [166:0] crosser_060_out_data;                                      // crosser_060:out_data -> rsp_mux:sink8_data
	wire          crosser_060_out_ready;                                     // rsp_mux:sink8_ready -> crosser_060:out_ready
	wire   [21:0] crosser_060_out_channel;                                   // crosser_060:out_channel -> rsp_mux:sink8_channel
	wire          crosser_060_out_startofpacket;                             // crosser_060:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          crosser_060_out_endofpacket;                               // crosser_060:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                  // rsp_demux_008:src1_valid -> crosser_061:in_valid
	wire  [166:0] rsp_demux_008_src1_data;                                   // rsp_demux_008:src1_data -> crosser_061:in_data
	wire          rsp_demux_008_src1_ready;                                  // crosser_061:in_ready -> rsp_demux_008:src1_ready
	wire   [21:0] rsp_demux_008_src1_channel;                                // rsp_demux_008:src1_channel -> crosser_061:in_channel
	wire          rsp_demux_008_src1_startofpacket;                          // rsp_demux_008:src1_startofpacket -> crosser_061:in_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                            // rsp_demux_008:src1_endofpacket -> crosser_061:in_endofpacket
	wire          crosser_061_out_valid;                                     // crosser_061:out_valid -> rsp_mux_001:sink8_valid
	wire  [166:0] crosser_061_out_data;                                      // crosser_061:out_data -> rsp_mux_001:sink8_data
	wire          crosser_061_out_ready;                                     // rsp_mux_001:sink8_ready -> crosser_061:out_ready
	wire   [21:0] crosser_061_out_channel;                                   // crosser_061:out_channel -> rsp_mux_001:sink8_channel
	wire          crosser_061_out_startofpacket;                             // crosser_061:out_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          crosser_061_out_endofpacket;                               // crosser_061:out_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                  // rsp_demux_009:src0_valid -> crosser_062:in_valid
	wire  [166:0] rsp_demux_009_src0_data;                                   // rsp_demux_009:src0_data -> crosser_062:in_data
	wire          rsp_demux_009_src0_ready;                                  // crosser_062:in_ready -> rsp_demux_009:src0_ready
	wire   [21:0] rsp_demux_009_src0_channel;                                // rsp_demux_009:src0_channel -> crosser_062:in_channel
	wire          rsp_demux_009_src0_startofpacket;                          // rsp_demux_009:src0_startofpacket -> crosser_062:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                            // rsp_demux_009:src0_endofpacket -> crosser_062:in_endofpacket
	wire          crosser_062_out_valid;                                     // crosser_062:out_valid -> rsp_mux:sink9_valid
	wire  [166:0] crosser_062_out_data;                                      // crosser_062:out_data -> rsp_mux:sink9_data
	wire          crosser_062_out_ready;                                     // rsp_mux:sink9_ready -> crosser_062:out_ready
	wire   [21:0] crosser_062_out_channel;                                   // crosser_062:out_channel -> rsp_mux:sink9_channel
	wire          crosser_062_out_startofpacket;                             // crosser_062:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          crosser_062_out_endofpacket;                               // crosser_062:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                  // rsp_demux_009:src1_valid -> crosser_063:in_valid
	wire  [166:0] rsp_demux_009_src1_data;                                   // rsp_demux_009:src1_data -> crosser_063:in_data
	wire          rsp_demux_009_src1_ready;                                  // crosser_063:in_ready -> rsp_demux_009:src1_ready
	wire   [21:0] rsp_demux_009_src1_channel;                                // rsp_demux_009:src1_channel -> crosser_063:in_channel
	wire          rsp_demux_009_src1_startofpacket;                          // rsp_demux_009:src1_startofpacket -> crosser_063:in_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                            // rsp_demux_009:src1_endofpacket -> crosser_063:in_endofpacket
	wire          crosser_063_out_valid;                                     // crosser_063:out_valid -> rsp_mux_001:sink9_valid
	wire  [166:0] crosser_063_out_data;                                      // crosser_063:out_data -> rsp_mux_001:sink9_data
	wire          crosser_063_out_ready;                                     // rsp_mux_001:sink9_ready -> crosser_063:out_ready
	wire   [21:0] crosser_063_out_channel;                                   // crosser_063:out_channel -> rsp_mux_001:sink9_channel
	wire          crosser_063_out_startofpacket;                             // crosser_063:out_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          crosser_063_out_endofpacket;                               // crosser_063:out_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                  // rsp_demux_010:src0_valid -> crosser_064:in_valid
	wire  [166:0] rsp_demux_010_src0_data;                                   // rsp_demux_010:src0_data -> crosser_064:in_data
	wire          rsp_demux_010_src0_ready;                                  // crosser_064:in_ready -> rsp_demux_010:src0_ready
	wire   [21:0] rsp_demux_010_src0_channel;                                // rsp_demux_010:src0_channel -> crosser_064:in_channel
	wire          rsp_demux_010_src0_startofpacket;                          // rsp_demux_010:src0_startofpacket -> crosser_064:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                            // rsp_demux_010:src0_endofpacket -> crosser_064:in_endofpacket
	wire          crosser_064_out_valid;                                     // crosser_064:out_valid -> rsp_mux:sink10_valid
	wire  [166:0] crosser_064_out_data;                                      // crosser_064:out_data -> rsp_mux:sink10_data
	wire          crosser_064_out_ready;                                     // rsp_mux:sink10_ready -> crosser_064:out_ready
	wire   [21:0] crosser_064_out_channel;                                   // crosser_064:out_channel -> rsp_mux:sink10_channel
	wire          crosser_064_out_startofpacket;                             // crosser_064:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire          crosser_064_out_endofpacket;                               // crosser_064:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                  // rsp_demux_010:src1_valid -> crosser_065:in_valid
	wire  [166:0] rsp_demux_010_src1_data;                                   // rsp_demux_010:src1_data -> crosser_065:in_data
	wire          rsp_demux_010_src1_ready;                                  // crosser_065:in_ready -> rsp_demux_010:src1_ready
	wire   [21:0] rsp_demux_010_src1_channel;                                // rsp_demux_010:src1_channel -> crosser_065:in_channel
	wire          rsp_demux_010_src1_startofpacket;                          // rsp_demux_010:src1_startofpacket -> crosser_065:in_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                            // rsp_demux_010:src1_endofpacket -> crosser_065:in_endofpacket
	wire          crosser_065_out_valid;                                     // crosser_065:out_valid -> rsp_mux_001:sink10_valid
	wire  [166:0] crosser_065_out_data;                                      // crosser_065:out_data -> rsp_mux_001:sink10_data
	wire          crosser_065_out_ready;                                     // rsp_mux_001:sink10_ready -> crosser_065:out_ready
	wire   [21:0] crosser_065_out_channel;                                   // crosser_065:out_channel -> rsp_mux_001:sink10_channel
	wire          crosser_065_out_startofpacket;                             // crosser_065:out_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          crosser_065_out_endofpacket;                               // crosser_065:out_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                  // rsp_demux_011:src0_valid -> crosser_066:in_valid
	wire  [166:0] rsp_demux_011_src0_data;                                   // rsp_demux_011:src0_data -> crosser_066:in_data
	wire          rsp_demux_011_src0_ready;                                  // crosser_066:in_ready -> rsp_demux_011:src0_ready
	wire   [21:0] rsp_demux_011_src0_channel;                                // rsp_demux_011:src0_channel -> crosser_066:in_channel
	wire          rsp_demux_011_src0_startofpacket;                          // rsp_demux_011:src0_startofpacket -> crosser_066:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                            // rsp_demux_011:src0_endofpacket -> crosser_066:in_endofpacket
	wire          crosser_066_out_valid;                                     // crosser_066:out_valid -> rsp_mux:sink11_valid
	wire  [166:0] crosser_066_out_data;                                      // crosser_066:out_data -> rsp_mux:sink11_data
	wire          crosser_066_out_ready;                                     // rsp_mux:sink11_ready -> crosser_066:out_ready
	wire   [21:0] crosser_066_out_channel;                                   // crosser_066:out_channel -> rsp_mux:sink11_channel
	wire          crosser_066_out_startofpacket;                             // crosser_066:out_startofpacket -> rsp_mux:sink11_startofpacket
	wire          crosser_066_out_endofpacket;                               // crosser_066:out_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                  // rsp_demux_011:src1_valid -> crosser_067:in_valid
	wire  [166:0] rsp_demux_011_src1_data;                                   // rsp_demux_011:src1_data -> crosser_067:in_data
	wire          rsp_demux_011_src1_ready;                                  // crosser_067:in_ready -> rsp_demux_011:src1_ready
	wire   [21:0] rsp_demux_011_src1_channel;                                // rsp_demux_011:src1_channel -> crosser_067:in_channel
	wire          rsp_demux_011_src1_startofpacket;                          // rsp_demux_011:src1_startofpacket -> crosser_067:in_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                            // rsp_demux_011:src1_endofpacket -> crosser_067:in_endofpacket
	wire          crosser_067_out_valid;                                     // crosser_067:out_valid -> rsp_mux_001:sink11_valid
	wire  [166:0] crosser_067_out_data;                                      // crosser_067:out_data -> rsp_mux_001:sink11_data
	wire          crosser_067_out_ready;                                     // rsp_mux_001:sink11_ready -> crosser_067:out_ready
	wire   [21:0] crosser_067_out_channel;                                   // crosser_067:out_channel -> rsp_mux_001:sink11_channel
	wire          crosser_067_out_startofpacket;                             // crosser_067:out_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          crosser_067_out_endofpacket;                               // crosser_067:out_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                  // rsp_demux_012:src0_valid -> crosser_068:in_valid
	wire  [166:0] rsp_demux_012_src0_data;                                   // rsp_demux_012:src0_data -> crosser_068:in_data
	wire          rsp_demux_012_src0_ready;                                  // crosser_068:in_ready -> rsp_demux_012:src0_ready
	wire   [21:0] rsp_demux_012_src0_channel;                                // rsp_demux_012:src0_channel -> crosser_068:in_channel
	wire          rsp_demux_012_src0_startofpacket;                          // rsp_demux_012:src0_startofpacket -> crosser_068:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                            // rsp_demux_012:src0_endofpacket -> crosser_068:in_endofpacket
	wire          crosser_068_out_valid;                                     // crosser_068:out_valid -> rsp_mux:sink12_valid
	wire  [166:0] crosser_068_out_data;                                      // crosser_068:out_data -> rsp_mux:sink12_data
	wire          crosser_068_out_ready;                                     // rsp_mux:sink12_ready -> crosser_068:out_ready
	wire   [21:0] crosser_068_out_channel;                                   // crosser_068:out_channel -> rsp_mux:sink12_channel
	wire          crosser_068_out_startofpacket;                             // crosser_068:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire          crosser_068_out_endofpacket;                               // crosser_068:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                  // rsp_demux_012:src1_valid -> crosser_069:in_valid
	wire  [166:0] rsp_demux_012_src1_data;                                   // rsp_demux_012:src1_data -> crosser_069:in_data
	wire          rsp_demux_012_src1_ready;                                  // crosser_069:in_ready -> rsp_demux_012:src1_ready
	wire   [21:0] rsp_demux_012_src1_channel;                                // rsp_demux_012:src1_channel -> crosser_069:in_channel
	wire          rsp_demux_012_src1_startofpacket;                          // rsp_demux_012:src1_startofpacket -> crosser_069:in_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                            // rsp_demux_012:src1_endofpacket -> crosser_069:in_endofpacket
	wire          crosser_069_out_valid;                                     // crosser_069:out_valid -> rsp_mux_001:sink12_valid
	wire  [166:0] crosser_069_out_data;                                      // crosser_069:out_data -> rsp_mux_001:sink12_data
	wire          crosser_069_out_ready;                                     // rsp_mux_001:sink12_ready -> crosser_069:out_ready
	wire   [21:0] crosser_069_out_channel;                                   // crosser_069:out_channel -> rsp_mux_001:sink12_channel
	wire          crosser_069_out_startofpacket;                             // crosser_069:out_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          crosser_069_out_endofpacket;                               // crosser_069:out_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                  // rsp_demux_013:src0_valid -> crosser_070:in_valid
	wire  [166:0] rsp_demux_013_src0_data;                                   // rsp_demux_013:src0_data -> crosser_070:in_data
	wire          rsp_demux_013_src0_ready;                                  // crosser_070:in_ready -> rsp_demux_013:src0_ready
	wire   [21:0] rsp_demux_013_src0_channel;                                // rsp_demux_013:src0_channel -> crosser_070:in_channel
	wire          rsp_demux_013_src0_startofpacket;                          // rsp_demux_013:src0_startofpacket -> crosser_070:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                            // rsp_demux_013:src0_endofpacket -> crosser_070:in_endofpacket
	wire          crosser_070_out_valid;                                     // crosser_070:out_valid -> rsp_mux:sink13_valid
	wire  [166:0] crosser_070_out_data;                                      // crosser_070:out_data -> rsp_mux:sink13_data
	wire          crosser_070_out_ready;                                     // rsp_mux:sink13_ready -> crosser_070:out_ready
	wire   [21:0] crosser_070_out_channel;                                   // crosser_070:out_channel -> rsp_mux:sink13_channel
	wire          crosser_070_out_startofpacket;                             // crosser_070:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire          crosser_070_out_endofpacket;                               // crosser_070:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                  // rsp_demux_013:src1_valid -> crosser_071:in_valid
	wire  [166:0] rsp_demux_013_src1_data;                                   // rsp_demux_013:src1_data -> crosser_071:in_data
	wire          rsp_demux_013_src1_ready;                                  // crosser_071:in_ready -> rsp_demux_013:src1_ready
	wire   [21:0] rsp_demux_013_src1_channel;                                // rsp_demux_013:src1_channel -> crosser_071:in_channel
	wire          rsp_demux_013_src1_startofpacket;                          // rsp_demux_013:src1_startofpacket -> crosser_071:in_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                            // rsp_demux_013:src1_endofpacket -> crosser_071:in_endofpacket
	wire          crosser_071_out_valid;                                     // crosser_071:out_valid -> rsp_mux_001:sink13_valid
	wire  [166:0] crosser_071_out_data;                                      // crosser_071:out_data -> rsp_mux_001:sink13_data
	wire          crosser_071_out_ready;                                     // rsp_mux_001:sink13_ready -> crosser_071:out_ready
	wire   [21:0] crosser_071_out_channel;                                   // crosser_071:out_channel -> rsp_mux_001:sink13_channel
	wire          crosser_071_out_startofpacket;                             // crosser_071:out_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          crosser_071_out_endofpacket;                               // crosser_071:out_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                  // rsp_demux_014:src0_valid -> crosser_072:in_valid
	wire  [166:0] rsp_demux_014_src0_data;                                   // rsp_demux_014:src0_data -> crosser_072:in_data
	wire          rsp_demux_014_src0_ready;                                  // crosser_072:in_ready -> rsp_demux_014:src0_ready
	wire   [21:0] rsp_demux_014_src0_channel;                                // rsp_demux_014:src0_channel -> crosser_072:in_channel
	wire          rsp_demux_014_src0_startofpacket;                          // rsp_demux_014:src0_startofpacket -> crosser_072:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                            // rsp_demux_014:src0_endofpacket -> crosser_072:in_endofpacket
	wire          crosser_072_out_valid;                                     // crosser_072:out_valid -> rsp_mux:sink14_valid
	wire  [166:0] crosser_072_out_data;                                      // crosser_072:out_data -> rsp_mux:sink14_data
	wire          crosser_072_out_ready;                                     // rsp_mux:sink14_ready -> crosser_072:out_ready
	wire   [21:0] crosser_072_out_channel;                                   // crosser_072:out_channel -> rsp_mux:sink14_channel
	wire          crosser_072_out_startofpacket;                             // crosser_072:out_startofpacket -> rsp_mux:sink14_startofpacket
	wire          crosser_072_out_endofpacket;                               // crosser_072:out_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                  // rsp_demux_014:src1_valid -> crosser_073:in_valid
	wire  [166:0] rsp_demux_014_src1_data;                                   // rsp_demux_014:src1_data -> crosser_073:in_data
	wire          rsp_demux_014_src1_ready;                                  // crosser_073:in_ready -> rsp_demux_014:src1_ready
	wire   [21:0] rsp_demux_014_src1_channel;                                // rsp_demux_014:src1_channel -> crosser_073:in_channel
	wire          rsp_demux_014_src1_startofpacket;                          // rsp_demux_014:src1_startofpacket -> crosser_073:in_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                            // rsp_demux_014:src1_endofpacket -> crosser_073:in_endofpacket
	wire          crosser_073_out_valid;                                     // crosser_073:out_valid -> rsp_mux_001:sink14_valid
	wire  [166:0] crosser_073_out_data;                                      // crosser_073:out_data -> rsp_mux_001:sink14_data
	wire          crosser_073_out_ready;                                     // rsp_mux_001:sink14_ready -> crosser_073:out_ready
	wire   [21:0] crosser_073_out_channel;                                   // crosser_073:out_channel -> rsp_mux_001:sink14_channel
	wire          crosser_073_out_startofpacket;                             // crosser_073:out_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          crosser_073_out_endofpacket;                               // crosser_073:out_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                  // rsp_demux_015:src0_valid -> crosser_074:in_valid
	wire  [166:0] rsp_demux_015_src0_data;                                   // rsp_demux_015:src0_data -> crosser_074:in_data
	wire          rsp_demux_015_src0_ready;                                  // crosser_074:in_ready -> rsp_demux_015:src0_ready
	wire   [21:0] rsp_demux_015_src0_channel;                                // rsp_demux_015:src0_channel -> crosser_074:in_channel
	wire          rsp_demux_015_src0_startofpacket;                          // rsp_demux_015:src0_startofpacket -> crosser_074:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                            // rsp_demux_015:src0_endofpacket -> crosser_074:in_endofpacket
	wire          crosser_074_out_valid;                                     // crosser_074:out_valid -> rsp_mux:sink15_valid
	wire  [166:0] crosser_074_out_data;                                      // crosser_074:out_data -> rsp_mux:sink15_data
	wire          crosser_074_out_ready;                                     // rsp_mux:sink15_ready -> crosser_074:out_ready
	wire   [21:0] crosser_074_out_channel;                                   // crosser_074:out_channel -> rsp_mux:sink15_channel
	wire          crosser_074_out_startofpacket;                             // crosser_074:out_startofpacket -> rsp_mux:sink15_startofpacket
	wire          crosser_074_out_endofpacket;                               // crosser_074:out_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                  // rsp_demux_015:src1_valid -> crosser_075:in_valid
	wire  [166:0] rsp_demux_015_src1_data;                                   // rsp_demux_015:src1_data -> crosser_075:in_data
	wire          rsp_demux_015_src1_ready;                                  // crosser_075:in_ready -> rsp_demux_015:src1_ready
	wire   [21:0] rsp_demux_015_src1_channel;                                // rsp_demux_015:src1_channel -> crosser_075:in_channel
	wire          rsp_demux_015_src1_startofpacket;                          // rsp_demux_015:src1_startofpacket -> crosser_075:in_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                            // rsp_demux_015:src1_endofpacket -> crosser_075:in_endofpacket
	wire          crosser_075_out_valid;                                     // crosser_075:out_valid -> rsp_mux_001:sink15_valid
	wire  [166:0] crosser_075_out_data;                                      // crosser_075:out_data -> rsp_mux_001:sink15_data
	wire          crosser_075_out_ready;                                     // rsp_mux_001:sink15_ready -> crosser_075:out_ready
	wire   [21:0] crosser_075_out_channel;                                   // crosser_075:out_channel -> rsp_mux_001:sink15_channel
	wire          crosser_075_out_startofpacket;                             // crosser_075:out_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          crosser_075_out_endofpacket;                               // crosser_075:out_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                  // rsp_demux_016:src0_valid -> crosser_076:in_valid
	wire  [166:0] rsp_demux_016_src0_data;                                   // rsp_demux_016:src0_data -> crosser_076:in_data
	wire          rsp_demux_016_src0_ready;                                  // crosser_076:in_ready -> rsp_demux_016:src0_ready
	wire   [21:0] rsp_demux_016_src0_channel;                                // rsp_demux_016:src0_channel -> crosser_076:in_channel
	wire          rsp_demux_016_src0_startofpacket;                          // rsp_demux_016:src0_startofpacket -> crosser_076:in_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                            // rsp_demux_016:src0_endofpacket -> crosser_076:in_endofpacket
	wire          crosser_076_out_valid;                                     // crosser_076:out_valid -> rsp_mux:sink16_valid
	wire  [166:0] crosser_076_out_data;                                      // crosser_076:out_data -> rsp_mux:sink16_data
	wire          crosser_076_out_ready;                                     // rsp_mux:sink16_ready -> crosser_076:out_ready
	wire   [21:0] crosser_076_out_channel;                                   // crosser_076:out_channel -> rsp_mux:sink16_channel
	wire          crosser_076_out_startofpacket;                             // crosser_076:out_startofpacket -> rsp_mux:sink16_startofpacket
	wire          crosser_076_out_endofpacket;                               // crosser_076:out_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                  // rsp_demux_016:src1_valid -> crosser_077:in_valid
	wire  [166:0] rsp_demux_016_src1_data;                                   // rsp_demux_016:src1_data -> crosser_077:in_data
	wire          rsp_demux_016_src1_ready;                                  // crosser_077:in_ready -> rsp_demux_016:src1_ready
	wire   [21:0] rsp_demux_016_src1_channel;                                // rsp_demux_016:src1_channel -> crosser_077:in_channel
	wire          rsp_demux_016_src1_startofpacket;                          // rsp_demux_016:src1_startofpacket -> crosser_077:in_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                            // rsp_demux_016:src1_endofpacket -> crosser_077:in_endofpacket
	wire          crosser_077_out_valid;                                     // crosser_077:out_valid -> rsp_mux_001:sink16_valid
	wire  [166:0] crosser_077_out_data;                                      // crosser_077:out_data -> rsp_mux_001:sink16_data
	wire          crosser_077_out_ready;                                     // rsp_mux_001:sink16_ready -> crosser_077:out_ready
	wire   [21:0] crosser_077_out_channel;                                   // crosser_077:out_channel -> rsp_mux_001:sink16_channel
	wire          crosser_077_out_startofpacket;                             // crosser_077:out_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          crosser_077_out_endofpacket;                               // crosser_077:out_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                  // rsp_demux_017:src0_valid -> crosser_078:in_valid
	wire  [166:0] rsp_demux_017_src0_data;                                   // rsp_demux_017:src0_data -> crosser_078:in_data
	wire          rsp_demux_017_src0_ready;                                  // crosser_078:in_ready -> rsp_demux_017:src0_ready
	wire   [21:0] rsp_demux_017_src0_channel;                                // rsp_demux_017:src0_channel -> crosser_078:in_channel
	wire          rsp_demux_017_src0_startofpacket;                          // rsp_demux_017:src0_startofpacket -> crosser_078:in_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                            // rsp_demux_017:src0_endofpacket -> crosser_078:in_endofpacket
	wire          crosser_078_out_valid;                                     // crosser_078:out_valid -> rsp_mux:sink17_valid
	wire  [166:0] crosser_078_out_data;                                      // crosser_078:out_data -> rsp_mux:sink17_data
	wire          crosser_078_out_ready;                                     // rsp_mux:sink17_ready -> crosser_078:out_ready
	wire   [21:0] crosser_078_out_channel;                                   // crosser_078:out_channel -> rsp_mux:sink17_channel
	wire          crosser_078_out_startofpacket;                             // crosser_078:out_startofpacket -> rsp_mux:sink17_startofpacket
	wire          crosser_078_out_endofpacket;                               // crosser_078:out_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                  // rsp_demux_017:src1_valid -> crosser_079:in_valid
	wire  [166:0] rsp_demux_017_src1_data;                                   // rsp_demux_017:src1_data -> crosser_079:in_data
	wire          rsp_demux_017_src1_ready;                                  // crosser_079:in_ready -> rsp_demux_017:src1_ready
	wire   [21:0] rsp_demux_017_src1_channel;                                // rsp_demux_017:src1_channel -> crosser_079:in_channel
	wire          rsp_demux_017_src1_startofpacket;                          // rsp_demux_017:src1_startofpacket -> crosser_079:in_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                            // rsp_demux_017:src1_endofpacket -> crosser_079:in_endofpacket
	wire          crosser_079_out_valid;                                     // crosser_079:out_valid -> rsp_mux_001:sink17_valid
	wire  [166:0] crosser_079_out_data;                                      // crosser_079:out_data -> rsp_mux_001:sink17_data
	wire          crosser_079_out_ready;                                     // rsp_mux_001:sink17_ready -> crosser_079:out_ready
	wire   [21:0] crosser_079_out_channel;                                   // crosser_079:out_channel -> rsp_mux_001:sink17_channel
	wire          crosser_079_out_startofpacket;                             // crosser_079:out_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          crosser_079_out_endofpacket;                               // crosser_079:out_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                  // rsp_demux_018:src0_valid -> crosser_080:in_valid
	wire  [166:0] rsp_demux_018_src0_data;                                   // rsp_demux_018:src0_data -> crosser_080:in_data
	wire          rsp_demux_018_src0_ready;                                  // crosser_080:in_ready -> rsp_demux_018:src0_ready
	wire   [21:0] rsp_demux_018_src0_channel;                                // rsp_demux_018:src0_channel -> crosser_080:in_channel
	wire          rsp_demux_018_src0_startofpacket;                          // rsp_demux_018:src0_startofpacket -> crosser_080:in_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                            // rsp_demux_018:src0_endofpacket -> crosser_080:in_endofpacket
	wire          crosser_080_out_valid;                                     // crosser_080:out_valid -> rsp_mux:sink18_valid
	wire  [166:0] crosser_080_out_data;                                      // crosser_080:out_data -> rsp_mux:sink18_data
	wire          crosser_080_out_ready;                                     // rsp_mux:sink18_ready -> crosser_080:out_ready
	wire   [21:0] crosser_080_out_channel;                                   // crosser_080:out_channel -> rsp_mux:sink18_channel
	wire          crosser_080_out_startofpacket;                             // crosser_080:out_startofpacket -> rsp_mux:sink18_startofpacket
	wire          crosser_080_out_endofpacket;                               // crosser_080:out_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                  // rsp_demux_018:src1_valid -> crosser_081:in_valid
	wire  [166:0] rsp_demux_018_src1_data;                                   // rsp_demux_018:src1_data -> crosser_081:in_data
	wire          rsp_demux_018_src1_ready;                                  // crosser_081:in_ready -> rsp_demux_018:src1_ready
	wire   [21:0] rsp_demux_018_src1_channel;                                // rsp_demux_018:src1_channel -> crosser_081:in_channel
	wire          rsp_demux_018_src1_startofpacket;                          // rsp_demux_018:src1_startofpacket -> crosser_081:in_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                            // rsp_demux_018:src1_endofpacket -> crosser_081:in_endofpacket
	wire          crosser_081_out_valid;                                     // crosser_081:out_valid -> rsp_mux_001:sink18_valid
	wire  [166:0] crosser_081_out_data;                                      // crosser_081:out_data -> rsp_mux_001:sink18_data
	wire          crosser_081_out_ready;                                     // rsp_mux_001:sink18_ready -> crosser_081:out_ready
	wire   [21:0] crosser_081_out_channel;                                   // crosser_081:out_channel -> rsp_mux_001:sink18_channel
	wire          crosser_081_out_startofpacket;                             // crosser_081:out_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          crosser_081_out_endofpacket;                               // crosser_081:out_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                  // rsp_demux_019:src0_valid -> crosser_082:in_valid
	wire  [166:0] rsp_demux_019_src0_data;                                   // rsp_demux_019:src0_data -> crosser_082:in_data
	wire          rsp_demux_019_src0_ready;                                  // crosser_082:in_ready -> rsp_demux_019:src0_ready
	wire   [21:0] rsp_demux_019_src0_channel;                                // rsp_demux_019:src0_channel -> crosser_082:in_channel
	wire          rsp_demux_019_src0_startofpacket;                          // rsp_demux_019:src0_startofpacket -> crosser_082:in_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                            // rsp_demux_019:src0_endofpacket -> crosser_082:in_endofpacket
	wire          crosser_082_out_valid;                                     // crosser_082:out_valid -> rsp_mux:sink19_valid
	wire  [166:0] crosser_082_out_data;                                      // crosser_082:out_data -> rsp_mux:sink19_data
	wire          crosser_082_out_ready;                                     // rsp_mux:sink19_ready -> crosser_082:out_ready
	wire   [21:0] crosser_082_out_channel;                                   // crosser_082:out_channel -> rsp_mux:sink19_channel
	wire          crosser_082_out_startofpacket;                             // crosser_082:out_startofpacket -> rsp_mux:sink19_startofpacket
	wire          crosser_082_out_endofpacket;                               // crosser_082:out_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                  // rsp_demux_019:src1_valid -> crosser_083:in_valid
	wire  [166:0] rsp_demux_019_src1_data;                                   // rsp_demux_019:src1_data -> crosser_083:in_data
	wire          rsp_demux_019_src1_ready;                                  // crosser_083:in_ready -> rsp_demux_019:src1_ready
	wire   [21:0] rsp_demux_019_src1_channel;                                // rsp_demux_019:src1_channel -> crosser_083:in_channel
	wire          rsp_demux_019_src1_startofpacket;                          // rsp_demux_019:src1_startofpacket -> crosser_083:in_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                            // rsp_demux_019:src1_endofpacket -> crosser_083:in_endofpacket
	wire          crosser_083_out_valid;                                     // crosser_083:out_valid -> rsp_mux_001:sink19_valid
	wire  [166:0] crosser_083_out_data;                                      // crosser_083:out_data -> rsp_mux_001:sink19_data
	wire          crosser_083_out_ready;                                     // rsp_mux_001:sink19_ready -> crosser_083:out_ready
	wire   [21:0] crosser_083_out_channel;                                   // crosser_083:out_channel -> rsp_mux_001:sink19_channel
	wire          crosser_083_out_startofpacket;                             // crosser_083:out_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          crosser_083_out_endofpacket;                               // crosser_083:out_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                  // rsp_demux_020:src0_valid -> crosser_084:in_valid
	wire  [166:0] rsp_demux_020_src0_data;                                   // rsp_demux_020:src0_data -> crosser_084:in_data
	wire          rsp_demux_020_src0_ready;                                  // crosser_084:in_ready -> rsp_demux_020:src0_ready
	wire   [21:0] rsp_demux_020_src0_channel;                                // rsp_demux_020:src0_channel -> crosser_084:in_channel
	wire          rsp_demux_020_src0_startofpacket;                          // rsp_demux_020:src0_startofpacket -> crosser_084:in_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                            // rsp_demux_020:src0_endofpacket -> crosser_084:in_endofpacket
	wire          crosser_084_out_valid;                                     // crosser_084:out_valid -> rsp_mux:sink20_valid
	wire  [166:0] crosser_084_out_data;                                      // crosser_084:out_data -> rsp_mux:sink20_data
	wire          crosser_084_out_ready;                                     // rsp_mux:sink20_ready -> crosser_084:out_ready
	wire   [21:0] crosser_084_out_channel;                                   // crosser_084:out_channel -> rsp_mux:sink20_channel
	wire          crosser_084_out_startofpacket;                             // crosser_084:out_startofpacket -> rsp_mux:sink20_startofpacket
	wire          crosser_084_out_endofpacket;                               // crosser_084:out_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                  // rsp_demux_020:src1_valid -> crosser_085:in_valid
	wire  [166:0] rsp_demux_020_src1_data;                                   // rsp_demux_020:src1_data -> crosser_085:in_data
	wire          rsp_demux_020_src1_ready;                                  // crosser_085:in_ready -> rsp_demux_020:src1_ready
	wire   [21:0] rsp_demux_020_src1_channel;                                // rsp_demux_020:src1_channel -> crosser_085:in_channel
	wire          rsp_demux_020_src1_startofpacket;                          // rsp_demux_020:src1_startofpacket -> crosser_085:in_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                            // rsp_demux_020:src1_endofpacket -> crosser_085:in_endofpacket
	wire          crosser_085_out_valid;                                     // crosser_085:out_valid -> rsp_mux_001:sink20_valid
	wire  [166:0] crosser_085_out_data;                                      // crosser_085:out_data -> rsp_mux_001:sink20_data
	wire          crosser_085_out_ready;                                     // rsp_mux_001:sink20_ready -> crosser_085:out_ready
	wire   [21:0] crosser_085_out_channel;                                   // crosser_085:out_channel -> rsp_mux_001:sink20_channel
	wire          crosser_085_out_startofpacket;                             // crosser_085:out_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          crosser_085_out_endofpacket;                               // crosser_085:out_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                  // rsp_demux_021:src0_valid -> crosser_086:in_valid
	wire  [166:0] rsp_demux_021_src0_data;                                   // rsp_demux_021:src0_data -> crosser_086:in_data
	wire          rsp_demux_021_src0_ready;                                  // crosser_086:in_ready -> rsp_demux_021:src0_ready
	wire   [21:0] rsp_demux_021_src0_channel;                                // rsp_demux_021:src0_channel -> crosser_086:in_channel
	wire          rsp_demux_021_src0_startofpacket;                          // rsp_demux_021:src0_startofpacket -> crosser_086:in_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                            // rsp_demux_021:src0_endofpacket -> crosser_086:in_endofpacket
	wire          crosser_086_out_valid;                                     // crosser_086:out_valid -> rsp_mux:sink21_valid
	wire  [166:0] crosser_086_out_data;                                      // crosser_086:out_data -> rsp_mux:sink21_data
	wire          crosser_086_out_ready;                                     // rsp_mux:sink21_ready -> crosser_086:out_ready
	wire   [21:0] crosser_086_out_channel;                                   // crosser_086:out_channel -> rsp_mux:sink21_channel
	wire          crosser_086_out_startofpacket;                             // crosser_086:out_startofpacket -> rsp_mux:sink21_startofpacket
	wire          crosser_086_out_endofpacket;                               // crosser_086:out_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_021_src1_valid;                                  // rsp_demux_021:src1_valid -> crosser_087:in_valid
	wire  [166:0] rsp_demux_021_src1_data;                                   // rsp_demux_021:src1_data -> crosser_087:in_data
	wire          rsp_demux_021_src1_ready;                                  // crosser_087:in_ready -> rsp_demux_021:src1_ready
	wire   [21:0] rsp_demux_021_src1_channel;                                // rsp_demux_021:src1_channel -> crosser_087:in_channel
	wire          rsp_demux_021_src1_startofpacket;                          // rsp_demux_021:src1_startofpacket -> crosser_087:in_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                            // rsp_demux_021:src1_endofpacket -> crosser_087:in_endofpacket
	wire          crosser_087_out_valid;                                     // crosser_087:out_valid -> rsp_mux_001:sink21_valid
	wire  [166:0] crosser_087_out_data;                                      // crosser_087:out_data -> rsp_mux_001:sink21_data
	wire          crosser_087_out_ready;                                     // rsp_mux_001:sink21_ready -> crosser_087:out_ready
	wire   [21:0] crosser_087_out_channel;                                   // crosser_087:out_channel -> rsp_mux_001:sink21_channel
	wire          crosser_087_out_startofpacket;                             // crosser_087:out_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          crosser_087_out_endofpacket;                               // crosser_087:out_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire   [21:0] hps_0_h2f_axi_master_wr_limiter_cmd_valid_data;            // hps_0_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [21:0] hps_0_h2f_axi_master_rd_limiter_cmd_valid_data;            // hps_0_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          video_input_out_agent_rdata_fifo_out_valid;                // video_input_out_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] video_input_out_agent_rdata_fifo_out_data;                 // video_input_out_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          video_input_out_agent_rdata_fifo_out_ready;                // avalon_st_adapter:in_0_ready -> video_input_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                             // avalon_st_adapter:out_0_valid -> video_input_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                              // avalon_st_adapter:out_0_data -> video_input_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                             // video_input_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                             // avalon_st_adapter:out_0_error -> video_input_out_agent:rdata_fifo_sink_error
	wire          video_input_0_out_agent_rdata_fifo_out_valid;              // video_input_0_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] video_input_0_out_agent_rdata_fifo_out_data;               // video_input_0_out_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          video_input_0_out_agent_rdata_fifo_out_ready;              // avalon_st_adapter_001:in_0_ready -> video_input_0_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                         // avalon_st_adapter_001:out_0_valid -> video_input_0_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                          // avalon_st_adapter_001:out_0_data -> video_input_0_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                         // video_input_0_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                         // avalon_st_adapter_001:out_0_error -> video_input_0_out_agent:rdata_fifo_sink_error
	wire          video_input_1_out_agent_rdata_fifo_out_valid;              // video_input_1_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] video_input_1_out_agent_rdata_fifo_out_data;               // video_input_1_out_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          video_input_1_out_agent_rdata_fifo_out_ready;              // avalon_st_adapter_002:in_0_ready -> video_input_1_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                         // avalon_st_adapter_002:out_0_valid -> video_input_1_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                          // avalon_st_adapter_002:out_0_data -> video_input_1_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                         // video_input_1_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                         // avalon_st_adapter_002:out_0_error -> video_input_1_out_agent:rdata_fifo_sink_error
	wire          video_input_2_out_agent_rdata_fifo_out_valid;              // video_input_2_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] video_input_2_out_agent_rdata_fifo_out_data;               // video_input_2_out_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          video_input_2_out_agent_rdata_fifo_out_ready;              // avalon_st_adapter_003:in_0_ready -> video_input_2_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                         // avalon_st_adapter_003:out_0_valid -> video_input_2_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                          // avalon_st_adapter_003:out_0_data -> video_input_2_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                         // video_input_2_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                         // avalon_st_adapter_003:out_0_error -> video_input_2_out_agent:rdata_fifo_sink_error
	wire          video_input_3_out_agent_rdata_fifo_out_valid;              // video_input_3_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] video_input_3_out_agent_rdata_fifo_out_data;               // video_input_3_out_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          video_input_3_out_agent_rdata_fifo_out_ready;              // avalon_st_adapter_004:in_0_ready -> video_input_3_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                         // avalon_st_adapter_004:out_0_valid -> video_input_3_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                          // avalon_st_adapter_004:out_0_data -> video_input_3_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                         // video_input_3_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                         // avalon_st_adapter_004:out_0_error -> video_input_3_out_agent:rdata_fifo_sink_error
	wire          video_input_4_out_agent_rdata_fifo_out_valid;              // video_input_4_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] video_input_4_out_agent_rdata_fifo_out_data;               // video_input_4_out_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          video_input_4_out_agent_rdata_fifo_out_ready;              // avalon_st_adapter_005:in_0_ready -> video_input_4_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                         // avalon_st_adapter_005:out_0_valid -> video_input_4_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                          // avalon_st_adapter_005:out_0_data -> video_input_4_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                         // video_input_4_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                         // avalon_st_adapter_005:out_0_error -> video_input_4_out_agent:rdata_fifo_sink_error
	wire          video_input_5_out_agent_rdata_fifo_out_valid;              // video_input_5_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] video_input_5_out_agent_rdata_fifo_out_data;               // video_input_5_out_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          video_input_5_out_agent_rdata_fifo_out_ready;              // avalon_st_adapter_006:in_0_ready -> video_input_5_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                         // avalon_st_adapter_006:out_0_valid -> video_input_5_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                          // avalon_st_adapter_006:out_0_data -> video_input_5_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                         // video_input_5_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                         // avalon_st_adapter_006:out_0_error -> video_input_5_out_agent:rdata_fifo_sink_error
	wire          video_input_6_out_agent_rdata_fifo_out_valid;              // video_input_6_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] video_input_6_out_agent_rdata_fifo_out_data;               // video_input_6_out_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          video_input_6_out_agent_rdata_fifo_out_ready;              // avalon_st_adapter_007:in_0_ready -> video_input_6_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                         // avalon_st_adapter_007:out_0_valid -> video_input_6_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                          // avalon_st_adapter_007:out_0_data -> video_input_6_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                         // video_input_6_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                         // avalon_st_adapter_007:out_0_error -> video_input_6_out_agent:rdata_fifo_sink_error
	wire          video_input_7_out_agent_rdata_fifo_out_valid;              // video_input_7_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] video_input_7_out_agent_rdata_fifo_out_data;               // video_input_7_out_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          video_input_7_out_agent_rdata_fifo_out_ready;              // avalon_st_adapter_008:in_0_ready -> video_input_7_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                         // avalon_st_adapter_008:out_0_valid -> video_input_7_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                          // avalon_st_adapter_008:out_0_data -> video_input_7_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                         // video_input_7_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                         // avalon_st_adapter_008:out_0_error -> video_input_7_out_agent:rdata_fifo_sink_error
	wire          video_input_8_out_agent_rdata_fifo_out_valid;              // video_input_8_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] video_input_8_out_agent_rdata_fifo_out_data;               // video_input_8_out_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          video_input_8_out_agent_rdata_fifo_out_ready;              // avalon_st_adapter_009:in_0_ready -> video_input_8_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                         // avalon_st_adapter_009:out_0_valid -> video_input_8_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                          // avalon_st_adapter_009:out_0_data -> video_input_8_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                         // video_input_8_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                         // avalon_st_adapter_009:out_0_error -> video_input_8_out_agent:rdata_fifo_sink_error
	wire          video_input_9_out_agent_rdata_fifo_out_valid;              // video_input_9_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] video_input_9_out_agent_rdata_fifo_out_data;               // video_input_9_out_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          video_input_9_out_agent_rdata_fifo_out_ready;              // avalon_st_adapter_010:in_0_ready -> video_input_9_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                         // avalon_st_adapter_010:out_0_valid -> video_input_9_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                          // avalon_st_adapter_010:out_0_data -> video_input_9_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                         // video_input_9_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                         // avalon_st_adapter_010:out_0_error -> video_input_9_out_agent:rdata_fifo_sink_error
	wire          video_input_out_csr_agent_rdata_fifo_out_valid;            // video_input_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] video_input_out_csr_agent_rdata_fifo_out_data;             // video_input_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          video_input_out_csr_agent_rdata_fifo_out_ready;            // avalon_st_adapter_011:in_0_ready -> video_input_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                         // avalon_st_adapter_011:out_0_valid -> video_input_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                          // avalon_st_adapter_011:out_0_data -> video_input_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                         // video_input_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                         // avalon_st_adapter_011:out_0_error -> video_input_out_csr_agent:rdata_fifo_sink_error
	wire          video_input_0_out_csr_agent_rdata_fifo_out_valid;          // video_input_0_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] video_input_0_out_csr_agent_rdata_fifo_out_data;           // video_input_0_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          video_input_0_out_csr_agent_rdata_fifo_out_ready;          // avalon_st_adapter_012:in_0_ready -> video_input_0_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                         // avalon_st_adapter_012:out_0_valid -> video_input_0_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                          // avalon_st_adapter_012:out_0_data -> video_input_0_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                         // video_input_0_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                         // avalon_st_adapter_012:out_0_error -> video_input_0_out_csr_agent:rdata_fifo_sink_error
	wire          video_input_1_out_csr_agent_rdata_fifo_out_valid;          // video_input_1_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] video_input_1_out_csr_agent_rdata_fifo_out_data;           // video_input_1_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          video_input_1_out_csr_agent_rdata_fifo_out_ready;          // avalon_st_adapter_013:in_0_ready -> video_input_1_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                         // avalon_st_adapter_013:out_0_valid -> video_input_1_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                          // avalon_st_adapter_013:out_0_data -> video_input_1_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                         // video_input_1_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                         // avalon_st_adapter_013:out_0_error -> video_input_1_out_csr_agent:rdata_fifo_sink_error
	wire          video_input_2_out_csr_agent_rdata_fifo_out_valid;          // video_input_2_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] video_input_2_out_csr_agent_rdata_fifo_out_data;           // video_input_2_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          video_input_2_out_csr_agent_rdata_fifo_out_ready;          // avalon_st_adapter_014:in_0_ready -> video_input_2_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                         // avalon_st_adapter_014:out_0_valid -> video_input_2_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                          // avalon_st_adapter_014:out_0_data -> video_input_2_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                         // video_input_2_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                         // avalon_st_adapter_014:out_0_error -> video_input_2_out_csr_agent:rdata_fifo_sink_error
	wire          video_input_3_out_csr_agent_rdata_fifo_out_valid;          // video_input_3_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] video_input_3_out_csr_agent_rdata_fifo_out_data;           // video_input_3_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          video_input_3_out_csr_agent_rdata_fifo_out_ready;          // avalon_st_adapter_015:in_0_ready -> video_input_3_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                         // avalon_st_adapter_015:out_0_valid -> video_input_3_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                          // avalon_st_adapter_015:out_0_data -> video_input_3_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                         // video_input_3_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                         // avalon_st_adapter_015:out_0_error -> video_input_3_out_csr_agent:rdata_fifo_sink_error
	wire          video_input_4_out_csr_agent_rdata_fifo_out_valid;          // video_input_4_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] video_input_4_out_csr_agent_rdata_fifo_out_data;           // video_input_4_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          video_input_4_out_csr_agent_rdata_fifo_out_ready;          // avalon_st_adapter_016:in_0_ready -> video_input_4_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                         // avalon_st_adapter_016:out_0_valid -> video_input_4_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                          // avalon_st_adapter_016:out_0_data -> video_input_4_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                         // video_input_4_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                         // avalon_st_adapter_016:out_0_error -> video_input_4_out_csr_agent:rdata_fifo_sink_error
	wire          video_input_5_out_csr_agent_rdata_fifo_out_valid;          // video_input_5_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] video_input_5_out_csr_agent_rdata_fifo_out_data;           // video_input_5_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          video_input_5_out_csr_agent_rdata_fifo_out_ready;          // avalon_st_adapter_017:in_0_ready -> video_input_5_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                         // avalon_st_adapter_017:out_0_valid -> video_input_5_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                          // avalon_st_adapter_017:out_0_data -> video_input_5_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                         // video_input_5_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                         // avalon_st_adapter_017:out_0_error -> video_input_5_out_csr_agent:rdata_fifo_sink_error
	wire          video_input_6_out_csr_agent_rdata_fifo_out_valid;          // video_input_6_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] video_input_6_out_csr_agent_rdata_fifo_out_data;           // video_input_6_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          video_input_6_out_csr_agent_rdata_fifo_out_ready;          // avalon_st_adapter_018:in_0_ready -> video_input_6_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                         // avalon_st_adapter_018:out_0_valid -> video_input_6_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                          // avalon_st_adapter_018:out_0_data -> video_input_6_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                         // video_input_6_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                         // avalon_st_adapter_018:out_0_error -> video_input_6_out_csr_agent:rdata_fifo_sink_error
	wire          video_input_7_out_csr_agent_rdata_fifo_out_valid;          // video_input_7_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] video_input_7_out_csr_agent_rdata_fifo_out_data;           // video_input_7_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          video_input_7_out_csr_agent_rdata_fifo_out_ready;          // avalon_st_adapter_019:in_0_ready -> video_input_7_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                         // avalon_st_adapter_019:out_0_valid -> video_input_7_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                          // avalon_st_adapter_019:out_0_data -> video_input_7_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                         // video_input_7_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                         // avalon_st_adapter_019:out_0_error -> video_input_7_out_csr_agent:rdata_fifo_sink_error
	wire          video_input_8_out_csr_agent_rdata_fifo_out_valid;          // video_input_8_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] video_input_8_out_csr_agent_rdata_fifo_out_data;           // video_input_8_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_020:in_0_data
	wire          video_input_8_out_csr_agent_rdata_fifo_out_ready;          // avalon_st_adapter_020:in_0_ready -> video_input_8_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_020_out_0_valid;                         // avalon_st_adapter_020:out_0_valid -> video_input_8_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                          // avalon_st_adapter_020:out_0_data -> video_input_8_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                         // video_input_8_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                         // avalon_st_adapter_020:out_0_error -> video_input_8_out_csr_agent:rdata_fifo_sink_error
	wire          video_input_9_out_csr_agent_rdata_fifo_out_valid;          // video_input_9_out_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] video_input_9_out_csr_agent_rdata_fifo_out_data;           // video_input_9_out_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_021:in_0_data
	wire          video_input_9_out_csr_agent_rdata_fifo_out_ready;          // avalon_st_adapter_021:in_0_ready -> video_input_9_out_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_021_out_0_valid;                         // avalon_st_adapter_021:out_0_valid -> video_input_9_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                          // avalon_st_adapter_021:out_0_data -> video_input_9_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                         // video_input_9_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                         // avalon_st_adapter_021:out_0_error -> video_input_9_out_csr_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_out_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_out_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (video_input_out_agent_m0_read),                     //                         .read
		.uav_write              (video_input_out_agent_m0_write),                    //                         .write
		.uav_waitrequest        (video_input_out_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (video_input_out_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (video_input_out_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (video_input_out_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (video_input_out_agent_m0_writedata),                //                         .writedata
		.uav_lock               (video_input_out_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (video_input_out_agent_m0_debugaccess),              //                         .debugaccess
		.av_read                (video_input_out_read),                              //      avalon_anti_slave_0.read
		.av_readdata            (video_input_out_readdata),                          //                         .readdata
		.av_waitrequest         (video_input_out_waitrequest),                       //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_0_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_0_out_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_0_out_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (video_input_0_out_agent_m0_read),                   //                         .read
		.uav_write              (video_input_0_out_agent_m0_write),                  //                         .write
		.uav_waitrequest        (video_input_0_out_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (video_input_0_out_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (video_input_0_out_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (video_input_0_out_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (video_input_0_out_agent_m0_writedata),              //                         .writedata
		.uav_lock               (video_input_0_out_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (video_input_0_out_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (video_input_0_out_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (video_input_0_out_readdata),                        //                         .readdata
		.av_waitrequest         (video_input_0_out_waitrequest),                     //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_1_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_1_out_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_1_out_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (video_input_1_out_agent_m0_read),                   //                         .read
		.uav_write              (video_input_1_out_agent_m0_write),                  //                         .write
		.uav_waitrequest        (video_input_1_out_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (video_input_1_out_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (video_input_1_out_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (video_input_1_out_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (video_input_1_out_agent_m0_writedata),              //                         .writedata
		.uav_lock               (video_input_1_out_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (video_input_1_out_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (video_input_1_out_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (video_input_1_out_readdata),                        //                         .readdata
		.av_waitrequest         (video_input_1_out_waitrequest),                     //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_2_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_2_out_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_2_out_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (video_input_2_out_agent_m0_read),                   //                         .read
		.uav_write              (video_input_2_out_agent_m0_write),                  //                         .write
		.uav_waitrequest        (video_input_2_out_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (video_input_2_out_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (video_input_2_out_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (video_input_2_out_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (video_input_2_out_agent_m0_writedata),              //                         .writedata
		.uav_lock               (video_input_2_out_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (video_input_2_out_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (video_input_2_out_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (video_input_2_out_readdata),                        //                         .readdata
		.av_waitrequest         (video_input_2_out_waitrequest),                     //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_3_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_3_out_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_3_out_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (video_input_3_out_agent_m0_read),                   //                         .read
		.uav_write              (video_input_3_out_agent_m0_write),                  //                         .write
		.uav_waitrequest        (video_input_3_out_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (video_input_3_out_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (video_input_3_out_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (video_input_3_out_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (video_input_3_out_agent_m0_writedata),              //                         .writedata
		.uav_lock               (video_input_3_out_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (video_input_3_out_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (video_input_3_out_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (video_input_3_out_readdata),                        //                         .readdata
		.av_waitrequest         (video_input_3_out_waitrequest),                     //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_4_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_4_out_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_4_out_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (video_input_4_out_agent_m0_read),                   //                         .read
		.uav_write              (video_input_4_out_agent_m0_write),                  //                         .write
		.uav_waitrequest        (video_input_4_out_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (video_input_4_out_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (video_input_4_out_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (video_input_4_out_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (video_input_4_out_agent_m0_writedata),              //                         .writedata
		.uav_lock               (video_input_4_out_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (video_input_4_out_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (video_input_4_out_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (video_input_4_out_readdata),                        //                         .readdata
		.av_waitrequest         (video_input_4_out_waitrequest),                     //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_5_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_5_out_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_5_out_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (video_input_5_out_agent_m0_read),                   //                         .read
		.uav_write              (video_input_5_out_agent_m0_write),                  //                         .write
		.uav_waitrequest        (video_input_5_out_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (video_input_5_out_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (video_input_5_out_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (video_input_5_out_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (video_input_5_out_agent_m0_writedata),              //                         .writedata
		.uav_lock               (video_input_5_out_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (video_input_5_out_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (video_input_5_out_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (video_input_5_out_readdata),                        //                         .readdata
		.av_waitrequest         (video_input_5_out_waitrequest),                     //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_6_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_6_out_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_6_out_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (video_input_6_out_agent_m0_read),                   //                         .read
		.uav_write              (video_input_6_out_agent_m0_write),                  //                         .write
		.uav_waitrequest        (video_input_6_out_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (video_input_6_out_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (video_input_6_out_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (video_input_6_out_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (video_input_6_out_agent_m0_writedata),              //                         .writedata
		.uav_lock               (video_input_6_out_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (video_input_6_out_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (video_input_6_out_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (video_input_6_out_readdata),                        //                         .readdata
		.av_waitrequest         (video_input_6_out_waitrequest),                     //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_7_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_7_out_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_7_out_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (video_input_7_out_agent_m0_read),                   //                         .read
		.uav_write              (video_input_7_out_agent_m0_write),                  //                         .write
		.uav_waitrequest        (video_input_7_out_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (video_input_7_out_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (video_input_7_out_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (video_input_7_out_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (video_input_7_out_agent_m0_writedata),              //                         .writedata
		.uav_lock               (video_input_7_out_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (video_input_7_out_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (video_input_7_out_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (video_input_7_out_readdata),                        //                         .readdata
		.av_waitrequest         (video_input_7_out_waitrequest),                     //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_8_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_8_out_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_8_out_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (video_input_8_out_agent_m0_read),                   //                         .read
		.uav_write              (video_input_8_out_agent_m0_write),                  //                         .write
		.uav_waitrequest        (video_input_8_out_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (video_input_8_out_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (video_input_8_out_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (video_input_8_out_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (video_input_8_out_agent_m0_writedata),              //                         .writedata
		.uav_lock               (video_input_8_out_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (video_input_8_out_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (video_input_8_out_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (video_input_8_out_readdata),                        //                         .readdata
		.av_waitrequest         (video_input_8_out_waitrequest),                     //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_9_out_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_9_out_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_9_out_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (video_input_9_out_agent_m0_read),                   //                         .read
		.uav_write              (video_input_9_out_agent_m0_write),                  //                         .write
		.uav_waitrequest        (video_input_9_out_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (video_input_9_out_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (video_input_9_out_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (video_input_9_out_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (video_input_9_out_agent_m0_writedata),              //                         .writedata
		.uav_lock               (video_input_9_out_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (video_input_9_out_agent_m0_debugaccess),            //                         .debugaccess
		.av_read                (video_input_9_out_read),                            //      avalon_anti_slave_0.read
		.av_readdata            (video_input_9_out_readdata),                        //                         .readdata
		.av_waitrequest         (video_input_9_out_waitrequest),                     //                         .waitrequest
		.av_address             (),                                                  //              (terminated)
		.av_write               (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_out_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_out_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (video_input_out_csr_agent_m0_read),                 //                         .read
		.uav_write              (video_input_out_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (video_input_out_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (video_input_out_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (video_input_out_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (video_input_out_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (video_input_out_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (video_input_out_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (video_input_out_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (video_input_out_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (video_input_out_csr_write),                         //                         .write
		.av_read                (video_input_out_csr_read),                          //                         .read
		.av_readdata            (video_input_out_csr_readdata),                      //                         .readdata
		.av_writedata           (video_input_out_csr_writedata),                     //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_0_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_0_out_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_0_out_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_input_0_out_csr_agent_m0_read),               //                         .read
		.uav_write              (video_input_0_out_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_input_0_out_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_input_0_out_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_input_0_out_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_input_0_out_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_input_0_out_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_input_0_out_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_input_0_out_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (video_input_0_out_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (video_input_0_out_csr_write),                       //                         .write
		.av_read                (video_input_0_out_csr_read),                        //                         .read
		.av_readdata            (video_input_0_out_csr_readdata),                    //                         .readdata
		.av_writedata           (video_input_0_out_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_1_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_1_out_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_1_out_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_input_1_out_csr_agent_m0_read),               //                         .read
		.uav_write              (video_input_1_out_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_input_1_out_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_input_1_out_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_input_1_out_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_input_1_out_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_input_1_out_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_input_1_out_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_input_1_out_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (video_input_1_out_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (video_input_1_out_csr_write),                       //                         .write
		.av_read                (video_input_1_out_csr_read),                        //                         .read
		.av_readdata            (video_input_1_out_csr_readdata),                    //                         .readdata
		.av_writedata           (video_input_1_out_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_2_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_2_out_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_2_out_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_input_2_out_csr_agent_m0_read),               //                         .read
		.uav_write              (video_input_2_out_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_input_2_out_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_input_2_out_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_input_2_out_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_input_2_out_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_input_2_out_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_input_2_out_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_input_2_out_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (video_input_2_out_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (video_input_2_out_csr_write),                       //                         .write
		.av_read                (video_input_2_out_csr_read),                        //                         .read
		.av_readdata            (video_input_2_out_csr_readdata),                    //                         .readdata
		.av_writedata           (video_input_2_out_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_3_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_3_out_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_3_out_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_input_3_out_csr_agent_m0_read),               //                         .read
		.uav_write              (video_input_3_out_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_input_3_out_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_input_3_out_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_input_3_out_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_input_3_out_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_input_3_out_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_input_3_out_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_input_3_out_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (video_input_3_out_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (video_input_3_out_csr_write),                       //                         .write
		.av_read                (video_input_3_out_csr_read),                        //                         .read
		.av_readdata            (video_input_3_out_csr_readdata),                    //                         .readdata
		.av_writedata           (video_input_3_out_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_4_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_4_out_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_4_out_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_input_4_out_csr_agent_m0_read),               //                         .read
		.uav_write              (video_input_4_out_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_input_4_out_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_input_4_out_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_input_4_out_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_input_4_out_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_input_4_out_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_input_4_out_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_input_4_out_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (video_input_4_out_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (video_input_4_out_csr_write),                       //                         .write
		.av_read                (video_input_4_out_csr_read),                        //                         .read
		.av_readdata            (video_input_4_out_csr_readdata),                    //                         .readdata
		.av_writedata           (video_input_4_out_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_5_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_5_out_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_5_out_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_input_5_out_csr_agent_m0_read),               //                         .read
		.uav_write              (video_input_5_out_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_input_5_out_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_input_5_out_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_input_5_out_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_input_5_out_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_input_5_out_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_input_5_out_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_input_5_out_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (video_input_5_out_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (video_input_5_out_csr_write),                       //                         .write
		.av_read                (video_input_5_out_csr_read),                        //                         .read
		.av_readdata            (video_input_5_out_csr_readdata),                    //                         .readdata
		.av_writedata           (video_input_5_out_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_6_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_6_out_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_6_out_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_input_6_out_csr_agent_m0_read),               //                         .read
		.uav_write              (video_input_6_out_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_input_6_out_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_input_6_out_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_input_6_out_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_input_6_out_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_input_6_out_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_input_6_out_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_input_6_out_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (video_input_6_out_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (video_input_6_out_csr_write),                       //                         .write
		.av_read                (video_input_6_out_csr_read),                        //                         .read
		.av_readdata            (video_input_6_out_csr_readdata),                    //                         .readdata
		.av_writedata           (video_input_6_out_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_7_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_7_out_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_7_out_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_input_7_out_csr_agent_m0_read),               //                         .read
		.uav_write              (video_input_7_out_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_input_7_out_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_input_7_out_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_input_7_out_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_input_7_out_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_input_7_out_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_input_7_out_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_input_7_out_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (video_input_7_out_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (video_input_7_out_csr_write),                       //                         .write
		.av_read                (video_input_7_out_csr_read),                        //                         .read
		.av_readdata            (video_input_7_out_csr_readdata),                    //                         .readdata
		.av_writedata           (video_input_7_out_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_8_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_8_out_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_8_out_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_input_8_out_csr_agent_m0_read),               //                         .read
		.uav_write              (video_input_8_out_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_input_8_out_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_input_8_out_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_input_8_out_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_input_8_out_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_input_8_out_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_input_8_out_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_input_8_out_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (video_input_8_out_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (video_input_8_out_csr_write),                       //                         .write
		.av_read                (video_input_8_out_csr_read),                        //                         .read
		.av_readdata            (video_input_8_out_csr_readdata),                    //                         .readdata
		.av_writedata           (video_input_8_out_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_input_9_out_csr_translator (
		.clk                    (clk_1_clk_clk),                                     //                      clk.clk
		.reset                  (video_input_reset_out_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_input_9_out_csr_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_input_9_out_csr_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_input_9_out_csr_agent_m0_read),               //                         .read
		.uav_write              (video_input_9_out_csr_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_input_9_out_csr_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_input_9_out_csr_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_input_9_out_csr_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_input_9_out_csr_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_input_9_out_csr_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_input_9_out_csr_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_input_9_out_csr_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (video_input_9_out_csr_address),                     //      avalon_anti_slave_0.address
		.av_write               (video_input_9_out_csr_write),                       //                         .write
		.av_read                (video_input_9_out_csr_read),                        //                         .read
		.av_readdata            (video_input_9_out_csr_readdata),                    //                         .readdata
		.av_writedata           (video_input_9_out_csr_writedata),                   //                         .writedata
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (131),
		.PKT_CACHE_H               (161),
		.PKT_CACHE_L               (158),
		.PKT_ADDR_SIDEBAND_H       (129),
		.PKT_ADDR_SIDEBAND_L       (129),
		.PKT_PROTECTION_H          (157),
		.PKT_PROTECTION_L          (155),
		.PKT_BURST_SIZE_H          (126),
		.PKT_BURST_SIZE_L          (124),
		.PKT_BURST_TYPE_H          (128),
		.PKT_BURST_TYPE_L          (127),
		.PKT_RESPONSE_STATUS_L     (162),
		.PKT_RESPONSE_STATUS_H     (163),
		.PKT_BURSTWRAP_H           (123),
		.PKT_BURSTWRAP_L           (116),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (108),
		.PKT_ADDR_H                (101),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (107),
		.PKT_TRANS_LOCK            (106),
		.PKT_TRANS_COMPRESSED_READ (102),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.PKT_TRANS_READ            (105),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (137),
		.PKT_SRC_ID_L              (133),
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (138),
		.PKT_THREAD_ID_H           (154),
		.PKT_THREAD_ID_L           (143),
		.PKT_QOS_L                 (132),
		.PKT_QOS_H                 (132),
		.PKT_ORI_BURST_SIZE_L      (164),
		.PKT_ORI_BURST_SIZE_H      (166),
		.PKT_DATA_SIDEBAND_H       (130),
		.PKT_DATA_SIDEBAND_L       (130),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (22),
		.ID                        (0)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_out_agent (
		.clk                     (clk_1_clk_clk),                                       //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (video_input_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (video_input_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_out_agent_rf_source_data),              //        in.data
		.in_valid          (video_input_out_agent_rf_source_valid),             //          .valid
		.in_ready          (video_input_out_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (video_input_out_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (video_input_out_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (video_input_out_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (video_input_out_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (video_input_out_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (video_input_out_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (video_input_out_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_out_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (video_input_out_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (video_input_out_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (video_input_out_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (video_input_out_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (video_input_out_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_0_out_agent (
		.clk                     (clk_1_clk_clk),                                         //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (video_input_0_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_0_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_0_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_0_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_0_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_0_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_0_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_0_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_0_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_0_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_0_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_0_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_0_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_0_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_0_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_0_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_0_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_0_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_0_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_0_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_0_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_0_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_0_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_0_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_0_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_0_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_0_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_0_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_0_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_0_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_0_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_0_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (video_input_0_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_0_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_0_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_0_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                      //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_input_0_out_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_0_out_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_0_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_0_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_0_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_0_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_0_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_0_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_0_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_0_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_0_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_0_out_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (video_input_0_out_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (video_input_0_out_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (video_input_0_out_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (video_input_0_out_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (video_input_0_out_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_1_out_agent (
		.clk                     (clk_1_clk_clk),                                         //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (video_input_1_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_1_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_1_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_1_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_1_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_1_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_1_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_1_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_1_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_1_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_1_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_1_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_1_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_1_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_1_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_1_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_1_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_1_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_1_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_1_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_1_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_1_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_1_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_1_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_1_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_1_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_1_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_1_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_1_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_1_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_1_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_1_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (video_input_1_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_1_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_1_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_1_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                      //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_input_1_out_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_1_out_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_1_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_1_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_1_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_1_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_1_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_1_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_1_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_1_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_1_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_1_out_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (video_input_1_out_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (video_input_1_out_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (video_input_1_out_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (video_input_1_out_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (video_input_1_out_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_2_out_agent (
		.clk                     (clk_1_clk_clk),                                         //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (video_input_2_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_2_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_2_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_2_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_2_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_2_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_2_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_2_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_2_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_2_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_2_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_2_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_2_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_2_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_2_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_2_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_2_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_2_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_2_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_2_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_2_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_2_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_2_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_2_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_2_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_2_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_2_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_2_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_2_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_2_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_2_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_2_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (video_input_2_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_2_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_2_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_2_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                      //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_input_2_out_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_2_out_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_2_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_2_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_2_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_2_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_2_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_2_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_2_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_2_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_2_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_2_out_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (video_input_2_out_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (video_input_2_out_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (video_input_2_out_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (video_input_2_out_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (video_input_2_out_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_3_out_agent (
		.clk                     (clk_1_clk_clk),                                         //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (video_input_3_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_3_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_3_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_3_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_3_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_3_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_3_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_3_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_3_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_3_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_3_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_3_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_3_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_3_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_3_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_3_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_3_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_3_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_3_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_3_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_3_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_3_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_3_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_3_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_3_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_3_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_3_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_3_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_3_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_3_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_3_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_3_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (video_input_3_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_3_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_3_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_3_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                      //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_input_3_out_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_3_out_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_3_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_3_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_3_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_3_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_3_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_3_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_3_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_3_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_3_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_3_out_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (video_input_3_out_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (video_input_3_out_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (video_input_3_out_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (video_input_3_out_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (video_input_3_out_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_4_out_agent (
		.clk                     (clk_1_clk_clk),                                         //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (video_input_4_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_4_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_4_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_4_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_4_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_4_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_4_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_4_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_4_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_4_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_4_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_4_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_4_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_4_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_4_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_4_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_4_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_4_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_4_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_4_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_4_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_4_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_4_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_4_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_4_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_4_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_4_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_4_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_4_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_4_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_4_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_4_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (video_input_4_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_4_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_4_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_4_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                      //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_input_4_out_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_4_out_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_4_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_4_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_4_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_4_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_4_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_4_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_4_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_4_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_4_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_4_out_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (video_input_4_out_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (video_input_4_out_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (video_input_4_out_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (video_input_4_out_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (video_input_4_out_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_5_out_agent (
		.clk                     (clk_1_clk_clk),                                         //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (video_input_5_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_5_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_5_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_5_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_5_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_5_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_5_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_5_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_5_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_5_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_5_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_5_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_5_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_5_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_5_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_5_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_5_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_5_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_5_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_5_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_5_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_5_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_5_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_5_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_5_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_5_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_5_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_5_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_5_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_5_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_5_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_5_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (video_input_5_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_5_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_5_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_5_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                      //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_input_5_out_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_5_out_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_5_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_5_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_5_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_5_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_5_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_5_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_5_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_5_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_5_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_5_out_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (video_input_5_out_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (video_input_5_out_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (video_input_5_out_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (video_input_5_out_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (video_input_5_out_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_6_out_agent (
		.clk                     (clk_1_clk_clk),                                         //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (video_input_6_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_6_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_6_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_6_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_6_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_6_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_6_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_6_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_6_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_6_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_6_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_6_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_6_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_6_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_6_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_6_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_6_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_6_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_6_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_6_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_6_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_6_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_6_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_6_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_6_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_6_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_6_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_6_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_6_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_6_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_6_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_6_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (video_input_6_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_6_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_6_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_6_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                      //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_input_6_out_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_6_out_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_6_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_6_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_6_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_6_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_6_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_6_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_6_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_6_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_6_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_6_out_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (video_input_6_out_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (video_input_6_out_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (video_input_6_out_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (video_input_6_out_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (video_input_6_out_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_7_out_agent (
		.clk                     (clk_1_clk_clk),                                         //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (video_input_7_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_7_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_7_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_7_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_7_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_7_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_7_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_7_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_7_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_7_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_7_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_7_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_7_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_7_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_7_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_7_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_7_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_7_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_7_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_7_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_7_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_7_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_7_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_7_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_7_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_7_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_7_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_7_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_7_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_7_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_7_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_7_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (video_input_7_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_7_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_7_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_7_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                      //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_input_7_out_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_7_out_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_7_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_7_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_7_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_7_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_7_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_7_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_7_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_7_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_7_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_7_out_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (video_input_7_out_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (video_input_7_out_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (video_input_7_out_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (video_input_7_out_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (video_input_7_out_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_8_out_agent (
		.clk                     (clk_1_clk_clk),                                         //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (video_input_8_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_8_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_8_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_8_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_8_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_8_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_8_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_8_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_8_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_8_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_8_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_8_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_8_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_8_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_8_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_8_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_8_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_8_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_8_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_8_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_8_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_8_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_8_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_8_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_8_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_8_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_8_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_8_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_8_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_8_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_8_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_8_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (video_input_8_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_8_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_8_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_8_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                      //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_input_8_out_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_8_out_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_8_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_8_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_8_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_8_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_8_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_8_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_8_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_8_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_8_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_8_out_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (video_input_8_out_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (video_input_8_out_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (video_input_8_out_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (video_input_8_out_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (video_input_8_out_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_9_out_agent (
		.clk                     (clk_1_clk_clk),                                         //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (video_input_9_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_9_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_9_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_9_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_9_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_9_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_9_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_9_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_9_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_9_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_9_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_9_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_9_out_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_9_out_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_9_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_9_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_9_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_9_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_9_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_9_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_9_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_9_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_9_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_9_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_9_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_9_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_9_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_9_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_9_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_9_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_9_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_9_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (video_input_9_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_9_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_9_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_9_out_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                      //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (video_input_9_out_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_9_out_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_9_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_9_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_9_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_9_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_9_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_9_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_9_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_9_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_9_out_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_9_out_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (video_input_9_out_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (video_input_9_out_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (video_input_9_out_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (video_input_9_out_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (video_input_9_out_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                           //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (video_input_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (video_input_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                        //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (video_input_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_out_csr_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (video_input_out_csr_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (video_input_out_csr_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (video_input_out_csr_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (video_input_out_csr_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (video_input_out_csr_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_0_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                             //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_input_0_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_0_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_0_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_0_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_0_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_0_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_0_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_0_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_0_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_0_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_0_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_0_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_0_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_0_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_0_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_0_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_0_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_0_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_0_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_0_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_0_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_0_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_0_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_0_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_0_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_0_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_0_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_0_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_0_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_0_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_0_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_0_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (video_input_0_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_0_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_0_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_0_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_input_0_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_0_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_0_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_0_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_0_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_0_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_0_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_0_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_0_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_0_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_0_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_0_out_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_input_0_out_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_input_0_out_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_input_0_out_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_input_0_out_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_input_0_out_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_1_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                             //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_input_1_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_1_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_1_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_1_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_1_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_1_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_1_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_1_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_1_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_1_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_1_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_1_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_1_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_1_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_1_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_1_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_1_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_1_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_1_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_1_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_1_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_1_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_1_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_1_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_1_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_1_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_1_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_1_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_1_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_1_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_1_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_1_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (video_input_1_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_1_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_1_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_1_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_input_1_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_1_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_1_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_1_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_1_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_1_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_1_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_1_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_1_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_1_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_1_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_1_out_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_input_1_out_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_input_1_out_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_input_1_out_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_input_1_out_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_input_1_out_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_2_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                             //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_input_2_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_2_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_2_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_2_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_2_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_2_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_2_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_2_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_2_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_2_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_2_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_2_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_2_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_2_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_2_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_2_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_2_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_2_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_2_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_2_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_2_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_2_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_2_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_2_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_2_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_2_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_2_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_2_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_2_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_2_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_2_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_2_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (video_input_2_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_2_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_2_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_2_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_input_2_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_2_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_2_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_2_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_2_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_2_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_2_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_2_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_2_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_2_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_2_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_2_out_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_input_2_out_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_input_2_out_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_input_2_out_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_input_2_out_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_input_2_out_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_3_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                             //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_input_3_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_3_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_3_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_3_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_3_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_3_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_3_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_3_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_3_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_3_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_3_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_3_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_3_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_3_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_3_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_3_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_3_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_3_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_3_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_3_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_3_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_3_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_3_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_3_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_3_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_3_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_3_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_3_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_3_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_3_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_3_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_3_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (video_input_3_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_3_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_3_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_3_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_input_3_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_3_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_3_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_3_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_3_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_3_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_3_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_3_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_3_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_3_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_3_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_3_out_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_input_3_out_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_input_3_out_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_input_3_out_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_input_3_out_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_input_3_out_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_4_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                             //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_input_4_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_4_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_4_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_4_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_4_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_4_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_4_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_4_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_4_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_4_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_4_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_4_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_4_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_4_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_4_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_4_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_4_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_4_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_4_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_4_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_4_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_4_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_4_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_4_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_4_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_4_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_4_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_4_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_4_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_4_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_4_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_4_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (video_input_4_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_4_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_4_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_4_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_input_4_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_4_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_4_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_4_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_4_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_4_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_4_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_4_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_4_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_4_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_4_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_4_out_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_input_4_out_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_input_4_out_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_input_4_out_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_input_4_out_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_input_4_out_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_5_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                             //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_input_5_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_5_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_5_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_5_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_5_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_5_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_5_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_5_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_5_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_5_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_5_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_5_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_5_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_5_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_5_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_5_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_5_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_5_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_5_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_5_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_5_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_5_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_5_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_5_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_5_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_5_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_5_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_5_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_5_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_5_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_5_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_5_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (video_input_5_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_5_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_5_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_5_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_input_5_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_5_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_5_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_5_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_5_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_5_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_5_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_5_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_5_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_5_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_5_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_5_out_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_input_5_out_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_input_5_out_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_input_5_out_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_input_5_out_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_input_5_out_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_6_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                             //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_input_6_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_6_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_6_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_6_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_6_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_6_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_6_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_6_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_6_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_6_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_6_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_6_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_6_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_6_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_6_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_6_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_6_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_6_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_6_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_6_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_6_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_6_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_6_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_6_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_6_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_6_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_6_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_6_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_6_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_6_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_6_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_6_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (video_input_6_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_6_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_6_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_6_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_input_6_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_6_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_6_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_6_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_6_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_6_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_6_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_6_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_6_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_6_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_6_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_6_out_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_input_6_out_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_input_6_out_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_input_6_out_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_input_6_out_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_input_6_out_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_7_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                             //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_input_7_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_7_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_7_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_7_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_7_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_7_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_7_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_7_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_7_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_7_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_7_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_7_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_7_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_7_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_7_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_7_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_7_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_7_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_7_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_7_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_7_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_7_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_7_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_7_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_7_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_7_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_7_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_7_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_7_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_7_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_7_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_7_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (video_input_7_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_7_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_7_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_7_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_input_7_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_7_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_7_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_7_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_7_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_7_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_7_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_7_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_7_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_7_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_7_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_7_out_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_input_7_out_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_input_7_out_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_input_7_out_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_input_7_out_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_input_7_out_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_8_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                             //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_input_8_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_8_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_8_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_8_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_8_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_8_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_8_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_8_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_8_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_8_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_8_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_8_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_8_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_8_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_8_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_8_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_8_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_8_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_8_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_8_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_8_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_8_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_8_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_8_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_8_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_8_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_8_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_8_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_8_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_8_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_8_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_8_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (video_input_8_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_8_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_8_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_8_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_input_8_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_8_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_8_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_8_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_8_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_8_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_8_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_8_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_8_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_8_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_8_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_8_out_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_input_8_out_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_input_8_out_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_input_8_out_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_input_8_out_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_input_8_out_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (130),
		.PKT_ORI_BURST_SIZE_L      (128),
		.PKT_RESPONSE_STATUS_H     (127),
		.PKT_RESPONSE_STATUS_L     (126),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (121),
		.PKT_PROTECTION_L          (119),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (106),
		.PKT_DEST_ID_L             (102),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_input_9_out_csr_agent (
		.clk                     (clk_1_clk_clk),                                             //             clk.clk
		.reset                   (video_input_reset_out_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_input_9_out_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_input_9_out_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_input_9_out_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_input_9_out_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_input_9_out_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_input_9_out_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_input_9_out_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_input_9_out_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_input_9_out_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_input_9_out_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_input_9_out_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_input_9_out_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_input_9_out_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (video_input_9_out_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (video_input_9_out_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_input_9_out_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_input_9_out_csr_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_input_9_out_csr_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_input_9_out_csr_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_input_9_out_csr_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_input_9_out_csr_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_input_9_out_csr_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_input_9_out_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_input_9_out_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_input_9_out_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_input_9_out_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_input_9_out_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_input_9_out_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_input_9_out_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_input_9_out_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_input_9_out_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_input_9_out_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (video_input_9_out_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_input_9_out_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_input_9_out_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_9_out_csr_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                          //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_input_9_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (video_input_9_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (video_input_9_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_input_9_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_input_9_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_input_9_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_input_9_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_input_9_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_input_9_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_input_9_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_input_9_out_csr_agent_rdata_fifo (
		.clk               (clk_1_clk_clk),                                     //       clk.clk
		.reset             (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_input_9_out_csr_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_input_9_out_csr_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_input_9_out_csr_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_input_9_out_csr_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_input_9_out_csr_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_input_9_out_csr_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (video_input_out_agent_rp_ready),                    //      sink.ready
		.sink_valid         (video_input_out_agent_rp_valid),                    //          .valid
		.sink_data          (video_input_out_agent_rp_data),                     //          .data
		.sink_startofpacket (video_input_out_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (video_input_out_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                              //       src.ready
		.src_valid          (router_002_src_valid),                              //          .valid
		.src_data           (router_002_src_data),                               //          .data
		.src_channel        (router_002_src_channel),                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (video_input_0_out_agent_rp_ready),                  //      sink.ready
		.sink_valid         (video_input_0_out_agent_rp_valid),                  //          .valid
		.sink_data          (video_input_0_out_agent_rp_data),                   //          .data
		.sink_startofpacket (video_input_0_out_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (video_input_0_out_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (video_input_1_out_agent_rp_ready),                  //      sink.ready
		.sink_valid         (video_input_1_out_agent_rp_valid),                  //          .valid
		.sink_data          (video_input_1_out_agent_rp_data),                   //          .data
		.sink_startofpacket (video_input_1_out_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (video_input_1_out_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                              //       src.ready
		.src_valid          (router_004_src_valid),                              //          .valid
		.src_data           (router_004_src_data),                               //          .data
		.src_channel        (router_004_src_channel),                            //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (video_input_2_out_agent_rp_ready),                  //      sink.ready
		.sink_valid         (video_input_2_out_agent_rp_valid),                  //          .valid
		.sink_data          (video_input_2_out_agent_rp_data),                   //          .data
		.sink_startofpacket (video_input_2_out_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (video_input_2_out_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                              //       src.ready
		.src_valid          (router_005_src_valid),                              //          .valid
		.src_data           (router_005_src_data),                               //          .data
		.src_channel        (router_005_src_channel),                            //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (video_input_3_out_agent_rp_ready),                  //      sink.ready
		.sink_valid         (video_input_3_out_agent_rp_valid),                  //          .valid
		.sink_data          (video_input_3_out_agent_rp_data),                   //          .data
		.sink_startofpacket (video_input_3_out_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (video_input_3_out_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                              //       src.ready
		.src_valid          (router_006_src_valid),                              //          .valid
		.src_data           (router_006_src_data),                               //          .data
		.src_channel        (router_006_src_channel),                            //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (video_input_4_out_agent_rp_ready),                  //      sink.ready
		.sink_valid         (video_input_4_out_agent_rp_valid),                  //          .valid
		.sink_data          (video_input_4_out_agent_rp_data),                   //          .data
		.sink_startofpacket (video_input_4_out_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (video_input_4_out_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                              //       src.ready
		.src_valid          (router_007_src_valid),                              //          .valid
		.src_data           (router_007_src_data),                               //          .data
		.src_channel        (router_007_src_channel),                            //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (video_input_5_out_agent_rp_ready),                  //      sink.ready
		.sink_valid         (video_input_5_out_agent_rp_valid),                  //          .valid
		.sink_data          (video_input_5_out_agent_rp_data),                   //          .data
		.sink_startofpacket (video_input_5_out_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (video_input_5_out_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                              //       src.ready
		.src_valid          (router_008_src_valid),                              //          .valid
		.src_data           (router_008_src_data),                               //          .data
		.src_channel        (router_008_src_channel),                            //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (video_input_6_out_agent_rp_ready),                  //      sink.ready
		.sink_valid         (video_input_6_out_agent_rp_valid),                  //          .valid
		.sink_data          (video_input_6_out_agent_rp_data),                   //          .data
		.sink_startofpacket (video_input_6_out_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (video_input_6_out_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                              //       src.ready
		.src_valid          (router_009_src_valid),                              //          .valid
		.src_data           (router_009_src_data),                               //          .data
		.src_channel        (router_009_src_channel),                            //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (video_input_7_out_agent_rp_ready),                  //      sink.ready
		.sink_valid         (video_input_7_out_agent_rp_valid),                  //          .valid
		.sink_data          (video_input_7_out_agent_rp_data),                   //          .data
		.sink_startofpacket (video_input_7_out_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (video_input_7_out_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                              //       src.ready
		.src_valid          (router_010_src_valid),                              //          .valid
		.src_data           (router_010_src_data),                               //          .data
		.src_channel        (router_010_src_channel),                            //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (video_input_8_out_agent_rp_ready),                  //      sink.ready
		.sink_valid         (video_input_8_out_agent_rp_valid),                  //          .valid
		.sink_data          (video_input_8_out_agent_rp_data),                   //          .data
		.sink_startofpacket (video_input_8_out_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (video_input_8_out_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                              //       src.ready
		.src_valid          (router_011_src_valid),                              //          .valid
		.src_data           (router_011_src_data),                               //          .data
		.src_channel        (router_011_src_channel),                            //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (video_input_9_out_agent_rp_ready),                  //      sink.ready
		.sink_valid         (video_input_9_out_agent_rp_valid),                  //          .valid
		.sink_data          (video_input_9_out_agent_rp_data),                   //          .data
		.sink_startofpacket (video_input_9_out_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (video_input_9_out_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                              //       src.ready
		.src_valid          (router_012_src_valid),                              //          .valid
		.src_data           (router_012_src_data),                               //          .data
		.src_channel        (router_012_src_channel),                            //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (video_input_out_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (video_input_out_csr_agent_rp_valid),                //          .valid
		.sink_data          (video_input_out_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (video_input_out_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (video_input_out_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                              //       src.ready
		.src_valid          (router_013_src_valid),                              //          .valid
		.src_data           (router_013_src_data),                               //          .data
		.src_channel        (router_013_src_channel),                            //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (video_input_0_out_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_input_0_out_csr_agent_rp_valid),              //          .valid
		.sink_data          (video_input_0_out_csr_agent_rp_data),               //          .data
		.sink_startofpacket (video_input_0_out_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_input_0_out_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                              //       src.ready
		.src_valid          (router_014_src_valid),                              //          .valid
		.src_data           (router_014_src_data),                               //          .data
		.src_channel        (router_014_src_channel),                            //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (video_input_1_out_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_input_1_out_csr_agent_rp_valid),              //          .valid
		.sink_data          (video_input_1_out_csr_agent_rp_data),               //          .data
		.sink_startofpacket (video_input_1_out_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_input_1_out_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                              //       src.ready
		.src_valid          (router_015_src_valid),                              //          .valid
		.src_data           (router_015_src_data),                               //          .data
		.src_channel        (router_015_src_channel),                            //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (video_input_2_out_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_input_2_out_csr_agent_rp_valid),              //          .valid
		.sink_data          (video_input_2_out_csr_agent_rp_data),               //          .data
		.sink_startofpacket (video_input_2_out_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_input_2_out_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                              //       src.ready
		.src_valid          (router_016_src_valid),                              //          .valid
		.src_data           (router_016_src_data),                               //          .data
		.src_channel        (router_016_src_channel),                            //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (video_input_3_out_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_input_3_out_csr_agent_rp_valid),              //          .valid
		.sink_data          (video_input_3_out_csr_agent_rp_data),               //          .data
		.sink_startofpacket (video_input_3_out_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_input_3_out_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                              //       src.ready
		.src_valid          (router_017_src_valid),                              //          .valid
		.src_data           (router_017_src_data),                               //          .data
		.src_channel        (router_017_src_channel),                            //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (video_input_4_out_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_input_4_out_csr_agent_rp_valid),              //          .valid
		.sink_data          (video_input_4_out_csr_agent_rp_data),               //          .data
		.sink_startofpacket (video_input_4_out_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_input_4_out_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                              //       src.ready
		.src_valid          (router_018_src_valid),                              //          .valid
		.src_data           (router_018_src_data),                               //          .data
		.src_channel        (router_018_src_channel),                            //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (video_input_5_out_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_input_5_out_csr_agent_rp_valid),              //          .valid
		.sink_data          (video_input_5_out_csr_agent_rp_data),               //          .data
		.sink_startofpacket (video_input_5_out_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_input_5_out_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                              //       src.ready
		.src_valid          (router_019_src_valid),                              //          .valid
		.src_data           (router_019_src_data),                               //          .data
		.src_channel        (router_019_src_channel),                            //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (video_input_6_out_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_input_6_out_csr_agent_rp_valid),              //          .valid
		.sink_data          (video_input_6_out_csr_agent_rp_data),               //          .data
		.sink_startofpacket (video_input_6_out_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_input_6_out_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                              //       src.ready
		.src_valid          (router_020_src_valid),                              //          .valid
		.src_data           (router_020_src_data),                               //          .data
		.src_channel        (router_020_src_channel),                            //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_021 (
		.sink_ready         (video_input_7_out_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_input_7_out_csr_agent_rp_valid),              //          .valid
		.sink_data          (video_input_7_out_csr_agent_rp_data),               //          .data
		.sink_startofpacket (video_input_7_out_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_input_7_out_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                              //       src.ready
		.src_valid          (router_021_src_valid),                              //          .valid
		.src_data           (router_021_src_data),                               //          .data
		.src_channel        (router_021_src_channel),                            //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_022 (
		.sink_ready         (video_input_8_out_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_input_8_out_csr_agent_rp_valid),              //          .valid
		.sink_data          (video_input_8_out_csr_agent_rp_data),               //          .data
		.sink_startofpacket (video_input_8_out_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_input_8_out_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                              //       src.ready
		.src_valid          (router_022_src_valid),                              //          .valid
		.src_data           (router_022_src_data),                               //          .data
		.src_channel        (router_022_src_channel),                            //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_023 (
		.sink_ready         (video_input_9_out_csr_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_input_9_out_csr_agent_rp_valid),              //          .valid
		.sink_data          (video_input_9_out_csr_agent_rp_data),               //          .data
		.sink_startofpacket (video_input_9_out_csr_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_input_9_out_csr_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_1_clk_clk),                                     //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                              //       src.ready
		.src_valid          (router_023_src_valid),                              //          .valid
		.src_data           (router_023_src_data),                               //          .data
		.src_channel        (router_023_src_channel),                            //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                         //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (138),
		.PKT_SRC_ID_H              (137),
		.PKT_SRC_ID_L              (133),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (108),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (22),
		.VALID_WIDTH               (22),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (142),
		.PKT_DEST_ID_L             (138),
		.PKT_SRC_ID_H              (137),
		.PKT_SRC_ID_L              (133),
		.PKT_BYTE_CNT_H            (115),
		.PKT_BYTE_CNT_L            (108),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (22),
		.VALID_WIDTH               (22),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                             //          .valid
		.cmd_sink_data          (router_001_src_data),                                              //          .data
		.cmd_sink_channel       (router_001_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                       //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (video_input_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_0_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                         //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (video_input_0_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_0_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_0_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_0_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_0_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_0_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_0_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_0_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_0_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_0_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_0_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_0_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_1_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                         //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (video_input_1_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_1_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_1_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_1_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_1_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_1_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_1_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_1_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_1_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_1_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_1_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_1_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_2_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                         //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (video_input_2_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_2_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_2_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_2_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_2_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_2_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_2_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_2_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_2_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_2_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_2_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_2_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_3_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                         //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (video_input_3_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_3_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_3_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_3_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_3_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_3_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_3_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_3_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_3_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_3_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_3_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_3_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_4_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                         //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (video_input_4_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_4_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_4_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_4_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_4_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_4_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_4_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_4_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_4_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_4_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_4_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_4_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_5_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                         //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (video_input_5_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_5_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_5_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_5_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_5_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_5_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_5_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_5_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_5_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_5_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_5_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_5_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_6_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                         //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (video_input_6_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_6_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_6_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_6_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_6_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_6_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_6_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_6_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_6_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_6_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_6_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_6_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_7_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                         //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (video_input_7_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_7_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_7_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_7_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_7_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_7_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_7_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_7_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_7_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_7_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_7_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_7_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_8_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                         //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (video_input_8_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_8_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_8_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_8_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_8_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_8_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_8_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_8_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_8_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_8_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_8_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_8_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_9_out_burst_adapter (
		.clk                   (clk_1_clk_clk),                                         //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (video_input_9_out_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_9_out_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_9_out_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_9_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_9_out_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_9_out_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_9_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_9_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_9_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_9_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_9_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_9_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                           //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (video_input_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_0_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                             //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (video_input_0_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_0_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_0_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_0_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_0_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_0_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_0_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_0_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_0_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_0_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_0_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_0_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_1_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                             //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (video_input_1_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_1_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_1_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_1_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_1_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_1_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_1_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_1_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_1_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_1_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_1_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_1_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_2_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                             //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (video_input_2_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_2_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_2_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_2_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_2_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_2_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_2_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_2_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_2_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_2_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_2_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_2_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_3_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                             //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (video_input_3_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_3_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_3_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_3_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_3_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_3_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_3_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_3_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_3_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_3_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_3_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_3_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_4_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                             //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (video_input_4_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_4_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_4_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_4_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_4_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_4_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_4_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_4_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_4_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_4_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_4_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_4_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_5_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                             //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (video_input_5_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_5_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_5_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_5_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_5_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_5_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_5_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_5_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_5_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_5_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_5_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_5_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_6_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                             //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (video_input_6_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_6_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_6_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_6_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_6_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_6_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_6_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_6_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_6_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_6_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_6_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_6_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_7_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                             //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (video_input_7_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_7_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_7_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_7_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_7_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_7_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_7_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_7_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_7_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_7_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_7_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_7_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_8_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                             //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (video_input_8_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_8_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_8_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_8_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_8_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_8_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_8_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_8_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_8_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_8_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_8_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_8_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (72),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_input_9_out_csr_burst_adapter (
		.clk                   (clk_1_clk_clk),                                             //       cr0.clk
		.reset                 (video_input_reset_out_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (video_input_9_out_csr_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_input_9_out_csr_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_input_9_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_input_9_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_input_9_out_csr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_input_9_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_input_9_out_csr_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_input_9_out_csr_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_input_9_out_csr_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_input_9_out_csr_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_input_9_out_csr_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_input_9_out_csr_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                             //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                             //           .valid
		.src0_data           (cmd_demux_src0_data),                                              //           .data
		.src0_channel        (cmd_demux_src0_channel),                                           //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                             //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                             //           .valid
		.src1_data           (cmd_demux_src1_data),                                              //           .data
		.src1_channel        (cmd_demux_src1_channel),                                           //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                       //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                             //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                             //           .valid
		.src2_data           (cmd_demux_src2_data),                                              //           .data
		.src2_channel        (cmd_demux_src2_channel),                                           //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                     //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                       //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                             //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                             //           .valid
		.src3_data           (cmd_demux_src3_data),                                              //           .data
		.src3_channel        (cmd_demux_src3_channel),                                           //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                     //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                       //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                             //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                             //           .valid
		.src4_data           (cmd_demux_src4_data),                                              //           .data
		.src4_channel        (cmd_demux_src4_channel),                                           //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                     //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                       //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                             //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                             //           .valid
		.src5_data           (cmd_demux_src5_data),                                              //           .data
		.src5_channel        (cmd_demux_src5_channel),                                           //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                     //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                       //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                             //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                             //           .valid
		.src6_data           (cmd_demux_src6_data),                                              //           .data
		.src6_channel        (cmd_demux_src6_channel),                                           //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                     //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                       //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                             //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                             //           .valid
		.src7_data           (cmd_demux_src7_data),                                              //           .data
		.src7_channel        (cmd_demux_src7_channel),                                           //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                     //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                       //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                             //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                             //           .valid
		.src8_data           (cmd_demux_src8_data),                                              //           .data
		.src8_channel        (cmd_demux_src8_channel),                                           //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                     //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                       //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                             //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                             //           .valid
		.src9_data           (cmd_demux_src9_data),                                              //           .data
		.src9_channel        (cmd_demux_src9_channel),                                           //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                     //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                       //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                            //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                            //           .valid
		.src10_data          (cmd_demux_src10_data),                                             //           .data
		.src10_channel       (cmd_demux_src10_channel),                                          //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                    //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                      //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                            //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                            //           .valid
		.src11_data          (cmd_demux_src11_data),                                             //           .data
		.src11_channel       (cmd_demux_src11_channel),                                          //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                    //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                      //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                            //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                            //           .valid
		.src12_data          (cmd_demux_src12_data),                                             //           .data
		.src12_channel       (cmd_demux_src12_channel),                                          //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                    //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                      //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                            //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                            //           .valid
		.src13_data          (cmd_demux_src13_data),                                             //           .data
		.src13_channel       (cmd_demux_src13_channel),                                          //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                                    //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                                      //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                            //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                            //           .valid
		.src14_data          (cmd_demux_src14_data),                                             //           .data
		.src14_channel       (cmd_demux_src14_channel),                                          //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                                    //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                                      //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                            //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                            //           .valid
		.src15_data          (cmd_demux_src15_data),                                             //           .data
		.src15_channel       (cmd_demux_src15_channel),                                          //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                                    //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                                      //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                            //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                            //           .valid
		.src16_data          (cmd_demux_src16_data),                                             //           .data
		.src16_channel       (cmd_demux_src16_channel),                                          //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                                    //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                                      //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                            //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                            //           .valid
		.src17_data          (cmd_demux_src17_data),                                             //           .data
		.src17_channel       (cmd_demux_src17_channel),                                          //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                                    //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                                      //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                            //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                            //           .valid
		.src18_data          (cmd_demux_src18_data),                                             //           .data
		.src18_channel       (cmd_demux_src18_channel),                                          //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                                    //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                                      //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                            //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                            //           .valid
		.src19_data          (cmd_demux_src19_data),                                             //           .data
		.src19_channel       (cmd_demux_src19_channel),                                          //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                                    //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                                      //           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                                            //      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                                            //           .valid
		.src20_data          (cmd_demux_src20_data),                                             //           .data
		.src20_channel       (cmd_demux_src20_channel),                                          //           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                                    //           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                                      //           .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                                            //      src21.ready
		.src21_valid         (cmd_demux_src21_valid),                                            //           .valid
		.src21_data          (cmd_demux_src21_data),                                             //           .data
		.src21_channel       (cmd_demux_src21_channel),                                          //           .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                                    //           .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket)                                       //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                  //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                        //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                        //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                         //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                      //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                  //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                        //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                        //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                         //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                      //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                                  //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                        //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                        //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                         //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                                      //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                                //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                                  //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                                        //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                                        //           .valid
		.src14_data          (cmd_demux_001_src14_data),                                         //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                                      //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                                //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                                  //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                                        //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                                        //           .valid
		.src15_data          (cmd_demux_001_src15_data),                                         //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                                      //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                                //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                                  //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                                        //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                                        //           .valid
		.src16_data          (cmd_demux_001_src16_data),                                         //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                                      //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),                                //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                                  //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                                        //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                                        //           .valid
		.src17_data          (cmd_demux_001_src17_data),                                         //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                                      //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),                                //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                                  //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                                        //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                                        //           .valid
		.src18_data          (cmd_demux_001_src18_data),                                         //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                                      //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),                                //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),                                  //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                                        //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                                        //           .valid
		.src19_data          (cmd_demux_001_src19_data),                                         //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                                      //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),                                //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),                                  //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                                        //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                                        //           .valid
		.src20_data          (cmd_demux_001_src20_data),                                         //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                                      //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),                                //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),                                  //           .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),                                        //      src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),                                        //           .valid
		.src21_data          (cmd_demux_001_src21_data),                                         //           .data
		.src21_channel       (cmd_demux_001_src21_channel),                                      //           .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),                                //           .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket)                                   //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                 //          .valid
		.src_data            (cmd_mux_src_data),                                  //          .data
		.src_channel         (cmd_mux_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                 //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                 //          .valid
		.sink0_channel       (crosser_out_channel),                               //          .channel
		.sink0_data          (crosser_out_data),                                  //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                           //          .endofpacket
		.sink1_ready         (crosser_022_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_022_out_valid),                             //          .valid
		.sink1_channel       (crosser_022_out_channel),                           //          .channel
		.sink1_data          (crosser_022_out_data),                              //          .data
		.sink1_startofpacket (crosser_022_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_022_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                             //          .valid
		.src_data            (cmd_mux_001_src_data),                              //          .data
		.src_channel         (cmd_mux_001_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                             //          .valid
		.sink0_channel       (crosser_001_out_channel),                           //          .channel
		.sink0_data          (crosser_001_out_data),                              //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_023_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_023_out_valid),                             //          .valid
		.sink1_channel       (crosser_023_out_channel),                           //          .channel
		.sink1_data          (crosser_023_out_data),                              //          .data
		.sink1_startofpacket (crosser_023_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_023_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                             //          .valid
		.src_data            (cmd_mux_002_src_data),                              //          .data
		.src_channel         (cmd_mux_002_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                             //          .valid
		.sink0_channel       (crosser_002_out_channel),                           //          .channel
		.sink0_data          (crosser_002_out_data),                              //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_024_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_024_out_valid),                             //          .valid
		.sink1_channel       (crosser_024_out_channel),                           //          .channel
		.sink1_data          (crosser_024_out_data),                              //          .data
		.sink1_startofpacket (crosser_024_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_024_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                             //          .valid
		.src_data            (cmd_mux_003_src_data),                              //          .data
		.src_channel         (cmd_mux_003_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                             //          .valid
		.sink0_channel       (crosser_003_out_channel),                           //          .channel
		.sink0_data          (crosser_003_out_data),                              //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_025_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_025_out_valid),                             //          .valid
		.sink1_channel       (crosser_025_out_channel),                           //          .channel
		.sink1_data          (crosser_025_out_data),                              //          .data
		.sink1_startofpacket (crosser_025_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_025_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                             //          .valid
		.src_data            (cmd_mux_004_src_data),                              //          .data
		.src_channel         (cmd_mux_004_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                             //          .valid
		.sink0_channel       (crosser_004_out_channel),                           //          .channel
		.sink0_data          (crosser_004_out_data),                              //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_026_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_026_out_valid),                             //          .valid
		.sink1_channel       (crosser_026_out_channel),                           //          .channel
		.sink1_data          (crosser_026_out_data),                              //          .data
		.sink1_startofpacket (crosser_026_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_026_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                             //          .valid
		.src_data            (cmd_mux_005_src_data),                              //          .data
		.src_channel         (cmd_mux_005_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                             //          .valid
		.sink0_channel       (crosser_005_out_channel),                           //          .channel
		.sink0_data          (crosser_005_out_data),                              //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_027_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_027_out_valid),                             //          .valid
		.sink1_channel       (crosser_027_out_channel),                           //          .channel
		.sink1_data          (crosser_027_out_data),                              //          .data
		.sink1_startofpacket (crosser_027_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_027_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                             //          .valid
		.src_data            (cmd_mux_006_src_data),                              //          .data
		.src_channel         (cmd_mux_006_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                             //          .valid
		.sink0_channel       (crosser_006_out_channel),                           //          .channel
		.sink0_data          (crosser_006_out_data),                              //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_028_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_028_out_valid),                             //          .valid
		.sink1_channel       (crosser_028_out_channel),                           //          .channel
		.sink1_data          (crosser_028_out_data),                              //          .data
		.sink1_startofpacket (crosser_028_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_028_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                             //          .valid
		.src_data            (cmd_mux_007_src_data),                              //          .data
		.src_channel         (cmd_mux_007_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                             //          .valid
		.sink0_channel       (crosser_007_out_channel),                           //          .channel
		.sink0_data          (crosser_007_out_data),                              //          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_029_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_029_out_valid),                             //          .valid
		.sink1_channel       (crosser_029_out_channel),                           //          .channel
		.sink1_data          (crosser_029_out_data),                              //          .data
		.sink1_startofpacket (crosser_029_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_029_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                             //          .valid
		.src_data            (cmd_mux_008_src_data),                              //          .data
		.src_channel         (cmd_mux_008_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_008_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_008_out_valid),                             //          .valid
		.sink0_channel       (crosser_008_out_channel),                           //          .channel
		.sink0_data          (crosser_008_out_data),                              //          .data
		.sink0_startofpacket (crosser_008_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_008_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_030_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_030_out_valid),                             //          .valid
		.sink1_channel       (crosser_030_out_channel),                           //          .channel
		.sink1_data          (crosser_030_out_data),                              //          .data
		.sink1_startofpacket (crosser_030_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_030_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                             //          .valid
		.src_data            (cmd_mux_009_src_data),                              //          .data
		.src_channel         (cmd_mux_009_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_009_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_009_out_valid),                             //          .valid
		.sink0_channel       (crosser_009_out_channel),                           //          .channel
		.sink0_data          (crosser_009_out_data),                              //          .data
		.sink0_startofpacket (crosser_009_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_009_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_031_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_031_out_valid),                             //          .valid
		.sink1_channel       (crosser_031_out_channel),                           //          .channel
		.sink1_data          (crosser_031_out_data),                              //          .data
		.sink1_startofpacket (crosser_031_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_031_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                             //          .valid
		.src_data            (cmd_mux_010_src_data),                              //          .data
		.src_channel         (cmd_mux_010_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_010_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_010_out_valid),                             //          .valid
		.sink0_channel       (crosser_010_out_channel),                           //          .channel
		.sink0_data          (crosser_010_out_data),                              //          .data
		.sink0_startofpacket (crosser_010_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_010_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_032_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_032_out_valid),                             //          .valid
		.sink1_channel       (crosser_032_out_channel),                           //          .channel
		.sink1_data          (crosser_032_out_data),                              //          .data
		.sink1_startofpacket (crosser_032_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_032_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                             //          .valid
		.src_data            (cmd_mux_011_src_data),                              //          .data
		.src_channel         (cmd_mux_011_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_011_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_011_out_valid),                             //          .valid
		.sink0_channel       (crosser_011_out_channel),                           //          .channel
		.sink0_data          (crosser_011_out_data),                              //          .data
		.sink0_startofpacket (crosser_011_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_011_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_033_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_033_out_valid),                             //          .valid
		.sink1_channel       (crosser_033_out_channel),                           //          .channel
		.sink1_data          (crosser_033_out_data),                              //          .data
		.sink1_startofpacket (crosser_033_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_033_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                             //          .valid
		.src_data            (cmd_mux_012_src_data),                              //          .data
		.src_channel         (cmd_mux_012_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_012_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_012_out_valid),                             //          .valid
		.sink0_channel       (crosser_012_out_channel),                           //          .channel
		.sink0_data          (crosser_012_out_data),                              //          .data
		.sink0_startofpacket (crosser_012_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_012_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_034_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_034_out_valid),                             //          .valid
		.sink1_channel       (crosser_034_out_channel),                           //          .channel
		.sink1_data          (crosser_034_out_data),                              //          .data
		.sink1_startofpacket (crosser_034_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_034_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                             //          .valid
		.src_data            (cmd_mux_013_src_data),                              //          .data
		.src_channel         (cmd_mux_013_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_013_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_013_out_valid),                             //          .valid
		.sink0_channel       (crosser_013_out_channel),                           //          .channel
		.sink0_data          (crosser_013_out_data),                              //          .data
		.sink0_startofpacket (crosser_013_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_013_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_035_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_035_out_valid),                             //          .valid
		.sink1_channel       (crosser_035_out_channel),                           //          .channel
		.sink1_data          (crosser_035_out_data),                              //          .data
		.sink1_startofpacket (crosser_035_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_035_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                             //          .valid
		.src_data            (cmd_mux_014_src_data),                              //          .data
		.src_channel         (cmd_mux_014_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_014_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_014_out_valid),                             //          .valid
		.sink0_channel       (crosser_014_out_channel),                           //          .channel
		.sink0_data          (crosser_014_out_data),                              //          .data
		.sink0_startofpacket (crosser_014_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_014_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_036_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_036_out_valid),                             //          .valid
		.sink1_channel       (crosser_036_out_channel),                           //          .channel
		.sink1_data          (crosser_036_out_data),                              //          .data
		.sink1_startofpacket (crosser_036_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_036_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                             //          .valid
		.src_data            (cmd_mux_015_src_data),                              //          .data
		.src_channel         (cmd_mux_015_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_015_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_015_out_valid),                             //          .valid
		.sink0_channel       (crosser_015_out_channel),                           //          .channel
		.sink0_data          (crosser_015_out_data),                              //          .data
		.sink0_startofpacket (crosser_015_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_015_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_037_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_037_out_valid),                             //          .valid
		.sink1_channel       (crosser_037_out_channel),                           //          .channel
		.sink1_data          (crosser_037_out_data),                              //          .data
		.sink1_startofpacket (crosser_037_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_037_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                             //          .valid
		.src_data            (cmd_mux_016_src_data),                              //          .data
		.src_channel         (cmd_mux_016_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_016_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_016_out_valid),                             //          .valid
		.sink0_channel       (crosser_016_out_channel),                           //          .channel
		.sink0_data          (crosser_016_out_data),                              //          .data
		.sink0_startofpacket (crosser_016_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_016_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_038_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_038_out_valid),                             //          .valid
		.sink1_channel       (crosser_038_out_channel),                           //          .channel
		.sink1_data          (crosser_038_out_data),                              //          .data
		.sink1_startofpacket (crosser_038_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_038_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                             //          .valid
		.src_data            (cmd_mux_017_src_data),                              //          .data
		.src_channel         (cmd_mux_017_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_017_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_017_out_valid),                             //          .valid
		.sink0_channel       (crosser_017_out_channel),                           //          .channel
		.sink0_data          (crosser_017_out_data),                              //          .data
		.sink0_startofpacket (crosser_017_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_017_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_039_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_039_out_valid),                             //          .valid
		.sink1_channel       (crosser_039_out_channel),                           //          .channel
		.sink1_data          (crosser_039_out_data),                              //          .data
		.sink1_startofpacket (crosser_039_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_039_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                             //          .valid
		.src_data            (cmd_mux_018_src_data),                              //          .data
		.src_channel         (cmd_mux_018_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_018_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_018_out_valid),                             //          .valid
		.sink0_channel       (crosser_018_out_channel),                           //          .channel
		.sink0_data          (crosser_018_out_data),                              //          .data
		.sink0_startofpacket (crosser_018_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_018_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_040_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_040_out_valid),                             //          .valid
		.sink1_channel       (crosser_040_out_channel),                           //          .channel
		.sink1_data          (crosser_040_out_data),                              //          .data
		.sink1_startofpacket (crosser_040_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_040_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                             //          .valid
		.src_data            (cmd_mux_019_src_data),                              //          .data
		.src_channel         (cmd_mux_019_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_019_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_019_out_valid),                             //          .valid
		.sink0_channel       (crosser_019_out_channel),                           //          .channel
		.sink0_data          (crosser_019_out_data),                              //          .data
		.sink0_startofpacket (crosser_019_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_019_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_041_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_041_out_valid),                             //          .valid
		.sink1_channel       (crosser_041_out_channel),                           //          .channel
		.sink1_data          (crosser_041_out_data),                              //          .data
		.sink1_startofpacket (crosser_041_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_041_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                             //          .valid
		.src_data            (cmd_mux_020_src_data),                              //          .data
		.src_channel         (cmd_mux_020_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_020_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_020_out_valid),                             //          .valid
		.sink0_channel       (crosser_020_out_channel),                           //          .channel
		.sink0_data          (crosser_020_out_data),                              //          .data
		.sink0_startofpacket (crosser_020_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_020_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_042_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_042_out_valid),                             //          .valid
		.sink1_channel       (crosser_042_out_channel),                           //          .channel
		.sink1_data          (crosser_042_out_data),                              //          .data
		.sink1_startofpacket (crosser_042_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_042_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_021 (
		.clk                 (clk_1_clk_clk),                                     //       clk.clk
		.reset               (video_input_reset_out_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                             //          .valid
		.src_data            (cmd_mux_021_src_data),                              //          .data
		.src_channel         (cmd_mux_021_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (crosser_021_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_021_out_valid),                             //          .valid
		.sink0_channel       (crosser_021_out_channel),                           //          .channel
		.sink0_data          (crosser_021_out_data),                              //          .data
		.sink0_startofpacket (crosser_021_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_021_out_endofpacket),                       //          .endofpacket
		.sink1_ready         (crosser_043_out_ready),                             //     sink1.ready
		.sink1_valid         (crosser_043_out_valid),                             //          .valid
		.sink1_channel       (crosser_043_out_channel),                           //          .channel
		.sink1_data          (crosser_043_out_data),                              //          .data
		.sink1_startofpacket (crosser_043_out_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (crosser_043_out_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_1_clk_clk),                                       //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (video_input_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (video_input_0_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_0_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_0_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_0_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_0_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_0_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_001_src0_data),                               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_001_src1_data),                               //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (video_input_1_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_1_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_1_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_1_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_1_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_1_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_002_src0_data),                               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_002_src1_data),                               //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (video_input_2_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_2_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_2_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_2_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_2_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_2_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_003_src0_data),                               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_003_src1_data),                               //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (video_input_3_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_3_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_3_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_3_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_3_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_3_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_004_src0_data),                               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_004_src1_data),                               //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (video_input_4_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_4_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_4_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_4_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_4_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_4_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_005_src0_data),                               //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_005_src1_data),                               //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (video_input_5_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_5_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_5_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_5_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_5_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_5_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_006_src0_data),                               //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_006_src1_data),                               //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (video_input_6_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_6_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_6_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_6_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_6_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_6_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_007_src0_data),                               //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_007_src1_data),                               //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (video_input_7_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_7_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_7_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_7_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_7_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_7_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_008_src0_data),                               //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_008_src1_data),                               //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (video_input_8_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_8_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_8_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_8_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_8_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_8_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_009_src0_data),                               //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_009_src1_data),                               //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_1_clk_clk),                                         //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (video_input_9_out_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_9_out_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_9_out_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_9_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_9_out_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_9_out_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_010_src0_data),                               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_010_src1_data),                               //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_1_clk_clk),                                           //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),       // clk_reset.reset
		.sink_ready         (video_input_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_011_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_1_clk_clk),                                             //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (video_input_0_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_0_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_0_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_0_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_0_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_0_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_012_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_012_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_1_clk_clk),                                             //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (video_input_1_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_1_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_1_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_1_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_1_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_1_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_013_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_1_clk_clk),                                             //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (video_input_2_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_2_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_2_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_2_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_2_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_2_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_014_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_1_clk_clk),                                             //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (video_input_3_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_3_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_3_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_3_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_3_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_3_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_015_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_015_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_1_clk_clk),                                             //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (video_input_4_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_4_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_4_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_4_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_4_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_4_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_016_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_016_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_1_clk_clk),                                             //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (video_input_5_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_5_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_5_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_5_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_5_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_5_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_017_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_017_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (clk_1_clk_clk),                                             //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (video_input_6_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_6_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_6_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_6_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_6_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_6_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_018_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_018_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (clk_1_clk_clk),                                             //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (video_input_7_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_7_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_7_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_7_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_7_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_7_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_019_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_019_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (clk_1_clk_clk),                                             //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (video_input_8_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_8_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_8_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_8_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_8_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_8_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_020_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_020_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux_021 (
		.clk                (clk_1_clk_clk),                                             //       clk.clk
		.reset              (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (video_input_9_out_csr_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_input_9_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_input_9_out_csr_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_input_9_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_input_9_out_csr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_input_9_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_021_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_021_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                //          .valid
		.src_data             (rsp_mux_src_data),                                                 //          .data
		.src_channel          (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready          (crosser_044_out_ready),                                            //     sink0.ready
		.sink0_valid          (crosser_044_out_valid),                                            //          .valid
		.sink0_channel        (crosser_044_out_channel),                                          //          .channel
		.sink0_data           (crosser_044_out_data),                                             //          .data
		.sink0_startofpacket  (crosser_044_out_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket    (crosser_044_out_endofpacket),                                      //          .endofpacket
		.sink1_ready          (crosser_046_out_ready),                                            //     sink1.ready
		.sink1_valid          (crosser_046_out_valid),                                            //          .valid
		.sink1_channel        (crosser_046_out_channel),                                          //          .channel
		.sink1_data           (crosser_046_out_data),                                             //          .data
		.sink1_startofpacket  (crosser_046_out_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket    (crosser_046_out_endofpacket),                                      //          .endofpacket
		.sink2_ready          (crosser_048_out_ready),                                            //     sink2.ready
		.sink2_valid          (crosser_048_out_valid),                                            //          .valid
		.sink2_channel        (crosser_048_out_channel),                                          //          .channel
		.sink2_data           (crosser_048_out_data),                                             //          .data
		.sink2_startofpacket  (crosser_048_out_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket    (crosser_048_out_endofpacket),                                      //          .endofpacket
		.sink3_ready          (crosser_050_out_ready),                                            //     sink3.ready
		.sink3_valid          (crosser_050_out_valid),                                            //          .valid
		.sink3_channel        (crosser_050_out_channel),                                          //          .channel
		.sink3_data           (crosser_050_out_data),                                             //          .data
		.sink3_startofpacket  (crosser_050_out_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (crosser_050_out_endofpacket),                                      //          .endofpacket
		.sink4_ready          (crosser_052_out_ready),                                            //     sink4.ready
		.sink4_valid          (crosser_052_out_valid),                                            //          .valid
		.sink4_channel        (crosser_052_out_channel),                                          //          .channel
		.sink4_data           (crosser_052_out_data),                                             //          .data
		.sink4_startofpacket  (crosser_052_out_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (crosser_052_out_endofpacket),                                      //          .endofpacket
		.sink5_ready          (crosser_054_out_ready),                                            //     sink5.ready
		.sink5_valid          (crosser_054_out_valid),                                            //          .valid
		.sink5_channel        (crosser_054_out_channel),                                          //          .channel
		.sink5_data           (crosser_054_out_data),                                             //          .data
		.sink5_startofpacket  (crosser_054_out_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket    (crosser_054_out_endofpacket),                                      //          .endofpacket
		.sink6_ready          (crosser_056_out_ready),                                            //     sink6.ready
		.sink6_valid          (crosser_056_out_valid),                                            //          .valid
		.sink6_channel        (crosser_056_out_channel),                                          //          .channel
		.sink6_data           (crosser_056_out_data),                                             //          .data
		.sink6_startofpacket  (crosser_056_out_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket    (crosser_056_out_endofpacket),                                      //          .endofpacket
		.sink7_ready          (crosser_058_out_ready),                                            //     sink7.ready
		.sink7_valid          (crosser_058_out_valid),                                            //          .valid
		.sink7_channel        (crosser_058_out_channel),                                          //          .channel
		.sink7_data           (crosser_058_out_data),                                             //          .data
		.sink7_startofpacket  (crosser_058_out_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (crosser_058_out_endofpacket),                                      //          .endofpacket
		.sink8_ready          (crosser_060_out_ready),                                            //     sink8.ready
		.sink8_valid          (crosser_060_out_valid),                                            //          .valid
		.sink8_channel        (crosser_060_out_channel),                                          //          .channel
		.sink8_data           (crosser_060_out_data),                                             //          .data
		.sink8_startofpacket  (crosser_060_out_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (crosser_060_out_endofpacket),                                      //          .endofpacket
		.sink9_ready          (crosser_062_out_ready),                                            //     sink9.ready
		.sink9_valid          (crosser_062_out_valid),                                            //          .valid
		.sink9_channel        (crosser_062_out_channel),                                          //          .channel
		.sink9_data           (crosser_062_out_data),                                             //          .data
		.sink9_startofpacket  (crosser_062_out_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (crosser_062_out_endofpacket),                                      //          .endofpacket
		.sink10_ready         (crosser_064_out_ready),                                            //    sink10.ready
		.sink10_valid         (crosser_064_out_valid),                                            //          .valid
		.sink10_channel       (crosser_064_out_channel),                                          //          .channel
		.sink10_data          (crosser_064_out_data),                                             //          .data
		.sink10_startofpacket (crosser_064_out_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (crosser_064_out_endofpacket),                                      //          .endofpacket
		.sink11_ready         (crosser_066_out_ready),                                            //    sink11.ready
		.sink11_valid         (crosser_066_out_valid),                                            //          .valid
		.sink11_channel       (crosser_066_out_channel),                                          //          .channel
		.sink11_data          (crosser_066_out_data),                                             //          .data
		.sink11_startofpacket (crosser_066_out_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (crosser_066_out_endofpacket),                                      //          .endofpacket
		.sink12_ready         (crosser_068_out_ready),                                            //    sink12.ready
		.sink12_valid         (crosser_068_out_valid),                                            //          .valid
		.sink12_channel       (crosser_068_out_channel),                                          //          .channel
		.sink12_data          (crosser_068_out_data),                                             //          .data
		.sink12_startofpacket (crosser_068_out_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (crosser_068_out_endofpacket),                                      //          .endofpacket
		.sink13_ready         (crosser_070_out_ready),                                            //    sink13.ready
		.sink13_valid         (crosser_070_out_valid),                                            //          .valid
		.sink13_channel       (crosser_070_out_channel),                                          //          .channel
		.sink13_data          (crosser_070_out_data),                                             //          .data
		.sink13_startofpacket (crosser_070_out_startofpacket),                                    //          .startofpacket
		.sink13_endofpacket   (crosser_070_out_endofpacket),                                      //          .endofpacket
		.sink14_ready         (crosser_072_out_ready),                                            //    sink14.ready
		.sink14_valid         (crosser_072_out_valid),                                            //          .valid
		.sink14_channel       (crosser_072_out_channel),                                          //          .channel
		.sink14_data          (crosser_072_out_data),                                             //          .data
		.sink14_startofpacket (crosser_072_out_startofpacket),                                    //          .startofpacket
		.sink14_endofpacket   (crosser_072_out_endofpacket),                                      //          .endofpacket
		.sink15_ready         (crosser_074_out_ready),                                            //    sink15.ready
		.sink15_valid         (crosser_074_out_valid),                                            //          .valid
		.sink15_channel       (crosser_074_out_channel),                                          //          .channel
		.sink15_data          (crosser_074_out_data),                                             //          .data
		.sink15_startofpacket (crosser_074_out_startofpacket),                                    //          .startofpacket
		.sink15_endofpacket   (crosser_074_out_endofpacket),                                      //          .endofpacket
		.sink16_ready         (crosser_076_out_ready),                                            //    sink16.ready
		.sink16_valid         (crosser_076_out_valid),                                            //          .valid
		.sink16_channel       (crosser_076_out_channel),                                          //          .channel
		.sink16_data          (crosser_076_out_data),                                             //          .data
		.sink16_startofpacket (crosser_076_out_startofpacket),                                    //          .startofpacket
		.sink16_endofpacket   (crosser_076_out_endofpacket),                                      //          .endofpacket
		.sink17_ready         (crosser_078_out_ready),                                            //    sink17.ready
		.sink17_valid         (crosser_078_out_valid),                                            //          .valid
		.sink17_channel       (crosser_078_out_channel),                                          //          .channel
		.sink17_data          (crosser_078_out_data),                                             //          .data
		.sink17_startofpacket (crosser_078_out_startofpacket),                                    //          .startofpacket
		.sink17_endofpacket   (crosser_078_out_endofpacket),                                      //          .endofpacket
		.sink18_ready         (crosser_080_out_ready),                                            //    sink18.ready
		.sink18_valid         (crosser_080_out_valid),                                            //          .valid
		.sink18_channel       (crosser_080_out_channel),                                          //          .channel
		.sink18_data          (crosser_080_out_data),                                             //          .data
		.sink18_startofpacket (crosser_080_out_startofpacket),                                    //          .startofpacket
		.sink18_endofpacket   (crosser_080_out_endofpacket),                                      //          .endofpacket
		.sink19_ready         (crosser_082_out_ready),                                            //    sink19.ready
		.sink19_valid         (crosser_082_out_valid),                                            //          .valid
		.sink19_channel       (crosser_082_out_channel),                                          //          .channel
		.sink19_data          (crosser_082_out_data),                                             //          .data
		.sink19_startofpacket (crosser_082_out_startofpacket),                                    //          .startofpacket
		.sink19_endofpacket   (crosser_082_out_endofpacket),                                      //          .endofpacket
		.sink20_ready         (crosser_084_out_ready),                                            //    sink20.ready
		.sink20_valid         (crosser_084_out_valid),                                            //          .valid
		.sink20_channel       (crosser_084_out_channel),                                          //          .channel
		.sink20_data          (crosser_084_out_data),                                             //          .data
		.sink20_startofpacket (crosser_084_out_startofpacket),                                    //          .startofpacket
		.sink20_endofpacket   (crosser_084_out_endofpacket),                                      //          .endofpacket
		.sink21_ready         (crosser_086_out_ready),                                            //    sink21.ready
		.sink21_valid         (crosser_086_out_valid),                                            //          .valid
		.sink21_channel       (crosser_086_out_channel),                                          //          .channel
		.sink21_data          (crosser_086_out_data),                                             //          .data
		.sink21_startofpacket (crosser_086_out_startofpacket),                                    //          .startofpacket
		.sink21_endofpacket   (crosser_086_out_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                            //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                            //          .valid
		.src_data             (rsp_mux_001_src_data),                                             //          .data
		.src_channel          (rsp_mux_001_src_channel),                                          //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready          (crosser_045_out_ready),                                            //     sink0.ready
		.sink0_valid          (crosser_045_out_valid),                                            //          .valid
		.sink0_channel        (crosser_045_out_channel),                                          //          .channel
		.sink0_data           (crosser_045_out_data),                                             //          .data
		.sink0_startofpacket  (crosser_045_out_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket    (crosser_045_out_endofpacket),                                      //          .endofpacket
		.sink1_ready          (crosser_047_out_ready),                                            //     sink1.ready
		.sink1_valid          (crosser_047_out_valid),                                            //          .valid
		.sink1_channel        (crosser_047_out_channel),                                          //          .channel
		.sink1_data           (crosser_047_out_data),                                             //          .data
		.sink1_startofpacket  (crosser_047_out_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket    (crosser_047_out_endofpacket),                                      //          .endofpacket
		.sink2_ready          (crosser_049_out_ready),                                            //     sink2.ready
		.sink2_valid          (crosser_049_out_valid),                                            //          .valid
		.sink2_channel        (crosser_049_out_channel),                                          //          .channel
		.sink2_data           (crosser_049_out_data),                                             //          .data
		.sink2_startofpacket  (crosser_049_out_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket    (crosser_049_out_endofpacket),                                      //          .endofpacket
		.sink3_ready          (crosser_051_out_ready),                                            //     sink3.ready
		.sink3_valid          (crosser_051_out_valid),                                            //          .valid
		.sink3_channel        (crosser_051_out_channel),                                          //          .channel
		.sink3_data           (crosser_051_out_data),                                             //          .data
		.sink3_startofpacket  (crosser_051_out_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket    (crosser_051_out_endofpacket),                                      //          .endofpacket
		.sink4_ready          (crosser_053_out_ready),                                            //     sink4.ready
		.sink4_valid          (crosser_053_out_valid),                                            //          .valid
		.sink4_channel        (crosser_053_out_channel),                                          //          .channel
		.sink4_data           (crosser_053_out_data),                                             //          .data
		.sink4_startofpacket  (crosser_053_out_startofpacket),                                    //          .startofpacket
		.sink4_endofpacket    (crosser_053_out_endofpacket),                                      //          .endofpacket
		.sink5_ready          (crosser_055_out_ready),                                            //     sink5.ready
		.sink5_valid          (crosser_055_out_valid),                                            //          .valid
		.sink5_channel        (crosser_055_out_channel),                                          //          .channel
		.sink5_data           (crosser_055_out_data),                                             //          .data
		.sink5_startofpacket  (crosser_055_out_startofpacket),                                    //          .startofpacket
		.sink5_endofpacket    (crosser_055_out_endofpacket),                                      //          .endofpacket
		.sink6_ready          (crosser_057_out_ready),                                            //     sink6.ready
		.sink6_valid          (crosser_057_out_valid),                                            //          .valid
		.sink6_channel        (crosser_057_out_channel),                                          //          .channel
		.sink6_data           (crosser_057_out_data),                                             //          .data
		.sink6_startofpacket  (crosser_057_out_startofpacket),                                    //          .startofpacket
		.sink6_endofpacket    (crosser_057_out_endofpacket),                                      //          .endofpacket
		.sink7_ready          (crosser_059_out_ready),                                            //     sink7.ready
		.sink7_valid          (crosser_059_out_valid),                                            //          .valid
		.sink7_channel        (crosser_059_out_channel),                                          //          .channel
		.sink7_data           (crosser_059_out_data),                                             //          .data
		.sink7_startofpacket  (crosser_059_out_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (crosser_059_out_endofpacket),                                      //          .endofpacket
		.sink8_ready          (crosser_061_out_ready),                                            //     sink8.ready
		.sink8_valid          (crosser_061_out_valid),                                            //          .valid
		.sink8_channel        (crosser_061_out_channel),                                          //          .channel
		.sink8_data           (crosser_061_out_data),                                             //          .data
		.sink8_startofpacket  (crosser_061_out_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (crosser_061_out_endofpacket),                                      //          .endofpacket
		.sink9_ready          (crosser_063_out_ready),                                            //     sink9.ready
		.sink9_valid          (crosser_063_out_valid),                                            //          .valid
		.sink9_channel        (crosser_063_out_channel),                                          //          .channel
		.sink9_data           (crosser_063_out_data),                                             //          .data
		.sink9_startofpacket  (crosser_063_out_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (crosser_063_out_endofpacket),                                      //          .endofpacket
		.sink10_ready         (crosser_065_out_ready),                                            //    sink10.ready
		.sink10_valid         (crosser_065_out_valid),                                            //          .valid
		.sink10_channel       (crosser_065_out_channel),                                          //          .channel
		.sink10_data          (crosser_065_out_data),                                             //          .data
		.sink10_startofpacket (crosser_065_out_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (crosser_065_out_endofpacket),                                      //          .endofpacket
		.sink11_ready         (crosser_067_out_ready),                                            //    sink11.ready
		.sink11_valid         (crosser_067_out_valid),                                            //          .valid
		.sink11_channel       (crosser_067_out_channel),                                          //          .channel
		.sink11_data          (crosser_067_out_data),                                             //          .data
		.sink11_startofpacket (crosser_067_out_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (crosser_067_out_endofpacket),                                      //          .endofpacket
		.sink12_ready         (crosser_069_out_ready),                                            //    sink12.ready
		.sink12_valid         (crosser_069_out_valid),                                            //          .valid
		.sink12_channel       (crosser_069_out_channel),                                          //          .channel
		.sink12_data          (crosser_069_out_data),                                             //          .data
		.sink12_startofpacket (crosser_069_out_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (crosser_069_out_endofpacket),                                      //          .endofpacket
		.sink13_ready         (crosser_071_out_ready),                                            //    sink13.ready
		.sink13_valid         (crosser_071_out_valid),                                            //          .valid
		.sink13_channel       (crosser_071_out_channel),                                          //          .channel
		.sink13_data          (crosser_071_out_data),                                             //          .data
		.sink13_startofpacket (crosser_071_out_startofpacket),                                    //          .startofpacket
		.sink13_endofpacket   (crosser_071_out_endofpacket),                                      //          .endofpacket
		.sink14_ready         (crosser_073_out_ready),                                            //    sink14.ready
		.sink14_valid         (crosser_073_out_valid),                                            //          .valid
		.sink14_channel       (crosser_073_out_channel),                                          //          .channel
		.sink14_data          (crosser_073_out_data),                                             //          .data
		.sink14_startofpacket (crosser_073_out_startofpacket),                                    //          .startofpacket
		.sink14_endofpacket   (crosser_073_out_endofpacket),                                      //          .endofpacket
		.sink15_ready         (crosser_075_out_ready),                                            //    sink15.ready
		.sink15_valid         (crosser_075_out_valid),                                            //          .valid
		.sink15_channel       (crosser_075_out_channel),                                          //          .channel
		.sink15_data          (crosser_075_out_data),                                             //          .data
		.sink15_startofpacket (crosser_075_out_startofpacket),                                    //          .startofpacket
		.sink15_endofpacket   (crosser_075_out_endofpacket),                                      //          .endofpacket
		.sink16_ready         (crosser_077_out_ready),                                            //    sink16.ready
		.sink16_valid         (crosser_077_out_valid),                                            //          .valid
		.sink16_channel       (crosser_077_out_channel),                                          //          .channel
		.sink16_data          (crosser_077_out_data),                                             //          .data
		.sink16_startofpacket (crosser_077_out_startofpacket),                                    //          .startofpacket
		.sink16_endofpacket   (crosser_077_out_endofpacket),                                      //          .endofpacket
		.sink17_ready         (crosser_079_out_ready),                                            //    sink17.ready
		.sink17_valid         (crosser_079_out_valid),                                            //          .valid
		.sink17_channel       (crosser_079_out_channel),                                          //          .channel
		.sink17_data          (crosser_079_out_data),                                             //          .data
		.sink17_startofpacket (crosser_079_out_startofpacket),                                    //          .startofpacket
		.sink17_endofpacket   (crosser_079_out_endofpacket),                                      //          .endofpacket
		.sink18_ready         (crosser_081_out_ready),                                            //    sink18.ready
		.sink18_valid         (crosser_081_out_valid),                                            //          .valid
		.sink18_channel       (crosser_081_out_channel),                                          //          .channel
		.sink18_data          (crosser_081_out_data),                                             //          .data
		.sink18_startofpacket (crosser_081_out_startofpacket),                                    //          .startofpacket
		.sink18_endofpacket   (crosser_081_out_endofpacket),                                      //          .endofpacket
		.sink19_ready         (crosser_083_out_ready),                                            //    sink19.ready
		.sink19_valid         (crosser_083_out_valid),                                            //          .valid
		.sink19_channel       (crosser_083_out_channel),                                          //          .channel
		.sink19_data          (crosser_083_out_data),                                             //          .data
		.sink19_startofpacket (crosser_083_out_startofpacket),                                    //          .startofpacket
		.sink19_endofpacket   (crosser_083_out_endofpacket),                                      //          .endofpacket
		.sink20_ready         (crosser_085_out_ready),                                            //    sink20.ready
		.sink20_valid         (crosser_085_out_valid),                                            //          .valid
		.sink20_channel       (crosser_085_out_channel),                                          //          .channel
		.sink20_data          (crosser_085_out_data),                                             //          .data
		.sink20_startofpacket (crosser_085_out_startofpacket),                                    //          .startofpacket
		.sink20_endofpacket   (crosser_085_out_endofpacket),                                      //          .endofpacket
		.sink21_ready         (crosser_087_out_ready),                                            //    sink21.ready
		.sink21_valid         (crosser_087_out_valid),                                            //          .valid
		.sink21_channel       (crosser_087_out_channel),                                          //          .channel
		.sink21_data          (crosser_087_out_data),                                             //          .data
		.sink21_startofpacket (crosser_087_out_startofpacket),                                    //          .startofpacket
		.sink21_endofpacket   (crosser_087_out_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                       //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_002_src_valid),                                //      sink.valid
		.in_channel           (router_002_src_channel),                              //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                        //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                          //          .endofpacket
		.in_ready             (router_002_src_ready),                                //          .ready
		.in_data              (router_002_src_data),                                 //          .data
		.out_endofpacket      (video_input_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_0_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_003_src_valid),                                  //      sink.valid
		.in_channel           (router_003_src_channel),                                //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_003_src_ready),                                  //          .ready
		.in_data              (router_003_src_data),                                   //          .data
		.out_endofpacket      (video_input_0_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_0_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_0_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_0_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_0_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_0_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_1_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_004_src_valid),                                  //      sink.valid
		.in_channel           (router_004_src_channel),                                //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_004_src_ready),                                  //          .ready
		.in_data              (router_004_src_data),                                   //          .data
		.out_endofpacket      (video_input_1_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_1_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_1_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_1_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_1_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_1_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_2_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_005_src_valid),                                  //      sink.valid
		.in_channel           (router_005_src_channel),                                //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_005_src_ready),                                  //          .ready
		.in_data              (router_005_src_data),                                   //          .data
		.out_endofpacket      (video_input_2_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_2_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_2_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_2_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_2_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_2_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_3_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_006_src_valid),                                  //      sink.valid
		.in_channel           (router_006_src_channel),                                //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_006_src_ready),                                  //          .ready
		.in_data              (router_006_src_data),                                   //          .data
		.out_endofpacket      (video_input_3_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_3_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_3_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_3_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_3_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_3_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_4_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_007_src_valid),                                  //      sink.valid
		.in_channel           (router_007_src_channel),                                //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_007_src_ready),                                  //          .ready
		.in_data              (router_007_src_data),                                   //          .data
		.out_endofpacket      (video_input_4_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_4_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_4_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_4_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_4_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_4_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_5_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_008_src_valid),                                  //      sink.valid
		.in_channel           (router_008_src_channel),                                //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_008_src_ready),                                  //          .ready
		.in_data              (router_008_src_data),                                   //          .data
		.out_endofpacket      (video_input_5_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_5_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_5_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_5_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_5_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_5_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_6_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_009_src_valid),                                  //      sink.valid
		.in_channel           (router_009_src_channel),                                //          .channel
		.in_startofpacket     (router_009_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_009_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_009_src_ready),                                  //          .ready
		.in_data              (router_009_src_data),                                   //          .data
		.out_endofpacket      (video_input_6_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_6_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_6_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_6_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_6_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_6_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_7_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_010_src_valid),                                  //      sink.valid
		.in_channel           (router_010_src_channel),                                //          .channel
		.in_startofpacket     (router_010_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_010_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_010_src_ready),                                  //          .ready
		.in_data              (router_010_src_data),                                   //          .data
		.out_endofpacket      (video_input_7_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_7_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_7_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_7_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_7_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_7_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_8_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_011_src_valid),                                  //      sink.valid
		.in_channel           (router_011_src_channel),                                //          .channel
		.in_startofpacket     (router_011_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_011_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_011_src_ready),                                  //          .ready
		.in_data              (router_011_src_data),                                   //          .data
		.out_endofpacket      (video_input_8_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_8_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_8_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_8_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_8_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_8_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_9_out_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_012_src_valid),                                  //      sink.valid
		.in_channel           (router_012_src_channel),                                //          .channel
		.in_startofpacket     (router_012_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_012_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_012_src_ready),                                  //          .ready
		.in_data              (router_012_src_data),                                   //          .data
		.out_endofpacket      (video_input_9_out_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_9_out_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_9_out_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_9_out_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_9_out_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_9_out_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                           //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (router_013_src_valid),                                    //      sink.valid
		.in_channel           (router_013_src_channel),                                  //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_013_src_ready),                                    //          .ready
		.in_data              (router_013_src_data),                                     //          .data
		.out_endofpacket      (video_input_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_0_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_014_src_valid),                                      //      sink.valid
		.in_channel           (router_014_src_channel),                                    //          .channel
		.in_startofpacket     (router_014_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_014_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_014_src_ready),                                      //          .ready
		.in_data              (router_014_src_data),                                       //          .data
		.out_endofpacket      (video_input_0_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_0_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_0_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_0_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_0_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_0_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_1_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_015_src_valid),                                      //      sink.valid
		.in_channel           (router_015_src_channel),                                    //          .channel
		.in_startofpacket     (router_015_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_015_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_015_src_ready),                                      //          .ready
		.in_data              (router_015_src_data),                                       //          .data
		.out_endofpacket      (video_input_1_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_1_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_1_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_1_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_1_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_1_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_2_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_016_src_valid),                                      //      sink.valid
		.in_channel           (router_016_src_channel),                                    //          .channel
		.in_startofpacket     (router_016_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_016_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_016_src_ready),                                      //          .ready
		.in_data              (router_016_src_data),                                       //          .data
		.out_endofpacket      (video_input_2_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_2_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_2_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_2_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_2_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_2_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_3_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_017_src_valid),                                      //      sink.valid
		.in_channel           (router_017_src_channel),                                    //          .channel
		.in_startofpacket     (router_017_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_017_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_017_src_ready),                                      //          .ready
		.in_data              (router_017_src_data),                                       //          .data
		.out_endofpacket      (video_input_3_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_3_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_3_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_3_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_3_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_3_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_4_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_018_src_valid),                                      //      sink.valid
		.in_channel           (router_018_src_channel),                                    //          .channel
		.in_startofpacket     (router_018_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_018_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_018_src_ready),                                      //          .ready
		.in_data              (router_018_src_data),                                       //          .data
		.out_endofpacket      (video_input_4_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_4_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_4_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_4_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_4_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_4_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_5_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_019_src_valid),                                      //      sink.valid
		.in_channel           (router_019_src_channel),                                    //          .channel
		.in_startofpacket     (router_019_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_019_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_019_src_ready),                                      //          .ready
		.in_data              (router_019_src_data),                                       //          .data
		.out_endofpacket      (video_input_5_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_5_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_5_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_5_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_5_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_5_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_6_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_020_src_valid),                                      //      sink.valid
		.in_channel           (router_020_src_channel),                                    //          .channel
		.in_startofpacket     (router_020_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_020_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_020_src_ready),                                      //          .ready
		.in_data              (router_020_src_data),                                       //          .data
		.out_endofpacket      (video_input_6_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_6_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_6_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_6_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_6_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_6_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_7_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_021_src_valid),                                      //      sink.valid
		.in_channel           (router_021_src_channel),                                    //          .channel
		.in_startofpacket     (router_021_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_021_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_021_src_ready),                                      //          .ready
		.in_data              (router_021_src_data),                                       //          .data
		.out_endofpacket      (video_input_7_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_7_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_7_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_7_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_7_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_7_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_8_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_022_src_valid),                                      //      sink.valid
		.in_channel           (router_022_src_channel),                                    //          .channel
		.in_startofpacket     (router_022_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_022_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_022_src_ready),                                      //          .ready
		.in_data              (router_022_src_data),                                       //          .data
		.out_endofpacket      (video_input_8_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_8_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_8_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_8_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_8_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_8_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (79),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (80),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (127),
		.IN_PKT_RESPONSE_STATUS_L      (126),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (128),
		.IN_PKT_ORI_BURST_SIZE_H       (130),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (115),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (126),
		.OUT_PKT_BURST_SIZE_L          (124),
		.OUT_PKT_RESPONSE_STATUS_H     (163),
		.OUT_PKT_RESPONSE_STATUS_L     (162),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (128),
		.OUT_PKT_BURST_TYPE_L          (127),
		.OUT_PKT_ORI_BURST_SIZE_L      (164),
		.OUT_PKT_ORI_BURST_SIZE_H      (166),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_9_out_csr_rsp_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_023_src_valid),                                      //      sink.valid
		.in_channel           (router_023_src_channel),                                    //          .channel
		.in_startofpacket     (router_023_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_023_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_023_src_ready),                                      //          .ready
		.in_data              (router_023_src_data),                                       //          .data
		.out_endofpacket      (video_input_9_out_csr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_9_out_csr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_input_9_out_csr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_9_out_csr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_9_out_csr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_9_out_csr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                       //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                   //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                 //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                             //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                   //          .ready
		.in_data              (cmd_mux_src_data),                                    //          .data
		.out_endofpacket      (video_input_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_0_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                 //          .ready
		.in_data              (cmd_mux_001_src_data),                                  //          .data
		.out_endofpacket      (video_input_0_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_0_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_0_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_0_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_0_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_0_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_1_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                 //          .ready
		.in_data              (cmd_mux_002_src_data),                                  //          .data
		.out_endofpacket      (video_input_1_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_1_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_1_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_1_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_1_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_1_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_2_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                 //          .ready
		.in_data              (cmd_mux_003_src_data),                                  //          .data
		.out_endofpacket      (video_input_2_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_2_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_2_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_2_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_2_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_2_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_3_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                 //          .ready
		.in_data              (cmd_mux_004_src_data),                                  //          .data
		.out_endofpacket      (video_input_3_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_3_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_3_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_3_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_3_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_3_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_4_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_005_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_005_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_005_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_005_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_005_src_ready),                                 //          .ready
		.in_data              (cmd_mux_005_src_data),                                  //          .data
		.out_endofpacket      (video_input_4_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_4_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_4_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_4_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_4_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_4_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_5_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_006_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_006_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_006_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_006_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_006_src_ready),                                 //          .ready
		.in_data              (cmd_mux_006_src_data),                                  //          .data
		.out_endofpacket      (video_input_5_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_5_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_5_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_5_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_5_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_5_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_6_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_007_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_007_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_007_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_007_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_007_src_ready),                                 //          .ready
		.in_data              (cmd_mux_007_src_data),                                  //          .data
		.out_endofpacket      (video_input_6_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_6_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_6_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_6_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_6_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_6_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_7_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_008_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_008_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_008_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_008_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_008_src_ready),                                 //          .ready
		.in_data              (cmd_mux_008_src_data),                                  //          .data
		.out_endofpacket      (video_input_7_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_7_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_7_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_7_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_7_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_7_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_8_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_009_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_009_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_009_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_009_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_009_src_ready),                                 //          .ready
		.in_data              (cmd_mux_009_src_data),                                  //          .data
		.out_endofpacket      (video_input_8_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_8_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_8_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_8_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_8_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_8_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_9_out_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                         //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_010_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_010_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_010_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_010_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_010_src_ready),                                 //          .ready
		.in_data              (cmd_mux_010_src_data),                                  //          .data
		.out_endofpacket      (video_input_9_out_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_9_out_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_9_out_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_9_out_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_9_out_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_9_out_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                           //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (cmd_mux_011_src_valid),                                   //      sink.valid
		.in_channel           (cmd_mux_011_src_channel),                                 //          .channel
		.in_startofpacket     (cmd_mux_011_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (cmd_mux_011_src_endofpacket),                             //          .endofpacket
		.in_ready             (cmd_mux_011_src_ready),                                   //          .ready
		.in_data              (cmd_mux_011_src_data),                                    //          .data
		.out_endofpacket      (video_input_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_0_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_012_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_012_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_012_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_012_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_012_src_ready),                                     //          .ready
		.in_data              (cmd_mux_012_src_data),                                      //          .data
		.out_endofpacket      (video_input_0_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_0_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_0_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_0_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_0_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_0_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_1_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_013_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_013_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_013_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_013_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_013_src_ready),                                     //          .ready
		.in_data              (cmd_mux_013_src_data),                                      //          .data
		.out_endofpacket      (video_input_1_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_1_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_1_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_1_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_1_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_1_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_2_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_014_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_014_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_014_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_014_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_014_src_ready),                                     //          .ready
		.in_data              (cmd_mux_014_src_data),                                      //          .data
		.out_endofpacket      (video_input_2_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_2_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_2_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_2_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_2_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_2_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_3_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_015_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_015_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_015_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_015_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_015_src_ready),                                     //          .ready
		.in_data              (cmd_mux_015_src_data),                                      //          .data
		.out_endofpacket      (video_input_3_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_3_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_3_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_3_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_3_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_3_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_4_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_016_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_016_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_016_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_016_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_016_src_ready),                                     //          .ready
		.in_data              (cmd_mux_016_src_data),                                      //          .data
		.out_endofpacket      (video_input_4_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_4_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_4_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_4_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_4_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_4_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_5_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_017_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_017_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_017_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_017_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_017_src_ready),                                     //          .ready
		.in_data              (cmd_mux_017_src_data),                                      //          .data
		.out_endofpacket      (video_input_5_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_5_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_5_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_5_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_5_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_5_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_6_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_018_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_018_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_018_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_018_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_018_src_ready),                                     //          .ready
		.in_data              (cmd_mux_018_src_data),                                      //          .data
		.out_endofpacket      (video_input_6_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_6_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_6_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_6_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_6_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_6_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_7_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_019_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_019_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_019_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_019_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_019_src_ready),                                     //          .ready
		.in_data              (cmd_mux_019_src_data),                                      //          .data
		.out_endofpacket      (video_input_7_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_7_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_7_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_7_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_7_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_7_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_8_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_020_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_020_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_020_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_020_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_020_src_ready),                                     //          .ready
		.in_data              (cmd_mux_020_src_data),                                      //          .data
		.out_endofpacket      (video_input_8_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_8_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_8_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_8_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_8_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_8_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (115),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (123),
		.IN_PKT_BURSTWRAP_L            (116),
		.IN_PKT_BURST_SIZE_H           (126),
		.IN_PKT_BURST_SIZE_L           (124),
		.IN_PKT_RESPONSE_STATUS_H      (163),
		.IN_PKT_RESPONSE_STATUS_L      (162),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (128),
		.IN_PKT_BURST_TYPE_L           (127),
		.IN_PKT_ORI_BURST_SIZE_L       (164),
		.IN_PKT_ORI_BURST_SIZE_H       (166),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (79),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (127),
		.OUT_PKT_RESPONSE_STATUS_L     (126),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (128),
		.OUT_PKT_ORI_BURST_SIZE_H      (130),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_input_9_out_csr_cmd_width_adapter (
		.clk                  (clk_1_clk_clk),                                             //       clk.clk
		.reset                (video_input_reset_out_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_021_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_021_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_021_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_021_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_021_src_ready),                                     //          .ready
		.in_data              (cmd_mux_021_src_data),                                      //          .data
		.out_endofpacket      (video_input_9_out_csr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_input_9_out_csr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_input_9_out_csr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_input_9_out_csr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_input_9_out_csr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_input_9_out_csr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                           //              .channel
		.in_data           (cmd_demux_src0_data),                                              //              .data
		.out_ready         (crosser_out_ready),                                                //           out.ready
		.out_valid         (crosser_out_valid),                                                //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                        //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                          //              .endofpacket
		.out_channel       (crosser_out_channel),                                              //              .channel
		.out_data          (crosser_out_data),                                                 //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                           //              .channel
		.in_data           (cmd_demux_src1_data),                                              //              .data
		.out_ready         (crosser_001_out_ready),                                            //           out.ready
		.out_valid         (crosser_001_out_valid),                                            //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                          //              .channel
		.out_data          (crosser_001_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src2_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                                           //              .channel
		.in_data           (cmd_demux_src2_data),                                              //              .data
		.out_ready         (crosser_002_out_ready),                                            //           out.ready
		.out_valid         (crosser_002_out_valid),                                            //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                          //              .channel
		.out_data          (crosser_002_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                           //              .channel
		.in_data           (cmd_demux_src3_data),                                              //              .data
		.out_ready         (crosser_003_out_ready),                                            //           out.ready
		.out_valid         (crosser_003_out_valid),                                            //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                          //              .channel
		.out_data          (crosser_003_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                                           //              .channel
		.in_data           (cmd_demux_src4_data),                                              //              .data
		.out_ready         (crosser_004_out_ready),                                            //           out.ready
		.out_valid         (crosser_004_out_valid),                                            //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                          //              .channel
		.out_data          (crosser_004_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src5_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                                           //              .channel
		.in_data           (cmd_demux_src5_data),                                              //              .data
		.out_ready         (crosser_005_out_ready),                                            //           out.ready
		.out_valid         (crosser_005_out_valid),                                            //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                          //              .channel
		.out_data          (crosser_005_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                                           //              .channel
		.in_data           (cmd_demux_src6_data),                                              //              .data
		.out_ready         (crosser_006_out_ready),                                            //           out.ready
		.out_valid         (crosser_006_out_valid),                                            //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                          //              .channel
		.out_data          (crosser_006_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src7_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                                           //              .channel
		.in_data           (cmd_demux_src7_data),                                              //              .data
		.out_ready         (crosser_007_out_ready),                                            //           out.ready
		.out_valid         (crosser_007_out_valid),                                            //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                          //              .channel
		.out_data          (crosser_007_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src8_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src8_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src8_channel),                                           //              .channel
		.in_data           (cmd_demux_src8_data),                                              //              .data
		.out_ready         (crosser_008_out_ready),                                            //           out.ready
		.out_valid         (crosser_008_out_valid),                                            //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                          //              .channel
		.out_data          (crosser_008_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src9_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src9_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src9_channel),                                           //              .channel
		.in_data           (cmd_demux_src9_data),                                              //              .data
		.out_ready         (crosser_009_out_ready),                                            //           out.ready
		.out_valid         (crosser_009_out_valid),                                            //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                          //              .channel
		.out_data          (crosser_009_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src10_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src10_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src10_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src10_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src10_channel),                                          //              .channel
		.in_data           (cmd_demux_src10_data),                                             //              .data
		.out_ready         (crosser_010_out_ready),                                            //           out.ready
		.out_valid         (crosser_010_out_valid),                                            //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                          //              .channel
		.out_data          (crosser_010_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src11_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src11_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src11_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src11_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src11_channel),                                          //              .channel
		.in_data           (cmd_demux_src11_data),                                             //              .data
		.out_ready         (crosser_011_out_ready),                                            //           out.ready
		.out_valid         (crosser_011_out_valid),                                            //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                          //              .channel
		.out_data          (crosser_011_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src12_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src12_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src12_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src12_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src12_channel),                                          //              .channel
		.in_data           (cmd_demux_src12_data),                                             //              .data
		.out_ready         (crosser_012_out_ready),                                            //           out.ready
		.out_valid         (crosser_012_out_valid),                                            //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                          //              .channel
		.out_data          (crosser_012_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src13_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src13_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src13_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src13_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src13_channel),                                          //              .channel
		.in_data           (cmd_demux_src13_data),                                             //              .data
		.out_ready         (crosser_013_out_ready),                                            //           out.ready
		.out_valid         (crosser_013_out_valid),                                            //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_013_out_channel),                                          //              .channel
		.out_data          (crosser_013_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src14_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src14_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src14_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src14_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src14_channel),                                          //              .channel
		.in_data           (cmd_demux_src14_data),                                             //              .data
		.out_ready         (crosser_014_out_ready),                                            //           out.ready
		.out_valid         (crosser_014_out_valid),                                            //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_014_out_channel),                                          //              .channel
		.out_data          (crosser_014_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src15_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src15_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src15_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src15_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src15_channel),                                          //              .channel
		.in_data           (cmd_demux_src15_data),                                             //              .data
		.out_ready         (crosser_015_out_ready),                                            //           out.ready
		.out_valid         (crosser_015_out_valid),                                            //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                          //              .channel
		.out_data          (crosser_015_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src16_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src16_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src16_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src16_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src16_channel),                                          //              .channel
		.in_data           (cmd_demux_src16_data),                                             //              .data
		.out_ready         (crosser_016_out_ready),                                            //           out.ready
		.out_valid         (crosser_016_out_valid),                                            //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_016_out_channel),                                          //              .channel
		.out_data          (crosser_016_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src17_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src17_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src17_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src17_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src17_channel),                                          //              .channel
		.in_data           (cmd_demux_src17_data),                                             //              .data
		.out_ready         (crosser_017_out_ready),                                            //           out.ready
		.out_valid         (crosser_017_out_valid),                                            //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                          //              .channel
		.out_data          (crosser_017_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src18_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src18_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src18_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src18_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src18_channel),                                          //              .channel
		.in_data           (cmd_demux_src18_data),                                             //              .data
		.out_ready         (crosser_018_out_ready),                                            //           out.ready
		.out_valid         (crosser_018_out_valid),                                            //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_018_out_channel),                                          //              .channel
		.out_data          (crosser_018_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src19_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src19_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src19_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src19_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src19_channel),                                          //              .channel
		.in_data           (cmd_demux_src19_data),                                             //              .data
		.out_ready         (crosser_019_out_ready),                                            //           out.ready
		.out_valid         (crosser_019_out_valid),                                            //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_019_out_channel),                                          //              .channel
		.out_data          (crosser_019_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_020 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src20_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src20_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src20_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src20_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src20_channel),                                          //              .channel
		.in_data           (cmd_demux_src20_data),                                             //              .data
		.out_ready         (crosser_020_out_ready),                                            //           out.ready
		.out_valid         (crosser_020_out_valid),                                            //              .valid
		.out_startofpacket (crosser_020_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_020_out_channel),                                          //              .channel
		.out_data          (crosser_020_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_021 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_src21_ready),                                            //            in.ready
		.in_valid          (cmd_demux_src21_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_src21_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src21_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_src21_channel),                                          //              .channel
		.in_data           (cmd_demux_src21_data),                                             //              .data
		.out_ready         (crosser_021_out_ready),                                            //           out.ready
		.out_valid         (crosser_021_out_valid),                                            //              .valid
		.out_startofpacket (crosser_021_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_021_out_channel),                                          //              .channel
		.out_data          (crosser_021_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_022 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src0_data),                                          //              .data
		.out_ready         (crosser_022_out_ready),                                            //           out.ready
		.out_valid         (crosser_022_out_valid),                                            //              .valid
		.out_startofpacket (crosser_022_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_022_out_channel),                                          //              .channel
		.out_data          (crosser_022_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_023 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src1_data),                                          //              .data
		.out_ready         (crosser_023_out_ready),                                            //           out.ready
		.out_valid         (crosser_023_out_valid),                                            //              .valid
		.out_startofpacket (crosser_023_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_023_out_channel),                                          //              .channel
		.out_data          (crosser_023_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_024 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src2_data),                                          //              .data
		.out_ready         (crosser_024_out_ready),                                            //           out.ready
		.out_valid         (crosser_024_out_valid),                                            //              .valid
		.out_startofpacket (crosser_024_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_024_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_024_out_channel),                                          //              .channel
		.out_data          (crosser_024_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_025 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src3_data),                                          //              .data
		.out_ready         (crosser_025_out_ready),                                            //           out.ready
		.out_valid         (crosser_025_out_valid),                                            //              .valid
		.out_startofpacket (crosser_025_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_025_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_025_out_channel),                                          //              .channel
		.out_data          (crosser_025_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_026 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src4_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src4_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src4_data),                                          //              .data
		.out_ready         (crosser_026_out_ready),                                            //           out.ready
		.out_valid         (crosser_026_out_valid),                                            //              .valid
		.out_startofpacket (crosser_026_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_026_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_026_out_channel),                                          //              .channel
		.out_data          (crosser_026_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_027 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src5_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src5_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src5_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src5_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src5_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src5_data),                                          //              .data
		.out_ready         (crosser_027_out_ready),                                            //           out.ready
		.out_valid         (crosser_027_out_valid),                                            //              .valid
		.out_startofpacket (crosser_027_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_027_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_027_out_channel),                                          //              .channel
		.out_data          (crosser_027_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_028 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src6_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src6_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src6_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src6_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src6_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src6_data),                                          //              .data
		.out_ready         (crosser_028_out_ready),                                            //           out.ready
		.out_valid         (crosser_028_out_valid),                                            //              .valid
		.out_startofpacket (crosser_028_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_028_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_028_out_channel),                                          //              .channel
		.out_data          (crosser_028_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_029 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src7_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src7_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src7_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src7_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src7_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src7_data),                                          //              .data
		.out_ready         (crosser_029_out_ready),                                            //           out.ready
		.out_valid         (crosser_029_out_valid),                                            //              .valid
		.out_startofpacket (crosser_029_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_029_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_029_out_channel),                                          //              .channel
		.out_data          (crosser_029_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_030 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src8_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src8_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src8_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src8_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src8_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src8_data),                                          //              .data
		.out_ready         (crosser_030_out_ready),                                            //           out.ready
		.out_valid         (crosser_030_out_valid),                                            //              .valid
		.out_startofpacket (crosser_030_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_030_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_030_out_channel),                                          //              .channel
		.out_data          (crosser_030_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_031 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src9_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src9_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src9_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src9_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src9_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src9_data),                                          //              .data
		.out_ready         (crosser_031_out_ready),                                            //           out.ready
		.out_valid         (crosser_031_out_valid),                                            //              .valid
		.out_startofpacket (crosser_031_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_031_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_031_out_channel),                                          //              .channel
		.out_data          (crosser_031_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_032 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src10_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src10_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src10_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src10_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src10_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src10_data),                                         //              .data
		.out_ready         (crosser_032_out_ready),                                            //           out.ready
		.out_valid         (crosser_032_out_valid),                                            //              .valid
		.out_startofpacket (crosser_032_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_032_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_032_out_channel),                                          //              .channel
		.out_data          (crosser_032_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_033 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src11_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src11_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src11_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src11_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src11_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src11_data),                                         //              .data
		.out_ready         (crosser_033_out_ready),                                            //           out.ready
		.out_valid         (crosser_033_out_valid),                                            //              .valid
		.out_startofpacket (crosser_033_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_033_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_033_out_channel),                                          //              .channel
		.out_data          (crosser_033_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_034 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src12_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src12_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src12_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src12_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src12_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src12_data),                                         //              .data
		.out_ready         (crosser_034_out_ready),                                            //           out.ready
		.out_valid         (crosser_034_out_valid),                                            //              .valid
		.out_startofpacket (crosser_034_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_034_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_034_out_channel),                                          //              .channel
		.out_data          (crosser_034_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_035 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src13_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src13_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src13_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src13_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src13_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src13_data),                                         //              .data
		.out_ready         (crosser_035_out_ready),                                            //           out.ready
		.out_valid         (crosser_035_out_valid),                                            //              .valid
		.out_startofpacket (crosser_035_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_035_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_035_out_channel),                                          //              .channel
		.out_data          (crosser_035_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_036 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src14_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src14_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src14_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src14_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src14_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src14_data),                                         //              .data
		.out_ready         (crosser_036_out_ready),                                            //           out.ready
		.out_valid         (crosser_036_out_valid),                                            //              .valid
		.out_startofpacket (crosser_036_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_036_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_036_out_channel),                                          //              .channel
		.out_data          (crosser_036_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_037 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src15_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src15_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src15_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src15_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src15_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src15_data),                                         //              .data
		.out_ready         (crosser_037_out_ready),                                            //           out.ready
		.out_valid         (crosser_037_out_valid),                                            //              .valid
		.out_startofpacket (crosser_037_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_037_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_037_out_channel),                                          //              .channel
		.out_data          (crosser_037_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_038 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src16_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src16_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src16_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src16_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src16_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src16_data),                                         //              .data
		.out_ready         (crosser_038_out_ready),                                            //           out.ready
		.out_valid         (crosser_038_out_valid),                                            //              .valid
		.out_startofpacket (crosser_038_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_038_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_038_out_channel),                                          //              .channel
		.out_data          (crosser_038_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_039 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src17_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src17_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src17_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src17_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src17_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src17_data),                                         //              .data
		.out_ready         (crosser_039_out_ready),                                            //           out.ready
		.out_valid         (crosser_039_out_valid),                                            //              .valid
		.out_startofpacket (crosser_039_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_039_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_039_out_channel),                                          //              .channel
		.out_data          (crosser_039_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_040 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src18_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src18_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src18_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src18_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src18_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src18_data),                                         //              .data
		.out_ready         (crosser_040_out_ready),                                            //           out.ready
		.out_valid         (crosser_040_out_valid),                                            //              .valid
		.out_startofpacket (crosser_040_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_040_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_040_out_channel),                                          //              .channel
		.out_data          (crosser_040_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_041 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src19_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src19_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src19_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src19_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src19_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src19_data),                                         //              .data
		.out_ready         (crosser_041_out_ready),                                            //           out.ready
		.out_valid         (crosser_041_out_valid),                                            //              .valid
		.out_startofpacket (crosser_041_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_041_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_041_out_channel),                                          //              .channel
		.out_data          (crosser_041_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_042 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src20_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src20_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src20_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src20_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src20_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src20_data),                                         //              .data
		.out_ready         (crosser_042_out_ready),                                            //           out.ready
		.out_valid         (crosser_042_out_valid),                                            //              .valid
		.out_startofpacket (crosser_042_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_042_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_042_out_channel),                                          //              .channel
		.out_data          (crosser_042_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_043 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_1_clk_clk),                                                    //       out_clk.clk
		.out_reset         (video_input_reset_out_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src21_ready),                                        //            in.ready
		.in_valid          (cmd_demux_001_src21_valid),                                        //              .valid
		.in_startofpacket  (cmd_demux_001_src21_startofpacket),                                //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src21_endofpacket),                                  //              .endofpacket
		.in_channel        (cmd_demux_001_src21_channel),                                      //              .channel
		.in_data           (cmd_demux_001_src21_data),                                         //              .data
		.out_ready         (crosser_043_out_ready),                                            //           out.ready
		.out_valid         (crosser_043_out_valid),                                            //              .valid
		.out_startofpacket (crosser_043_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_043_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_043_out_channel),                                          //              .channel
		.out_data          (crosser_043_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_044 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                             //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                             //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                       //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                           //              .channel
		.in_data           (rsp_demux_src0_data),                                              //              .data
		.out_ready         (crosser_044_out_ready),                                            //           out.ready
		.out_valid         (crosser_044_out_valid),                                            //              .valid
		.out_startofpacket (crosser_044_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_044_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_044_out_channel),                                          //              .channel
		.out_data          (crosser_044_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_045 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                             //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                             //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                       //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                           //              .channel
		.in_data           (rsp_demux_src1_data),                                              //              .data
		.out_ready         (crosser_045_out_ready),                                            //           out.ready
		.out_valid         (crosser_045_out_valid),                                            //              .valid
		.out_startofpacket (crosser_045_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_045_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_045_out_channel),                                          //              .channel
		.out_data          (crosser_045_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_046 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_001_src0_data),                                          //              .data
		.out_ready         (crosser_046_out_ready),                                            //           out.ready
		.out_valid         (crosser_046_out_valid),                                            //              .valid
		.out_startofpacket (crosser_046_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_046_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_046_out_channel),                                          //              .channel
		.out_data          (crosser_046_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_047 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_001_src1_data),                                          //              .data
		.out_ready         (crosser_047_out_ready),                                            //           out.ready
		.out_valid         (crosser_047_out_valid),                                            //              .valid
		.out_startofpacket (crosser_047_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_047_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_047_out_channel),                                          //              .channel
		.out_data          (crosser_047_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_048 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_002_src0_data),                                          //              .data
		.out_ready         (crosser_048_out_ready),                                            //           out.ready
		.out_valid         (crosser_048_out_valid),                                            //              .valid
		.out_startofpacket (crosser_048_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_048_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_048_out_channel),                                          //              .channel
		.out_data          (crosser_048_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_049 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_002_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_002_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_002_src1_data),                                          //              .data
		.out_ready         (crosser_049_out_ready),                                            //           out.ready
		.out_valid         (crosser_049_out_valid),                                            //              .valid
		.out_startofpacket (crosser_049_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_049_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_049_out_channel),                                          //              .channel
		.out_data          (crosser_049_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_050 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_003_src0_data),                                          //              .data
		.out_ready         (crosser_050_out_ready),                                            //           out.ready
		.out_valid         (crosser_050_out_valid),                                            //              .valid
		.out_startofpacket (crosser_050_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_050_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_050_out_channel),                                          //              .channel
		.out_data          (crosser_050_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_051 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_003_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_003_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_003_src1_data),                                          //              .data
		.out_ready         (crosser_051_out_ready),                                            //           out.ready
		.out_valid         (crosser_051_out_valid),                                            //              .valid
		.out_startofpacket (crosser_051_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_051_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_051_out_channel),                                          //              .channel
		.out_data          (crosser_051_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_052 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_004_src0_data),                                          //              .data
		.out_ready         (crosser_052_out_ready),                                            //           out.ready
		.out_valid         (crosser_052_out_valid),                                            //              .valid
		.out_startofpacket (crosser_052_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_052_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_052_out_channel),                                          //              .channel
		.out_data          (crosser_052_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_053 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_004_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_004_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_004_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_004_src1_data),                                          //              .data
		.out_ready         (crosser_053_out_ready),                                            //           out.ready
		.out_valid         (crosser_053_out_valid),                                            //              .valid
		.out_startofpacket (crosser_053_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_053_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_053_out_channel),                                          //              .channel
		.out_data          (crosser_053_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_054 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_005_src0_data),                                          //              .data
		.out_ready         (crosser_054_out_ready),                                            //           out.ready
		.out_valid         (crosser_054_out_valid),                                            //              .valid
		.out_startofpacket (crosser_054_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_054_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_054_out_channel),                                          //              .channel
		.out_data          (crosser_054_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_055 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_005_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_005_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_005_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_005_src1_data),                                          //              .data
		.out_ready         (crosser_055_out_ready),                                            //           out.ready
		.out_valid         (crosser_055_out_valid),                                            //              .valid
		.out_startofpacket (crosser_055_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_055_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_055_out_channel),                                          //              .channel
		.out_data          (crosser_055_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_056 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_006_src0_data),                                          //              .data
		.out_ready         (crosser_056_out_ready),                                            //           out.ready
		.out_valid         (crosser_056_out_valid),                                            //              .valid
		.out_startofpacket (crosser_056_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_056_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_056_out_channel),                                          //              .channel
		.out_data          (crosser_056_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_057 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_006_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_006_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_006_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_006_src1_data),                                          //              .data
		.out_ready         (crosser_057_out_ready),                                            //           out.ready
		.out_valid         (crosser_057_out_valid),                                            //              .valid
		.out_startofpacket (crosser_057_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_057_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_057_out_channel),                                          //              .channel
		.out_data          (crosser_057_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_058 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_007_src0_data),                                          //              .data
		.out_ready         (crosser_058_out_ready),                                            //           out.ready
		.out_valid         (crosser_058_out_valid),                                            //              .valid
		.out_startofpacket (crosser_058_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_058_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_058_out_channel),                                          //              .channel
		.out_data          (crosser_058_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_059 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_007_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_007_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_007_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_007_src1_data),                                          //              .data
		.out_ready         (crosser_059_out_ready),                                            //           out.ready
		.out_valid         (crosser_059_out_valid),                                            //              .valid
		.out_startofpacket (crosser_059_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_059_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_059_out_channel),                                          //              .channel
		.out_data          (crosser_059_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_060 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_008_src0_data),                                          //              .data
		.out_ready         (crosser_060_out_ready),                                            //           out.ready
		.out_valid         (crosser_060_out_valid),                                            //              .valid
		.out_startofpacket (crosser_060_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_060_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_060_out_channel),                                          //              .channel
		.out_data          (crosser_060_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_061 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_008_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_008_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_008_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_008_src1_data),                                          //              .data
		.out_ready         (crosser_061_out_ready),                                            //           out.ready
		.out_valid         (crosser_061_out_valid),                                            //              .valid
		.out_startofpacket (crosser_061_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_061_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_061_out_channel),                                          //              .channel
		.out_data          (crosser_061_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_062 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_009_src0_data),                                          //              .data
		.out_ready         (crosser_062_out_ready),                                            //           out.ready
		.out_valid         (crosser_062_out_valid),                                            //              .valid
		.out_startofpacket (crosser_062_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_062_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_062_out_channel),                                          //              .channel
		.out_data          (crosser_062_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_063 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_009_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_009_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_009_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_009_src1_data),                                          //              .data
		.out_ready         (crosser_063_out_ready),                                            //           out.ready
		.out_valid         (crosser_063_out_valid),                                            //              .valid
		.out_startofpacket (crosser_063_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_063_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_063_out_channel),                                          //              .channel
		.out_data          (crosser_063_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_064 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_010_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_010_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_010_src0_data),                                          //              .data
		.out_ready         (crosser_064_out_ready),                                            //           out.ready
		.out_valid         (crosser_064_out_valid),                                            //              .valid
		.out_startofpacket (crosser_064_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_064_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_064_out_channel),                                          //              .channel
		.out_data          (crosser_064_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_065 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_010_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_010_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_010_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_010_src1_data),                                          //              .data
		.out_ready         (crosser_065_out_ready),                                            //           out.ready
		.out_valid         (crosser_065_out_valid),                                            //              .valid
		.out_startofpacket (crosser_065_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_065_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_065_out_channel),                                          //              .channel
		.out_data          (crosser_065_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_066 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_011_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_011_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_011_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_011_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_011_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_011_src0_data),                                          //              .data
		.out_ready         (crosser_066_out_ready),                                            //           out.ready
		.out_valid         (crosser_066_out_valid),                                            //              .valid
		.out_startofpacket (crosser_066_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_066_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_066_out_channel),                                          //              .channel
		.out_data          (crosser_066_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_067 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_011_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_011_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_011_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_011_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_011_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_011_src1_data),                                          //              .data
		.out_ready         (crosser_067_out_ready),                                            //           out.ready
		.out_valid         (crosser_067_out_valid),                                            //              .valid
		.out_startofpacket (crosser_067_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_067_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_067_out_channel),                                          //              .channel
		.out_data          (crosser_067_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_068 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_012_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_012_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_012_src0_data),                                          //              .data
		.out_ready         (crosser_068_out_ready),                                            //           out.ready
		.out_valid         (crosser_068_out_valid),                                            //              .valid
		.out_startofpacket (crosser_068_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_068_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_068_out_channel),                                          //              .channel
		.out_data          (crosser_068_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_069 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_012_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_012_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_012_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_012_src1_data),                                          //              .data
		.out_ready         (crosser_069_out_ready),                                            //           out.ready
		.out_valid         (crosser_069_out_valid),                                            //              .valid
		.out_startofpacket (crosser_069_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_069_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_069_out_channel),                                          //              .channel
		.out_data          (crosser_069_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_070 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_013_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_013_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_013_src0_data),                                          //              .data
		.out_ready         (crosser_070_out_ready),                                            //           out.ready
		.out_valid         (crosser_070_out_valid),                                            //              .valid
		.out_startofpacket (crosser_070_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_070_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_070_out_channel),                                          //              .channel
		.out_data          (crosser_070_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_071 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_013_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_013_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_013_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_013_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_013_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_013_src1_data),                                          //              .data
		.out_ready         (crosser_071_out_ready),                                            //           out.ready
		.out_valid         (crosser_071_out_valid),                                            //              .valid
		.out_startofpacket (crosser_071_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_071_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_071_out_channel),                                          //              .channel
		.out_data          (crosser_071_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_072 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_014_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_014_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_014_src0_data),                                          //              .data
		.out_ready         (crosser_072_out_ready),                                            //           out.ready
		.out_valid         (crosser_072_out_valid),                                            //              .valid
		.out_startofpacket (crosser_072_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_072_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_072_out_channel),                                          //              .channel
		.out_data          (crosser_072_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_073 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_014_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_014_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_014_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_014_src1_data),                                          //              .data
		.out_ready         (crosser_073_out_ready),                                            //           out.ready
		.out_valid         (crosser_073_out_valid),                                            //              .valid
		.out_startofpacket (crosser_073_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_073_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_073_out_channel),                                          //              .channel
		.out_data          (crosser_073_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_074 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_015_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_015_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_015_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_015_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_015_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_015_src0_data),                                          //              .data
		.out_ready         (crosser_074_out_ready),                                            //           out.ready
		.out_valid         (crosser_074_out_valid),                                            //              .valid
		.out_startofpacket (crosser_074_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_074_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_074_out_channel),                                          //              .channel
		.out_data          (crosser_074_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_075 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_015_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_015_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_015_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_015_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_015_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_015_src1_data),                                          //              .data
		.out_ready         (crosser_075_out_ready),                                            //           out.ready
		.out_valid         (crosser_075_out_valid),                                            //              .valid
		.out_startofpacket (crosser_075_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_075_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_075_out_channel),                                          //              .channel
		.out_data          (crosser_075_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_076 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_016_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_016_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_016_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_016_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_016_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_016_src0_data),                                          //              .data
		.out_ready         (crosser_076_out_ready),                                            //           out.ready
		.out_valid         (crosser_076_out_valid),                                            //              .valid
		.out_startofpacket (crosser_076_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_076_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_076_out_channel),                                          //              .channel
		.out_data          (crosser_076_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_077 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_016_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_016_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_016_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_016_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_016_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_016_src1_data),                                          //              .data
		.out_ready         (crosser_077_out_ready),                                            //           out.ready
		.out_valid         (crosser_077_out_valid),                                            //              .valid
		.out_startofpacket (crosser_077_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_077_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_077_out_channel),                                          //              .channel
		.out_data          (crosser_077_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_078 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_017_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_017_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_017_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_017_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_017_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_017_src0_data),                                          //              .data
		.out_ready         (crosser_078_out_ready),                                            //           out.ready
		.out_valid         (crosser_078_out_valid),                                            //              .valid
		.out_startofpacket (crosser_078_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_078_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_078_out_channel),                                          //              .channel
		.out_data          (crosser_078_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_079 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_017_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_017_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_017_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_017_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_017_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_017_src1_data),                                          //              .data
		.out_ready         (crosser_079_out_ready),                                            //           out.ready
		.out_valid         (crosser_079_out_valid),                                            //              .valid
		.out_startofpacket (crosser_079_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_079_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_079_out_channel),                                          //              .channel
		.out_data          (crosser_079_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_080 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_018_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_018_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_018_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_018_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_018_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_018_src0_data),                                          //              .data
		.out_ready         (crosser_080_out_ready),                                            //           out.ready
		.out_valid         (crosser_080_out_valid),                                            //              .valid
		.out_startofpacket (crosser_080_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_080_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_080_out_channel),                                          //              .channel
		.out_data          (crosser_080_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_081 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_018_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_018_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_018_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_018_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_018_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_018_src1_data),                                          //              .data
		.out_ready         (crosser_081_out_ready),                                            //           out.ready
		.out_valid         (crosser_081_out_valid),                                            //              .valid
		.out_startofpacket (crosser_081_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_081_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_081_out_channel),                                          //              .channel
		.out_data          (crosser_081_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_082 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_019_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_019_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_019_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_019_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_019_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_019_src0_data),                                          //              .data
		.out_ready         (crosser_082_out_ready),                                            //           out.ready
		.out_valid         (crosser_082_out_valid),                                            //              .valid
		.out_startofpacket (crosser_082_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_082_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_082_out_channel),                                          //              .channel
		.out_data          (crosser_082_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_083 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_019_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_019_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_019_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_019_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_019_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_019_src1_data),                                          //              .data
		.out_ready         (crosser_083_out_ready),                                            //           out.ready
		.out_valid         (crosser_083_out_valid),                                            //              .valid
		.out_startofpacket (crosser_083_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_083_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_083_out_channel),                                          //              .channel
		.out_data          (crosser_083_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_084 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_020_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_020_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_020_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_020_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_020_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_020_src0_data),                                          //              .data
		.out_ready         (crosser_084_out_ready),                                            //           out.ready
		.out_valid         (crosser_084_out_valid),                                            //              .valid
		.out_startofpacket (crosser_084_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_084_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_084_out_channel),                                          //              .channel
		.out_data          (crosser_084_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_085 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_020_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_020_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_020_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_020_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_020_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_020_src1_data),                                          //              .data
		.out_ready         (crosser_085_out_ready),                                            //           out.ready
		.out_valid         (crosser_085_out_valid),                                            //              .valid
		.out_startofpacket (crosser_085_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_085_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_085_out_channel),                                          //              .channel
		.out_data          (crosser_085_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_086 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_021_src0_ready),                                         //            in.ready
		.in_valid          (rsp_demux_021_src0_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_021_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_021_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_021_src0_channel),                                       //              .channel
		.in_data           (rsp_demux_021_src0_data),                                          //              .data
		.out_ready         (crosser_086_out_ready),                                            //           out.ready
		.out_valid         (crosser_086_out_valid),                                            //              .valid
		.out_startofpacket (crosser_086_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_086_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_086_out_channel),                                          //              .channel
		.out_data          (crosser_086_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (167),
		.BITS_PER_SYMBOL     (167),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_087 (
		.in_clk            (clk_1_clk_clk),                                                    //        in_clk.clk
		.in_reset          (video_input_reset_out_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_021_src1_ready),                                         //            in.ready
		.in_valid          (rsp_demux_021_src1_valid),                                         //              .valid
		.in_startofpacket  (rsp_demux_021_src1_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (rsp_demux_021_src1_endofpacket),                                   //              .endofpacket
		.in_channel        (rsp_demux_021_src1_channel),                                       //              .channel
		.in_data           (rsp_demux_021_src1_data),                                          //              .data
		.out_ready         (crosser_087_out_ready),                                            //           out.ready
		.out_valid         (crosser_087_out_valid),                                            //              .valid
		.out_startofpacket (crosser_087_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_087_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_087_out_channel),                                          //              .channel
		.out_data          (crosser_087_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_out_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (video_input_out_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (video_input_out_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                      //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_0_out_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (video_input_0_out_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (video_input_0_out_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_1_out_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (video_input_1_out_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (video_input_1_out_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_2_out_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (video_input_2_out_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (video_input_2_out_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_3_out_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (video_input_3_out_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (video_input_3_out_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_4_out_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (video_input_4_out_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (video_input_4_out_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_5_out_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (video_input_5_out_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (video_input_5_out_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_6_out_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (video_input_6_out_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (video_input_6_out_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_7_out_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (video_input_7_out_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (video_input_7_out_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_8_out_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (video_input_8_out_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (video_input_8_out_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_9_out_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (video_input_9_out_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (video_input_9_out_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_out_csr_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (video_input_out_csr_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (video_input_out_csr_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_0_out_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_input_0_out_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_input_0_out_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_1_out_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_input_1_out_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_input_1_out_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_2_out_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_input_2_out_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_input_2_out_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_3_out_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_input_3_out_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_input_3_out_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_4_out_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_input_4_out_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_input_4_out_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_5_out_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_input_5_out_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_input_5_out_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_6_out_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_input_6_out_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_input_6_out_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_7_out_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_input_7_out_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_input_7_out_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_8_out_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_input_8_out_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_input_8_out_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_1_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (video_input_reset_out_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_input_9_out_csr_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_input_9_out_csr_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_input_9_out_csr_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                  //         .error
	);

endmodule
