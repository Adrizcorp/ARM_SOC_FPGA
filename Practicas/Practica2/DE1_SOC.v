
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC(

	//////////// ADC //////////
	inout 		          		ADC_CS_N,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		     [7:0]		VGA_B,
	output		          		VGA_BLANK_N,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);



//=======================================================
//  REG/WIRE declarations
//=======================================================


wire div_freq_clk;
assign LEDR[9]=div_freq_clk;
wire key0_sync;
//=======================================================
//  Structural coding
//=======================================================

divisor_frecuencia divisor_frecuencia_inst
(
	.clk(CLOCK_50) ,	// input  clk_sig
	.reset(1'b1) ,	// input  reset_sig
	.in(32'd25000000) ,	// input [31:0] in_sig
	.divf(div_freq_clk) 	// output  divf_sig
);


contador contador_inst
(
	.clk(div_freq_clk) ,	// input  clk_sig
	.reset(1'b1) ,	// input  reset_sig
	.out() 	// output [9:0] out_sig
);


atrapador_flancos atrapador_flancos_inst
(
	.async_signal(KEY[0]) ,	// input  async_signal_sig
	.clk(div_freq_clk) ,	// input  clk_sig
	.sync_signal(key0_sync) 	// output  sync_signal_sig
);


FSM_ejemplo FSM_ejemplo_inst
(
	.clk(div_freq_clk) ,	// input  clk_sig
	.start(key0_sync) ,	// input  start_sig
	.sw0(SW[0]) ,	// input  sw0_sig
	.led(LEDR[8:1]) ,	// output [7:0] led_sig
	.finish(LEDR[0]) 	// output  finish_sig
);




endmodule
